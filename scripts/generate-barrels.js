import {
  existsSync,
  mkdirSync,
  readdirSync,
  readFileSync,
  writeFileSync,
} from "fs";
import { join } from "path";

/**
 * @typedef {Object} ExportInfo
 * @property {string} path - Relative path to the file
 * @property {string[]} namedExports - Array of named export identifiers
 * @property {boolean} hasDefaultExport - Whether file has a default export
 */

/**
 * Extracts export information from file content
 * @param {string} content - File content to analyze
 * @returns {{ named: string[], hasDefault: boolean }} Export information
 */
function findExports(content) {
  const namedExportRegex =
    /export\s+(?:const|let|var|function|class)\s+([^=\s{]+)/g;
  const namedExports = Array.from(
    content.matchAll(namedExportRegex),
    (m) => m[1]
  );
  const hasDefaultExport = /export\s+default/.test(content);
  return { named: namedExports, hasDefault: hasDefaultExport };
}

/**
 * Generates barrel files (index.js) for specified directories
 * @param {string[]} directories - Array of directory paths to process
 * @throws {Error} If directory creation or file writing fails
 */
function generateBarrelFiles(directories) {
  directories.forEach((dir) => {
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
      return;
    }

    /** @type {ExportInfo[]} */
    const exports = readdirSync(dir, { withFileTypes: true })
      .filter((dirent) => dirent.isFile() && /\.m?js$/.test(dirent.name))
      .filter((dirent) => !dirent.name.startsWith("index."))
      .map((file) => {
        const filePath = join(dir, file.name);
        const content = readFileSync(filePath, "utf-8");
        const { named, hasDefault } = findExports(content);
        return {
          path: "./" + file.name.replace(/\.m?js$/, ""),
          namedExports: named,
          hasDefaultExport: hasDefault,
        };
      });

    const warningComment = `// This file is auto-generated. Do not edit this file manually.\n// Generated on: ${new Date().toISOString()}\n\n`;

    const barrelContent = exports
      .map((exp) => {
        const lines = [];
        if (exp.namedExports.length > 0) {
          lines.push(`export * from "${exp.path}";`);
        }
        if (exp.hasDefaultExport) {
          const name = exp.path.split("/").pop();
          lines.push(`export { default as ${name} } from "${exp.path}";`);
        }
        return lines.join("\n");
      })
      .filter(Boolean)
      .join("\n");

    writeFileSync(join(dir, "index.js"), warningComment + barrelContent);
  });
}

generateBarrelFiles([
  "./src/models",
  "./src/events",
  "./src/errors",
  "./src/commands",
  "./src/useCases",
]);

export { generateBarrelFiles };
