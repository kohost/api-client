import {
  existsSync,
  mkdirSync,
  readdirSync,
  readFileSync,
  writeFileSync,
} from "fs";
import { join } from "path";

/**
 * @typedef {Object} ExportInfo
 * @property {string} path - Relative path to the file
 * @property {string[]} namedExports - Array of named export identifiers
 * @property {boolean} hasDefaultExport - Whether file has a default export
 */

/**
 * Extracts export information from file content
 * @param {string} content - File content to analyze
 * @returns {{ named: string[], hasDefault: boolean }} Export information
 */
function findExports(content) {
  const namedExportRegex =
    /export\s+(?:const|let|var|function|class)\s+([^=\s{]+)/g;
  const namedExports = Array.from(
    content.matchAll(namedExportRegex),
    (m) => m[1],
  );
  const hasDefaultExport = /export\s+default/.test(content);
  return { named: namedExports, hasDefault: hasDefaultExport };
}

/**
 * Generates barrel files (index.js) for specified directories
 * @param {Object[]} configs - Array of configuration objects
 * @param {string} configs[].dir - Directory path to process
 * @param {string} configs[].exportName - Name for the namespace export
 * @throws {Error} If directory creation or file writing fails
 */
function generateBarrelFiles(configs) {
  configs.forEach(({ dir, exportName }) => {
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
      return;
    }

    /** @type {ExportInfo[]} */
    const exports = readdirSync(dir, { withFileTypes: true })
      .filter((dirent) => dirent.isFile() && /\.m?js$/.test(dirent.name))
      .filter((dirent) => !dirent.name.startsWith("index."))
      .map((file) => {
        const filePath = join(dir, file.name);
        const content = readFileSync(filePath, "utf-8");
        const { named, hasDefault } = findExports(content);
        return {
          path: "./" + file.name.replace(/\.m?js$/, ""),
          namedExports: named,
          hasDefaultExport: hasDefault,
        };
      });

    const warningComment = `// This file is auto-generated. Do not edit this file manually.\n// Generated on: ${new Date().toISOString()}\n\n`;

    let barrelContent = exports
      .map((exp) => {
        const lines = [];
        if (exp.namedExports.length > 0) {
          lines.push(
            `import { ${exp.namedExports.join(", ")} } from "${exp.path}";`,
          );
        }
        if (exp.hasDefaultExport) {
          const name = exp.path.split("/").pop();
          lines.push(`import { default as ${name} } from "${exp.path}";`);
        }
        return lines.join("\n");
      })
      .filter(Boolean)
      .join("\n");

    // Add namespace export
    const allExports = exports.flatMap((exp) => [
      ...exp.namedExports,
      ...(exp.hasDefaultExport ? [exp.name] : []),
    ]);
    barrelContent += `\n\n// Namespace export\nexport const ${exportName} = {\n  ${allExports.join(",\n  ")}\n};`;

    writeFileSync(join(dir, "index.js"), warningComment + barrelContent);
  });
}

generateBarrelFiles([
  { dir: "./src/models", exportName: "Models" },
  { dir: "./src/events", exportName: "Events" },
  { dir: "./src/errors", exportName: "Errors" },
  { dir: "./src/commands", exportName: "Commands" },
  { dir: "./src/useCases", exportName: "UseCases" },
]);

export { generateBarrelFiles };
