import { Ajv } from "ajv";
import addFormats from "ajv-formats";
import standaloneCode from "ajv/dist/standalone/index.js";
import fs from "node:fs";
import * as prettier from "prettier";
import { generateSchemaDoc } from "./ajv-to-jsdoc.js";

async function formatCode(code) {
  return await prettier.format(code, { parser: "babel" });
}

const banner = `/* eslint-disable */
/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */`;

const useCaseJson = fs.readFileSync("src/apiUseCases.json", {
  encoding: "utf-8",
});

/**
 * @type {Map<string, {http: boolean | {method: "GET" | "PUT" | "POST" | "DELETE", path: string, disableAuth?: boolean}, description?: string}>}
 */
const useCases = new Map(JSON.parse(useCaseJson));

// load all files in the src/schemas directory
const schemaFiles = fs.readdirSync("src/schemas");
// import all files in the src/schemas directory
const schemaModules = schemaFiles
  .filter((filename) => filename.endsWith("js"))
  .map((file) => import(`../src/schemas/${file}`));

Promise.all(schemaModules).then(async (modules) => {
  const schemas = modules.map((module) => module.default);

  const ajv = new Ajv({
    allErrors: true,
    useDefaults: true,
    strict: false,
    allowMatchingProperties: true,
    allowUnionTypes: true,
    strictRequired: false,
    schemas: schemas,
    code: {
      source: true,
      es5: false,
      esm: true,
      lines: true,
    },
  });

  addFormats(ajv);

  const modelIndexExports = ["entity"];
  const useCaseIndexExports = [];

  const validateMap = schemas.reduce((acc, schema) => {
    if (schema.$id === "definitions.json") return acc;
    const schemaTitle = schema.title.replace(/\s+/g, "");
    acc[`validate${schemaTitle}`] = schema.$id;
    return acc;
  }, {});

  const validatorCode = standaloneCode(ajv, validateMap);
  fs.writeFileSync(
    "src/validators.js",
    await formatCode(`${banner}\n\n${validatorCode}`),
  );

  for (const module of modules) {
    const schema = module.default;
    if (schema.$id === "definitions.json") continue;
    const schemaTitle = schema.title.replace(/\s+/g, "");
    const fileName = schemaTitle.charAt(0).toLowerCase() + schemaTitle.slice(1);
    modelIndexExports.push(fileName);
    const modelCode = generateModelCode(ajv, module);
    fs.writeFileSync(`src/models/${fileName}.js`, await formatCode(modelCode));
  }

  for (const [useCase, data] of useCases.entries()) {
    if (data.http) {
      const useCaseFileName =
        useCase.charAt(0).toLowerCase() + useCase.slice(1);
      useCaseIndexExports.push(useCaseFileName);
      const code = generateUseCaseCode(useCase, data.http, data.description);
      fs.writeFileSync(
        `src/useCases/${useCaseFileName}.js`,
        await formatCode(code),
      );
    }
  }

  const useCaseIndexCode = generateIndexCode(useCaseIndexExports);
  const modelIndexCode = generateIndexCode(modelIndexExports);

  fs.writeFileSync("src/useCases/index.js", await formatCode(useCaseIndexCode));
  fs.writeFileSync("src/models/index.js", await formatCode(modelIndexCode));
});

function generateModelCode(ajv, schemaModule) {
  const {
    default: schema,
    methods = {},
    statics = {},
    getters = {},
    setters = {},
  } = schemaModule;

  const jsdoc = generateSchemaDoc(schema.$id, ajv);
  const schemaTitle = schema.title.replace(/\s+/g, "");

  const entityImport = "import { Entity } from './entity';";

  const validatorImport = `import { validate${schemaTitle} as validate } from '../validators';`;

  const code = `${banner}\n
  ${entityImport}
  ${validatorImport}

 

  export class ${schemaTitle} extends Entity {

   ${jsdoc}

  /**
   * @param {${schemaTitle}Data} data - The data to initialize the ${schemaTitle} with
   * @constructor
   */
	constructor(data) {
	  super(data);
	  ${Object.keys(schema.properties)
    .map((prop) => `this.${prop} = data.${prop};`)
    .join("\n            ")}
	}
	  

	${Object.entries(statics)
    .map(
      ([name, func]) =>
        `static ${name}${func.toString().slice(func.toString().indexOf("("))}`,
    )
    .join("\n    ")}
	  
	  ${Object.entries(methods)
    .map(
      ([name, func]) =>
        `${name}${func.toString().slice(func.toString().indexOf("("))}`,
    )
    .join("\n    ")}

	  ${Object.entries(getters)
    .map(
      ([name, func]) =>
        `get ${name}${func.toString().slice(func.toString().indexOf("("))}`,
    )
    .join("\n    ")}

	  ${Object.entries(setters)
    .map(
      ([name, func]) =>
        `set ${name}${func.toString().slice(func.toString().indexOf("("))}`,
    )
    .join("\n    ")}
  }

  Object.defineProperty(${schemaTitle}.prototype, "schema", {
	value: ${JSON.stringify(schema)}
  });

  Object.defineProperty(${schemaTitle}.prototype, "validator", {
	get: function() { return validate; }
  });
`;

  return code;
}

/**
 *
 * @param {string} useCase - The name of the use case
 * @param {{method: "GET" | "PUT" | "POST" | "DELETE", endpoint:  string}} config - The configuration for the use case
 * @returns
 */
function generateUseCaseCode(
  useCase,
  { method, path: endpoint },
  description = "",
) {
  const pathParams =
    endpoint.match(/:[a-zA-Z0-9]+/g)?.map((param) => param.replace(":", "")) ||
    [];

  const httpMethod = method.toLowerCase();

  const classId = `${useCase.charAt(0).toUpperCase() + useCase.slice(1)}Command`;

  let code = `

        ${banner}
		  

        
			  export class ${classId} {
  
          /**  
            * @description ${description}
            * @constructor
            * @param {Object} commandConfig - The configuration for the use case command
            * @param {Object} commandConfig.headers - The headers to include in the command
            * @param {Object} commandConfig.data - The body to include in the command
            * @param {Object} commandConfig.query - The query parameters to include in the command
            * 
            * @param {Object} options - The options to include in the command
            */
        constructor(commandConfig = {data: null, query: null, headers: null}, options = {}) {
      
          
          // get parameters from path
          const pathParams = ${classId}.params
          
          const { data, query, headers } = commandConfig;
          
          // replace path parameters with values from params
          let url = ${classId}.url;

          if (pathParams && data) {
          for (const param of pathParams) {
          url = url.replace(param, data[param]);
          }
          }
          
          // make sure all parameters have been replaced
          if (url.match(/:[a-zA-Z0-9]+/g)) {
          const missingParams = url.match(/:[a-zA-Z0-9]+/g);
          // remove the colon from the parameter name
          const missing = missingParams.map((param) => param.replace(":", ""));
          throw new Error("Missing parameters: " + missing.join(", "))
          }

          /**
           * The full URL for the use case
           * @type {string}
           */
          this.url = url;
          /**
           * The data to send with the use case
           * @type {object | null}
           */
          this.data = data;
          /**
           * The query parameters for the use case
           * @type {object | null}
           */
          this.query = query;
          /**
           * The headers for the use case
           * @type {object | null}
           */
          this.headers = headers;
          
          const config = {
            method: ${classId}.method,
            url: url,
            ...options,
          };
          
          if (data) config.data = data;
          if (query) config.params = query;
          if (headers) config.headers = headers;
         
          /**
           * The configuration for the use case command
           * @type {{ url: string, method: "get" | "put" | "post" | "delete", data?: object | null, query?: object | null, headers?: object | null }}
           */
          this.config = config;
       }

       /**
        * The required parameters for the use case
        * @type {string[]}
        */
       static get params() {
         return ${JSON.stringify(pathParams)};
       }

        /**
         * The URL for the use case, with path parameters
         * @type {string}
         */
       static get url() {
          return "${endpoint}";
        }

        /**
         * The HTTP method for the use case
         * @type {"get" | "put" | "post" | "delete"}
         */
        static get method() {
          return "${httpMethod}";
        }

      }`;

  return code;
}

function generateIndexCode(files) {
  return `
	  ${files.map((useCase) => `export * from "./${useCase.charAt(0).toLowerCase() + useCase.slice(1)}";`).join("\n")}
	`;
}
