/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateScene as validate } from "../validators";

/**
 * @typedef {Object} SceneData A room represents a physical space of controllable IoT devices
 * @property {string} id - Identifier of the object.
 * @property {string} name
 * @property {string} [description]
 * @property {"scene"} type - Default: "scene"
 * @property {{switches?: {id?: string, state?: ("on"|"off")}[], dimmers?: {id?: string, level?: number}[], windowCoverings?: {id?: string, position?: number}[], thermostats?: {id?: string, hvacMode?: string, setpoints?: {cool?: any, heat?: any, auto?: any}, fanMode?: string, setpointDelta?: number}[], mediaSources?: {id?: string, volume?: number, commands?: string[]}[], locks?: {id?: string, state?: ("locked"|"unlocked"), mode?: ("normal"|"autoLock"|"emergencyOpen"|"emergencyClose"|"holdOpen"|"lockdown")}[]}} [devices]
 * @property {{id?: string, state?: ("on"|"off")}[]} [devices.switches]
 * @property {{id?: string, level?: number}[]} [devices.dimmers] - Default: []
 * @property {{id?: string, position?: number}[]} [devices.windowCoverings] - Default: []
 * @property {{id?: string, hvacMode?: string, setpoints?: {cool?: any, heat?: any, auto?: any}, fanMode?: string, setpointDelta?: number}[]} [devices.thermostats] - Default: []
 * @property {{id?: string, volume?: number, commands?: string[]}[]} [devices.mediaSources]
 * @property {{id?: string, state?: ("locked"|"unlocked"), mode?: ("normal"|"autoLock"|"emergencyOpen"|"emergencyClose"|"holdOpen"|"lockdown")}[]} [devices.locks]
 * @property {boolean} [isDefault] - Default: false
 * @property {boolean} [showOnUi] - Default: true
 */

/**
 * A room represents a physical space of controllable IoT devices
 * @class Scene
 * @extends {Entity}
 */
export class Scene extends Entity {
  /**
   * @constructor
   * @param {SceneData} data - The data to initialize the Scene with
   */
  constructor(data) {
    super(data);
    this.id = data.id;
    this.name = data.name;
    if (data.description !== undefined) this.description = data.description;
    this.type = data.type;
    if (data.devices !== undefined) this.devices = data.devices;
    if (data.isDefault !== undefined) this.isDefault = data.isDefault;
    if (data.showOnUi !== undefined) this.showOnUi = data.showOnUi;
  }
}

Object.defineProperty(Scene.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "scene.json",
    title: "Scene",
    description:
      "A room represents a physical space of controllable IoT devices",
    type: "object",
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      name: { type: "string" },
      description: { type: "string" },
      type: { type: "string", enum: ["scene"], default: "scene" },
      devices: {
        type: "object",
        properties: {
          switches: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: { $ref: "definitions.json#/definitions/id" },
                state: { $ref: "switch.json#/properties/state" },
              },
              default: [],
            },
          },
          dimmers: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: { $ref: "definitions.json#/definitions/id" },
                level: { $ref: "dimmer.json#/properties/level" },
              },
            },
            default: [],
          },
          windowCoverings: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: { $ref: "definitions.json#/definitions/id" },
                position: { $ref: "windowCovering.json#/properties/position" },
              },
            },
            default: [],
          },
          thermostats: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: { $ref: "definitions.json#/definitions/id" },
                hvacMode: { $ref: "thermostat.json#/properties/hvacMode" },
                setpoints: { $ref: "thermostat.json#/properties/setpoints" },
                fanMode: { $ref: "thermostat.json#/properties/fanMode" },
                setpointDelta: { type: "number" },
              },
            },
            default: [],
          },
          mediaSources: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: { $ref: "definitions.json#/definitions/id" },
                volume: { type: "number", minimum: 0, maximum: 100 },
                commands: { type: "array", items: { type: "string" } },
              },
            },
          },
          locks: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: { $ref: "definitions.json#/definitions/id" },
                state: { $ref: "lock.json#/properties/state" },
                mode: { $ref: "lock.json#/properties/mode" },
              },
            },
          },
        },
        additionalProperties: false,
      },
      isDefault: { type: "boolean", default: false },
      showOnUi: { type: "boolean", default: true },
    },
    required: ["id", "name", "type"],
    additionalProperties: false,
  },
});

Object.defineProperty(Scene.prototype, "validator", {
  get: function () {
    return validate;
  },
});
