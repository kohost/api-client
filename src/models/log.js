/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateLog as validate } from "../validators";

export class Log extends Entity {
  /**
   * @typedef {Object} LogData
   * @property {"log"} [type] - Default: "log"
   * @property {number} [timestamp]
   * @property {string} [name] - Event name
   * @property {{name: string, value: string}} [field1]
   * @property {string} field1.name
   * @property {string} field1.value
   * @property {{name: string, value: string}} [field2]
   * @property {string} field2.name
   * @property {string} field2.value
   * @property {{name: string, value: string}} [field3]
   * @property {string} field3.name
   * @property {string} field3.value
   * @property {{name: string, value: string}} [field4]
   * @property {string} field4.name
   * @property {string} field4.value
   * @property {{name: string, value: string}} [field5]
   * @property {string} field5.name
   * @property {string} field5.value
   * @property {{name: string, value: string}} [field6]
   * @property {string} field6.name
   * @property {string} field6.value
   */

  /**
   * @param {LogData} data - The data to initialize the Log with
   * @constructor
   */
  constructor(data) {
    super(data);
    this.type = data.type;
    this.timestamp = data.timestamp;
    this.name = data.name;
    this.field1 = data.field1;
    this.field2 = data.field2;
    this.field3 = data.field3;
    this.field4 = data.field4;
    this.field5 = data.field5;
    this.field6 = data.field6;
  }
}

Object.defineProperty(Log.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "log.json",
    title: "Log",
    type: "object",
    properties: {
      type: { type: "string", default: "log", enum: ["log"] },
      timestamp: { type: "number", minimum: 1655907956593 },
      name: { type: "string", description: "Event name" },
      field1: {
        type: "object",
        required: ["name", "value"],
        properties: { name: { type: "string" }, value: { type: "string" } },
      },
      field2: {
        type: "object",
        required: ["name", "value"],
        properties: { name: { type: "string" }, value: { type: "string" } },
      },
      field3: {
        type: "object",
        required: ["name", "value"],
        properties: { name: { type: "string" }, value: { type: "string" } },
      },
      field4: {
        type: "object",
        required: ["name", "value"],
        properties: { name: { type: "string" }, value: { type: "string" } },
      },
      field5: {
        type: "object",
        required: ["name", "value"],
        properties: { name: { type: "string" }, value: { type: "string" } },
      },
      field6: {
        type: "object",
        required: ["name", "value"],
        properties: { name: { type: "string" }, value: { type: "string" } },
      },
    },
  },
});

Object.defineProperty(Log.prototype, "validator", {
  get: function () {
    return validate;
  },
});
