/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateDiscoveredDevice as validate } from "../validate";

/**
 * @typedef {Object} DiscoveredDeviceData A device that has been discovered by Kohost, but not yet added to the Kohost system.
 * @property {string} id - Identifier of the object.
 * @property {string} name
 * @property {string} deviceId
 * @property {"discoveredDevice"} [type] - Default: "discoveredDevice"
 * @property {("alarm"|"dimmer"|"switch"|"motionSensor"|"windowCovering"|"camera"|"mediaSource"|"thermostat"|"lock"|"courtesy"|"gateway"|"tv"|"dvr"|"appleTv"|"discPlayer"|"mediaPlayer"|"uncontrolledDevice")} [discriminator]
 * @property {string} [driver]
 * @property {object} deviceData
 * @property {boolean} [ignore]
 * @property {string} [organizationId] - Reference (id) to the organization that owns this device
 * @property {string} [propertyId] - Reference (id) to the property that this device belongs to
 * @property {(string|object)} [createdAt]
 * @property {(string|object)} [updatedAt]
 */

/**
 * A device that has been discovered by Kohost, but not yet added to the Kohost system.
 * @class DiscoveredDevice
 * @extends {Entity}
 */
export class DiscoveredDevice extends Entity {
  /**
   * @constructor
   * @param {DiscoveredDeviceData} data - The data to initialize the DiscoveredDevice with
   */
  constructor(data) {
    super(data);
    this.id = data.id;
    this.name = data.name;
    this.deviceId = data.deviceId;
    if (data.type !== undefined) this.type = data.type;
    if (data.discriminator !== undefined)
      this.discriminator = data.discriminator;
    if (data.driver !== undefined) this.driver = data.driver;
    this.deviceData = data.deviceData;
    if (data.ignore !== undefined) this.ignore = data.ignore;
    if (data.organizationId !== undefined)
      this.organizationId = data.organizationId;
    if (data.propertyId !== undefined) this.propertyId = data.propertyId;
    if (data.createdAt !== undefined) this.createdAt = data.createdAt;
    if (data.updatedAt !== undefined) this.updatedAt = data.updatedAt;
  }
}

Object.defineProperty(DiscoveredDevice.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "discoveredDevice.json",
    title: "Discovered Device",
    description:
      "A device that has been discovered by Kohost, but not yet added to the Kohost system.",
    type: "object",
    required: ["id", "name", "deviceId", "deviceData"],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      name: { type: "string" },
      deviceId: { type: "string" },
      type: {
        type: "string",
        enum: ["discoveredDevice"],
        default: "discoveredDevice",
      },
      discriminator: { $ref: "definitions.json#/definitions/type" },
      driver: { type: "string" },
      deviceData: { type: "object" },
      ignore: { type: "boolean" },
      organizationId: {
        type: ["string", "null"],
        description: "Reference (id) to the organization that owns this device",
      },
      propertyId: {
        type: ["string", "null"],
        description:
          "Reference (id) to the property that this device belongs to",
      },
      createdAt: { $ref: "definitions.json#/definitions/date" },
      updatedAt: { $ref: "definitions.json#/definitions/date" },
    },
  },
});

Object.defineProperty(DiscoveredDevice.prototype, "validator", {
  get: function () {
    return validate;
  },
});
