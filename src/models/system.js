/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateSystem as validate } from "../validate";

/**
 * @typedef {Object} SystemData
 * @property {string} id
 * @property {"system"} type - Default: "system"
 * @property {string} [name]
 * @property {("adlink"|"aws-kinesis"|"bacnet"|"benq"|"butler"|"comelit"|"crestron"|"dell"|"digital-watchdog"|"distech"|"dmp"|"doorbird"|"dormakaba"|"dsc"|"ecobee"|"epson"|"geovision-rs"|"geovision-as-manager"|"honeywell-vista"|"igor"|"inncom"|"isapi"|"kohost-k7"|"kohost"|"lg"|"lg-webos"|"lapi"|"lirc"|"mews"|"mht"|"newline"|"paxton"|"pelican-wireless"|"power-shades"|"rachio"|"rebrandly"|"relay"|"rtsp"|"salto"|"salto-irn"|"samsung"|"se"|"sendgrid"|"smartboard"|"sonifi"|"stay-n-touch"|"storable"|"twilio"|"unifi"|"valcom"|"veracross"|"vivotek"|"vizio"|"wisenet"|"cloudflare-images"|"cloudflare-stream"|"insperia-privacy")} systemId - Driver used to communicate with the object.. The driver key that implements the system
 * @property {string} [organizationId] - The id of the organization that uses the system
 * @property {string} [propertyId] - The id of the property that uses the system
 * @property {{id?: string, systemId: string, type?: string, discriminator?: string, propertyIds?: string[]}[]} entities - The entities produced by the system. Default: []
 * @property {string} [driverApiVersion] - The version of the driver API used by the system
 * @property {{id?: any, type: "mediaFile", name?: string, fileHash?: string, category?: string, mimeType?: ("image/*"|"image/jpeg"|"image/png"|"image/gif"|"image/webp"|"image/avif"|"image/svg+xml"|"application/pdf"), data?: string, url?: string, width?: number, height?: number, size?: number, uploadUrl?: string, uploadUrlExpires?: any, createdBy?: string, systemId?: any}} [logo] - Any media file
 * @property {object} [config] - The runtime configuration of the system
 * @property {{websiteUrl?: string, email?: string, phone?: string, itunesAppId?: string, googleAppId?: string}} [contactInfo]
 * @property {{lastCommunicationAt?: string}} [health]
 * @property {(string|object)} [createdAt]
 * @property {(string|object)} [updatedAt]
 */

/**
 *
 * @class System
 * @extends {Entity}
 */
export class System extends Entity {
  /**
   * @constructor
   * @param {SystemData} data - The data to initialize the System with
   */
  constructor(data) {
    super(data);
    this.id = data.id;
    this.type = data.type;
    if (data.name !== undefined) this.name = data.name;
    this.systemId = data.systemId;
    if (data.organizationId !== undefined)
      this.organizationId = data.organizationId;
    if (data.propertyId !== undefined) this.propertyId = data.propertyId;
    this.entities = data.entities;
    if (data.driverApiVersion !== undefined)
      this.driverApiVersion = data.driverApiVersion;
    if (data.logo !== undefined) this.logo = data.logo;
    if (data.config !== undefined) this.config = data.config;
    if (data.contactInfo !== undefined) this.contactInfo = data.contactInfo;
    if (data.health !== undefined) this.health = data.health;
    if (data.createdAt !== undefined) this.createdAt = data.createdAt;
    if (data.updatedAt !== undefined) this.updatedAt = data.updatedAt;
  }
}

Object.defineProperty(System.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "system.json",
    title: "System",
    type: "object",
    required: ["id", "type", "systemId", "entities"],
    properties: {
      id: { type: "string" },
      type: { type: "string", default: "system", enum: ["system"] },
      name: { type: "string" },
      systemId: {
        $ref: "definitions.json#/definitions/driver",
        example: "salto",
        description: "The driver key that implements the system",
      },
      organizationId: {
        type: "string",
        description: "The id of the organization that uses the system",
      },
      propertyId: {
        type: "string",
        description: "The id of the property that uses the system",
      },
      entities: {
        type: "array",
        description: "The entities produced by the system",
        default: [],
        items: {
          type: "object",
          required: ["systemId"],
          properties: {
            id: { type: "string", description: "The id of the entity" },
            systemId: {
              type: "string",
              description: "The id of the entity as known by the system",
            },
            type: { type: "string", description: "The type of the entity" },
            discriminator: {
              type: "string",
              description: "The discriminator of the entity",
            },
            propertyIds: {
              type: "array",
              description:
                "The ids of the properties where the entity is located",
              items: { type: "string" },
            },
          },
        },
      },
      driverApiVersion: {
        type: "string",
        description: "The version of the driver API used by the system",
      },
      logo: { $ref: "mediaFile.json#" },
      config: {
        type: "object",
        additionalProperties: true,
        description: "The runtime configuration of the system",
      },
      contactInfo: {
        type: "object",
        additionalProperties: false,
        properties: {
          websiteUrl: {
            type: "string",
            description: "The website URL of the system",
          },
          email: {
            type: "string",
            description: "The email address of the system",
          },
          phone: {
            type: "string",
            description: "The phone number of the system",
          },
          itunesAppId: { type: "string", example: "807316865" },
          googleAppId: {
            type: "string",
            example: "tw.com.geovision.gvaccesscontrol",
          },
        },
      },
      health: {
        type: "object",
        properties: {
          lastCommunicationAt: {
            type: "string",
            description:
              "The date and time of the last communication with the system",
            format: "date-time",
          },
        },
      },
      createdAt: { $ref: "definitions.json#/definitions/createdAt" },
      updatedAt: { $ref: "definitions.json#/definitions/updatedAt" },
    },
  },
});

Object.defineProperty(System.prototype, "validator", {
  get: function () {
    return validate;
  },
});
