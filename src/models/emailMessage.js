/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateEmailMessage as validate } from "../validate";

/**
 * @typedef {Object} EmailMessageData
 * @property {string} [id] - Identifier of the object.
 * @property {"emailMessage"} [type] - Default: "emailMessage"
 * @property {string} to
 * @property {string} from - Must be in the format of 'Sender <email@example.com>
 * @property {string} subject
 * @property {("queued"|"sending"|"sent"|"deferred"|"delivered"|"undelivered"|"bounced"|"blocked"|"receiving"|"received"|"opened"|"clicked"|"unsubscribed"|"spamReport")} status
 * @property {string} [statusMessage]
 * @property {string} [html]
 * @property {string} [text]
 * @property {string} [driver]
 * @property {object} [appData]
 * @property {(string|object)} [createdAt]
 * @property {(string|object)} [updatedAt]
 * @property {string} [systemId] - Identifier of the object, directly related to the system.
 */

/**
 *
 * @class EmailMessage
 * @extends {Entity}
 */
export class EmailMessage extends Entity {
  /**
   * @constructor
   * @param {EmailMessageData} data - The data to initialize the EmailMessage with
   */
  constructor(data) {
    super(data);
    if (data.id !== undefined) this.id = data.id;
    if (data.type !== undefined) this.type = data.type;
    this.to = data.to;
    this.from = data.from;
    this.subject = data.subject;
    this.status = data.status;
    if (data.statusMessage !== undefined)
      this.statusMessage = data.statusMessage;
    if (data.html !== undefined) this.html = data.html;
    if (data.text !== undefined) this.text = data.text;
    if (data.driver !== undefined) this.driver = data.driver;
    if (data.appData !== undefined) this.appData = data.appData;
    if (data.createdAt !== undefined) this.createdAt = data.createdAt;
    if (data.updatedAt !== undefined) this.updatedAt = data.updatedAt;
    if (data.systemId !== undefined) this.systemId = data.systemId;
  }
}

Object.defineProperty(EmailMessage.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "emailMessage.json",
    title: "Email Message",
    type: "object",
    required: ["to", "from", "status", "subject"],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: { type: "string", default: "emailMessage", enum: ["emailMessage"] },
      to: { type: "string" },
      from: {
        type: "string",
        description: "Must be in the format of 'Sender <email@example.com>",
      },
      subject: { type: "string" },
      status: {
        type: "string",
        enum: [
          "queued",
          "sending",
          "sent",
          "deferred",
          "delivered",
          "undelivered",
          "bounced",
          "blocked",
          "receiving",
          "received",
          "opened",
          "clicked",
          "unsubscribed",
          "spamReport",
        ],
      },
      statusMessage: { type: "string" },
      html: { type: "string" },
      text: { type: "string" },
      driver: { type: "string" },
      appData: { type: "object" },
      createdAt: { $ref: "definitions.json#/definitions/date" },
      updatedAt: { $ref: "definitions.json#/definitions/date" },
      systemId: { $ref: "definitions.json#/definitions/systemId" },
    },
  },
});

Object.defineProperty(EmailMessage.prototype, "validator", {
  get: function () {
    return validate;
  },
});
