/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateEmailMessage as validate } from "../validators";

export class EmailMessage extends Entity {
  /**
   * @typedef {Object} EmailMessageData
   * @property {string} [id] - Identifier of the object.
   * @property {"emailMessage"} [type] - Default: "emailMessage"
   * @property {string} to
   * @property {string} from - Must be in the format of 'Sender <email@example.com>
   * @property {string} subject
   * @property {("queued"|"sending"|"sent"|"deferred"|"delivered"|"undelivered"|"bounced"|"blocked"|"receiving"|"received"|"opened"|"clicked"|"unsubscribed"|"spamReport")} status
   * @property {string} [statusMessage]
   * @property {string} [html]
   * @property {string} [text]
   * @property {string} [driver]
   * @property {object} [appData]
   * @property {(string|object)} [createdAt]
   * @property {(string|object)} [updatedAt]
   * @property {string} [systemId] - Identifier of the object, directly related to the system.
   */

  /**
   * @param {EmailMessageData} data - The data to initialize the EmailMessage with
   * @constructor
   */
  constructor(data) {
    super(data);
    this.id = data.id;
    this.type = data.type;
    this.to = data.to;
    this.from = data.from;
    this.subject = data.subject;
    this.status = data.status;
    this.statusMessage = data.statusMessage;
    this.html = data.html;
    this.text = data.text;
    this.driver = data.driver;
    this.appData = data.appData;
    this.createdAt = data.createdAt;
    this.updatedAt = data.updatedAt;
    this.systemId = data.systemId;
  }
}

Object.defineProperty(EmailMessage.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "emailMessage.json",
    title: "Email Message",
    type: "object",
    required: ["to", "from", "status", "subject"],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: { type: "string", default: "emailMessage", enum: ["emailMessage"] },
      to: {
        type: "string",
        pattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$",
      },
      from: {
        type: "string",
        pattern: ".*<[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+>.*",
        description: "Must be in the format of 'Sender <email@example.com>",
      },
      subject: { type: "string" },
      status: {
        type: "string",
        enum: [
          "queued",
          "sending",
          "sent",
          "deferred",
          "delivered",
          "undelivered",
          "bounced",
          "blocked",
          "receiving",
          "received",
          "opened",
          "clicked",
          "unsubscribed",
          "spamReport",
        ],
      },
      statusMessage: { type: "string" },
      html: { type: "string" },
      text: { type: "string" },
      driver: { type: "string" },
      appData: { type: "object" },
      createdAt: { $ref: "definitions.json#/definitions/date" },
      updatedAt: { $ref: "definitions.json#/definitions/date" },
      systemId: { $ref: "definitions.json#/definitions/systemId" },
    },
  },
});

Object.defineProperty(EmailMessage.prototype, "validator", {
  get: function () {
    return validate;
  },
});
