/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateIdentification as validate } from "../validate";

/**
 * @typedef {Object} IdentificationData
 * @property {string} [id] - Identifier of the object.
 * @property {("driversLicense"|"passport"|"identityCard"|"visa")} type
 * @property {string} [number]
 * @property {string} [maskedNumber]
 * @property {string} [encryptedNumber]
 * @property {(string|object)} [issued]
 * @property {(string|object)} [expires]
 * @property {boolean} [verified]
 * @property {boolean} [matched]
 * @property {string} [firstName]
 * @property {string} [lastName]
 * @property {string} [issuingCountry]
 * @property {string} [issuingState]
 * @property {string} [systemId] - Identifier of the object, directly related to the system.
 */

/**
 *
 * @class Identification
 * @extends {Entity}
 */
export class Identification extends Entity {
  /**
   * @constructor
   * @param {IdentificationData} data - The data to initialize the Identification with
   */
  constructor(data) {
    super(data);
    if (data.id !== undefined) this.id = data.id;
    this.type = data.type;
    if (data.number !== undefined) this.number = data.number;
    if (data.maskedNumber !== undefined) this.maskedNumber = data.maskedNumber;
    if (data.encryptedNumber !== undefined)
      this.encryptedNumber = data.encryptedNumber;
    if (data.issued !== undefined) this.issued = data.issued;
    if (data.expires !== undefined) this.expires = data.expires;
    if (data.verified !== undefined) this.verified = data.verified;
    if (data.matched !== undefined) this.matched = data.matched;
    if (data.firstName !== undefined) this.firstName = data.firstName;
    if (data.lastName !== undefined) this.lastName = data.lastName;
    if (data.issuingCountry !== undefined)
      this.issuingCountry = data.issuingCountry;
    if (data.issuingState !== undefined) this.issuingState = data.issuingState;
    if (data.systemId !== undefined) this.systemId = data.systemId;
  }
}

Object.defineProperty(Identification.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "identification.json",
    title: "Identification",
    type: "object",
    required: ["type"],
    additionalProperties: false,
    oneOf: [{ required: ["number"] }, { required: ["encryptedNumber"] }],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: {
        type: "string",
        enum: ["driversLicense", "passport", "identityCard", "visa"],
      },
      number: { type: "string" },
      maskedNumber: { type: "string" },
      encryptedNumber: { type: "string" },
      issued: { type: ["string", "object"], format: "date-time" },
      expires: { type: ["string", "object", "null"], format: "date-time" },
      verified: { type: "boolean" },
      matched: { type: "boolean" },
      firstName: { type: "string" },
      lastName: { type: "string" },
      issuingCountry: { type: "string", minLength: 2, maxLength: 2 },
      issuingState: { type: "string", minLength: 2, maxLength: 2 },
      systemId: { $ref: "definitions.json#/definitions/systemId" },
    },
  },
});

Object.defineProperty(Identification.prototype, "validator", {
  get: function () {
    return validate;
  },
});
