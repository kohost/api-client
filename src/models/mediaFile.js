/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateMediaFile as validate } from "../validators";

export class MediaFile extends Entity {
  /**
   * @typedef {Object} MediaFileData Any media file
   * @property {string} [id] - Identifier of the object.
   * @property {"mediaFile"} type - Default: "mediaFile"
   * @property {string} [name]
   * @property {string} [fileHash]
   * @property {string} [category] - This is the category id
   * @property {("image/*"|"image/jpeg"|"image/png"|"image/gif"|"image/webp"|"image/avif"|"image/svg+xml"|"application/pdf")} [mimeType]
   * @property {string} [data]
   * @property {string} [url]
   * @property {number} [width]
   * @property {number} [height]
   * @property {number} [size] - Size in bytes
   * @property {string} [uploadUrl]
   * @property {(string|object)} [uploadUrlExpires]
   * @property {string} [createdBy]
   * @property {string} [systemId] - Identifier of the object, directly related to the system.
   */

  /**
   * @param {MediaFileData} data - The data to initialize the MediaFile with
   * @constructor
   */
  constructor(data) {
    super(data);
    if (data.id !== undefined) this.id = data.id;
    if (data.type !== undefined) this.type = data.type;
    if (data.name !== undefined) this.name = data.name;
    if (data.fileHash !== undefined) this.fileHash = data.fileHash;
    if (data.category !== undefined) this.category = data.category;
    if (data.mimeType !== undefined) this.mimeType = data.mimeType;
    if (data.data !== undefined) this.data = data.data;
    if (data.url !== undefined) this.url = data.url;
    if (data.width !== undefined) this.width = data.width;
    if (data.height !== undefined) this.height = data.height;
    if (data.size !== undefined) this.size = data.size;
    if (data.uploadUrl !== undefined) this.uploadUrl = data.uploadUrl;
    if (data.uploadUrlExpires !== undefined)
      this.uploadUrlExpires = data.uploadUrlExpires;
    if (data.createdBy !== undefined) this.createdBy = data.createdBy;
    if (data.systemId !== undefined) this.systemId = data.systemId;
  }

  createImageVariant(params) {
    if (this.mimeType != "image/*")
      throw new Error("Only dynamic images can have variants");
    if (!this.url) throw new Error("MediaFile has no url");
    // convert params to "key=value" pairs
    const query = Object.keys(params)
      .map((key) => `${key}=${params[key]}`)
      .join(",");

    // replace the final /public with the query above
    return this.url.replace(/\/public$/, `/${query}`);
  }
}

Object.defineProperty(MediaFile.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "mediaFile.json",
    title: "Media File",
    description: "Any media file",
    type: "object",
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: { type: "string", default: "mediaFile", enum: ["mediaFile"] },
      name: { type: "string" },
      fileHash: { type: "string" },
      category: { type: "string", description: "This is the category id" },
      mimeType: {
        type: "string",
        enum: [
          "image/*",
          "image/jpeg",
          "image/png",
          "image/gif",
          "image/webp",
          "image/avif",
          "image/svg+xml",
          "application/pdf",
        ],
      },
      data: { type: "string" },
      url: { type: "string", format: "uri" },
      width: { type: "integer", minimum: 0 },
      height: { type: "integer", minimum: 0 },
      size: { type: "integer", minimum: 0, description: "Size in bytes" },
      uploadUrl: { type: "string", format: "uri" },
      uploadUrlExpires: { $ref: "definitions.json#/definitions/date" },
      createdBy: { type: "string" },
      systemId: { $ref: "definitions.json#/definitions/systemId" },
    },
    additionalProperties: false,
    required: ["type"],
  },
});

Object.defineProperty(MediaFile.prototype, "validator", {
  get: function () {
    return validate;
  },
});
