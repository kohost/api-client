/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateOrder as validate } from "../validators";

export class Order extends Entity {
  /**
   * @typedef {Object} OrderData A purchase order for products or services.
   * @property {string} [id] - Identifier of the object.
   * @property {"order"} type - Default: "order"
   * @property {string} [orderNumber]
   * @property {("draft"|"pendingPayment"|"processing"|"outForDelivery"|"completed"|"paymentFailed"|"cancelled"|"refunded")} status
   * @property {string} [userId] - Identifier of the object.. User id of purchaser
   * @property {string} [reservationId] - Identifier of the object.. Reservation id if the order is for a reservation
   * @property {(string|object)} [date]
   * @property {{additionalProperties?: any, name: string, sku?: string, quantity?: number, price: number, taxClass?: string, deliveryClass?: string, productId?: string}[]} [items] - Default: []
   * @property {{additionalProperties?: any, name: string, class?: string, rateType?: ("percentage"|"flat"), rate: number, total?: number}[]} [taxes] - Default: []
   * @property {{additionalProperties?: any, name: string, price: number}[]} [fees] - Default: []
   * @property {{additionalProperties?: any, name: string, class?: string, rateType?: ("percentage"|"flat"), rate: number, total?: number}[]} [delivery] - Default: []
   * @property {{method?: ("folio"|"invoice"|"amex"|"visa"|"masterCard"|"maestro"|"discover"|"diners"|"jcb"|"applePay"|"alipay"|"chinaUnionPay"|"vpay"), name?: string, date?: (string|object), amount?: number, transactionReference?: string}[]} [payments] - Default: []
   */

  /**
   * @param {OrderData} data - The data to initialize the Order with
   * @constructor
   */
  constructor(data) {
    super(data);
    if (data.id !== undefined) this.id = data.id;
    this.type = data.type;
    if (data.orderNumber !== undefined) this.orderNumber = data.orderNumber;
    this.status = data.status;
    if (data.userId !== undefined) this.userId = data.userId;
    if (data.reservationId !== undefined)
      this.reservationId = data.reservationId;
    if (data.date !== undefined) this.date = data.date;
    if (data.items !== undefined) this.items = data.items;
    if (data.taxes !== undefined) this.taxes = data.taxes;
    if (data.fees !== undefined) this.fees = data.fees;
    if (data.delivery !== undefined) this.delivery = data.delivery;
    if (data.payments !== undefined) this.payments = data.payments;
  }

  getSubTotal() {
    return this.items.reduce((acc, item) => {
      const qty = item.quantity || 1;
      return acc + item.price * qty;
    }, 0);
  }
  getTaxTotal() {
    const taxes = this.taxes;
    if (!taxes) return 0;
    return this.items.reduce((acc, item) => {
      if (!item.taxClass) return acc;
      const tax = taxes.find((t) => t.class === item.taxClass);
      if (!tax) return acc;
      const { rateType, rate } = tax;
      if (rateType === "percentage") {
        return acc + item.price * rate;
      }
      if (rateType === "flat") {
        return acc + rate;
      }
      return acc + rate;
    }, 0);
  }
  getDeliveryTotal() {
    const delivery = this.delivery;
    if (!delivery) return 0;
    return this.items.reduce((acc, item) => {
      if (!item.deliveryClass) return acc;
      const d = delivery.find((d) => d.class === item.deliveryClass);
      if (!d) return acc;
      const { rateType, rate } = d;
      if (rateType === "percentage") {
        return acc + item.price * rate;
      }
      return acc + rate;
    }, 0);
  }
  getFeesTotal() {
    const fees = this.fees;
    return fees.reduce((acc, fee) => {
      return acc + fee.price;
    }, 0);
  }
  getTotal() {
    return (
      this.getSubTotal() +
      this.getTaxTotal() +
      this.getDeliveryTotal() +
      this.getFeesTotal()
    );
  }
  getPaymentsTotal() {
    return this.payments.reduce((acc, payment) => {
      return acc + payment.amount;
    }, 0);
  }
  getBalance() {
    return this.getTotal() - this.getPaymentsTotal();
  }
}

Object.defineProperty(Order.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "order.json",
    title: "Order",
    description: "A purchase order for products or services.",
    type: "object",
    required: ["type", "status"],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: { type: "string", default: "order", enum: ["order"] },
      orderNumber: { type: "string" },
      status: {
        type: "string",
        enum: [
          "draft",
          "pendingPayment",
          "processing",
          "outForDelivery",
          "completed",
          "paymentFailed",
          "cancelled",
          "refunded",
        ],
      },
      userId: {
        $ref: "definitions.json#/definitions/id",
        description: "User id of purchaser",
      },
      reservationId: {
        $ref: "definitions.json#/definitions/id",
        description: "Reservation id if the order is for a reservation",
      },
      date: { $ref: "definitions.json#/definitions/date" },
      items: {
        type: "array",
        default: [],
        items: {
          type: "object",
          required: ["name", "price"],
          properties: {
            additionalProperties: false,
            name: { type: "string" },
            sku: { type: "string" },
            quantity: { type: "number", default: 1 },
            price: { type: "number" },
            taxClass: { type: "string" },
            deliveryClass: { type: "string" },
            productId: { type: "string" },
          },
        },
      },
      taxes: {
        type: "array",
        default: [],
        items: {
          type: "object",
          required: ["name", "rate"],
          properties: {
            additionalProperties: false,
            name: { type: "string" },
            class: { type: "string" },
            rateType: {
              type: "string",
              enum: ["percentage", "flat"],
              default: "percentage",
            },
            rate: { type: "number" },
            total: { type: "number" },
          },
        },
      },
      fees: {
        type: "array",
        default: [],
        items: {
          type: "object",
          required: ["name", "price"],
          properties: {
            additionalProperties: false,
            name: { type: "string" },
            price: { type: "number" },
          },
        },
      },
      delivery: {
        type: "array",
        default: [],
        items: {
          type: "object",
          required: ["name", "rate"],
          properties: {
            additionalProperties: false,
            name: { type: "string" },
            class: { type: "string" },
            rateType: {
              type: "string",
              enum: ["percentage", "flat"],
              default: "percentage",
            },
            rate: { type: "number" },
            total: { type: "number" },
          },
        },
      },
      payments: {
        type: "array",
        default: [],
        items: {
          type: "object",
          properties: {
            method: {
              type: "string",
              enum: [
                "folio",
                "invoice",
                "amex",
                "visa",
                "masterCard",
                "maestro",
                "discover",
                "diners",
                "jcb",
                "applePay",
                "alipay",
                "chinaUnionPay",
                "vpay",
              ],
            },
            name: { type: "string" },
            date: { $ref: "definitions.json#/definitions/date" },
            amount: { type: "number" },
            transactionReference: { type: "string" },
          },
        },
      },
    },
  },
});

Object.defineProperty(Order.prototype, "validator", {
  get: function () {
    return validate;
  },
});
