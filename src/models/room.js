// This file is automatically generated. Do not modify it manually.

  import { Entity } from './entity';
  import { validate } from '../validators/room';

  export class Room extends Entity {
	constructor(data) {
	  super(data);
	  this.id = data.id;
            this.type = data.type;
            this.name = data.name;
            this.floor = data.floor;
            this.dimmers = data.dimmers;
            this.switches = data.switches;
            this.thermostats = data.thermostats;
            this.locks = data.locks;
            this.windowCoverings = data.windowCoverings;
            this.courtesy = data.courtesy;
            this.cameras = data.cameras;
            this.mediaSources = data.mediaSources;
            this.motionSensors = data.motionSensors;
            this.alarms = data.alarms;
            this.occupiedAt = data.occupiedAt;
            this.createdAt = data.createdAt;
            this.updatedAt = data.updatedAt;
	}
	  

	static getDevicePath(type) {
    switch (type) {
      case "tv":
      case "dvr":
      case "appleTv":
      case "discPlayer":
      case "mediaPlayer":
      case "uncontrolledDevice":
      case "mediaSource":
        return "mediaSources";
      case "courtesy":
        return type;
      case "switch":
        return "switches";
      default:
        return `${type}s`;
    }
  }
    static getDeviceTypeFromPath(path) {
    const validPaths = [
      "dimmers",
      "switches",
      "thermostats",
      "locks",
      "windowCoverings",
      "courtesy",
      "cameras",
      "mediaSources",
      "motionSensors",
      "alarms",
    ];
    if (!validPaths.includes(path))
      throw new Error("Invalid device path:" + path);
    switch (path) {
      case "courtesy":
        return path;
      case "switches":
        return "switch";
      default:
        return path.slice(0, -1);
    }
  }
	  
	  

	  get hasDimmer() {
    return this.dimmers?.length > 0;
  }
    get hasSwitch() {
    return this.switches?.length > 0;
  }
    get hasWindowCovering() {
    return this.windowCoverings?.length > 0;
  }
    get hasShade() {
    return this.hasWindowCovering;
  }
    get hasThermostat() {
    return this.thermostats?.length > 0;
  }
    get hasClimate() {
    return this.hasThermostat;
  }
    get hasLock() {
    return this.locks?.length > 0;
  }
    get hasCourtesy() {
    return this.courtesy?.length > 0;
  }
    get hasCamera() {
    return this.cameras?.length > 0;
  }
    get hasMedia() {
    return this.mediaSources?.length > 0;
  }
    get hasLight() {
    const hasDiscriminatorLight = this.switches?.some((sw) => {
      return sw.discriminator === "light" || sw.discriminator === "fan";
    });
    return this.hasDimmer || hasDiscriminatorLight;
  }
    get occupied() {
    const now = new Date();
    const lastOccupied = new Date(this.occupiedAt);
    const diff = now - lastOccupied;
    // check if the room has been occupied in the last 60 minutes
    return diff < 60 * 60 * 1000;
  }

	  
  }

  Object.defineProperty(Room.prototype, "schema", {
	value: {"$schema":"http://json-schema.org/draft-07/schema","$id":"room.json","title":"Room","description":"A room represents a physical space of controllable IoT devices","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["room"],"default":"room"},"name":{"type":"string"},"floor":{"type":"string"},"dimmers":{"type":"array","default":[],"items":{"$ref":"dimmer.json"}},"switches":{"type":"array","default":[],"items":{"$ref":"switch.json"}},"thermostats":{"type":"array","default":[],"items":{"$ref":"thermostat.json"}},"locks":{"type":"array","default":[],"items":{"$ref":"lock.json"}},"windowCoverings":{"type":"array","default":[],"items":{"$ref":"windowCovering.json"}},"courtesy":{"type":"array","default":[],"items":{"$ref":"courtesy.json"}},"cameras":{"type":"array","default":[],"items":{"$ref":"camera.json"}},"mediaSources":{"type":"array","default":[],"items":{"$ref":"mediaSource.json"}},"motionSensors":{"type":"array","default":[],"items":{"$ref":"motionSensor.json"}},"alarms":{"type":"array","default":[],"items":{"$ref":"alarm.json"}},"occupiedAt":{"$ref":"definitions.json#/definitions/createdAt"},"createdAt":{"$ref":"definitions.json#/definitions/createdAt"},"updatedAt":{"$ref":"definitions.json#/definitions/updatedAt"}},"additionalProperties":false}
  });

  Object.defineProperty(Room.prototype, "validator", {
	get: function() { return validate; }
  });
