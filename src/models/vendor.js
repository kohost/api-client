/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateVendor as validate } from "../validators";

export class Vendor extends Entity {
  /**
   * @typedef {Object} VendorData
   * @property {string} [id] - Identifier of the object.
   * @property {"vendor"} [type] - Default: "vendor"
   * @property {string} name
   * @property {string} [phone]
   * @property {string} email
   * @property {{id?: string, line1?: string, line2?: string, line3?: string, city?: string, state?: string, postalCode?: string, countryCode?: string}} [address]
   * @property {{id?: any, type: "mediaFile", name?: string, fileHash?: string, category?: string, mimeType?: ("image/*"|"image/jpeg"|"image/png"|"image/gif"|"image/webp"|"image/avif"|"image/svg+xml"|"application/pdf"), data?: string, url?: string, width?: number, height?: number, size?: number, uploadUrl?: string, uploadUrlExpires?: any, createdBy?: string, systemId?: any}} [photo] - Any media file
   * @property {(string|object)} [createdAt]
   * @property {(string|object)} [updatedAt]
   */

  /**
   * @param {VendorData} data - The data to initialize the Vendor with
   * @constructor
   */
  constructor(data) {
    super(data);
    if (data.id !== undefined) this.id = data.id;
    if (data.type !== undefined) this.type = data.type;
    if (data.name !== undefined) this.name = data.name;
    if (data.phone !== undefined) this.phone = data.phone;
    if (data.email !== undefined) this.email = data.email;
    if (data.address !== undefined) this.address = data.address;
    if (data.photo !== undefined) this.photo = data.photo;
    if (data.createdAt !== undefined) this.createdAt = data.createdAt;
    if (data.updatedAt !== undefined) this.updatedAt = data.updatedAt;
  }
}

Object.defineProperty(Vendor.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "vendor.json",
    title: "Vendor",
    type: "object",
    required: ["name", "email"],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: { type: "string", default: "vendor", enum: ["vendor"] },
      name: { type: "string" },
      phone: { type: ["string", "null"], pattern: "^\\+[0-9]{1,14}$" },
      email: { type: ["string", "null"], format: "email" },
      address: { $ref: "definitions.json#/definitions/address" },
      photo: { $ref: "mediaFile.json#" },
      createdAt: { $ref: "definitions.json#/definitions/createdAt" },
      updatedAt: { $ref: "definitions.json#/definitions/updatedAt" },
    },
  },
});

Object.defineProperty(Vendor.prototype, "validator", {
  get: function () {
    return validate;
  },
});
