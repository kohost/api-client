/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateSession as validate } from "../validate";

/**
 * @typedef {Object} SessionData
 * @property {string} id - Identifier of the object.
 * @property {"session"} type - Default: "session"
 * @property {string} [userId]
 * @property {string} [organizationId]
 * @property {string} [userAgent]
 * @property {(string|object)} [expires]
 * @property {object} [data]
 */

/**
 *
 * @class Session
 * @extends {Entity}
 */
export class Session extends Entity {
  /**
   * @constructor
   * @param {SessionData} data - The data to initialize the Session with
   */
  constructor(data) {
    super(data);
    this.id = data.id;
    this.type = data.type;
    if (data.userId !== undefined) this.userId = data.userId;
    if (data.organizationId !== undefined)
      this.organizationId = data.organizationId;
    if (data.userAgent !== undefined) this.userAgent = data.userAgent;
    if (data.expires !== undefined) this.expires = data.expires;
    if (data.data !== undefined) this.data = data.data;
  }
}

Object.defineProperty(Session.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "session.json",
    title: "Session",
    type: "object",
    required: ["id", "type", "title", "destination", "url", "systemId"],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: { type: "string", default: "session", enum: ["session"] },
      userId: { type: "string" },
      organizationId: { type: "string" },
      userAgent: { type: "string" },
      expires: { type: ["string", "object", "null"] },
      data: { type: "object", additionalProperties: true },
    },
  },
});

Object.defineProperty(Session.prototype, "validator", {
  get: function () {
    return validate;
  },
});
