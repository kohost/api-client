/* @ts-nocheck */
/* This file is automatically generated. Do not modify it manually. */

import { Entity } from "./entity";
import { validateProduct as validate } from "../validate";

/**
 * @typedef {Object} ProductData
 * @property {string} [id] - Identifier of the object.
 * @property {"product"} [type] - Default: "product"
 * @property {string} name
 * @property {("adlink"|"aws-kinesis"|"bacnet"|"benq"|"butler"|"comelit"|"crestron"|"dell"|"digital-watchdog"|"distech"|"dmp"|"doorbird"|"dormakaba"|"dsc"|"ecobee"|"epson"|"geovision-rs"|"geovision-as-manager"|"honeywell-vista"|"igor"|"inncom"|"isapi"|"kohost-k7"|"kohost"|"lg"|"lg-webos"|"lapi"|"lirc"|"mews"|"mht"|"newline"|"paxton"|"pelican-wireless"|"power-shades"|"rachio"|"rebrandly"|"relay"|"rtsp"|"salto"|"salto-irn"|"samsung"|"se"|"sendgrid"|"smartboard"|"sonifi"|"stay-n-touch"|"storable"|"twilio"|"unifi"|"valcom"|"veracross"|"vivotek"|"vizio"|"wisenet"|"cloudflare-images"|"cloudflare-stream"|"insperia-privacy")} driver - Driver used to communicate with the object.
 * @property {string} [description]
 * @property {number} price
 * @property {number} [tax]
 * @property {{id?: any, type: "mediaFile", name?: string, fileHash?: string, category?: string, mimeType?: ("image/*"|"image/jpeg"|"image/png"|"image/gif"|"image/webp"|"image/avif"|"image/svg+xml"|"application/pdf"), data?: string, url?: string, width?: number, height?: number, size?: number, uploadUrl?: string, uploadUrlExpires?: any, createdBy?: string, systemId?: any, createdAt?: any, updatedAt?: any, deletedAt?: any}} [image] - Any media file
 * @property {string} [category]
 * @property {string} [imageUrl]
 * @property {string} [systemId] - Identifier of the object, directly related to the system.
 * @property {(string|object)} [createdAt]
 * @property {(string|object)} [updatedAt]
 * @property {(string|object)} [deletedAt]
 */

/**
 *
 * @class Product
 * @extends {Entity}
 */
export class Product extends Entity {
  /**
   * @constructor
   * @param {ProductData} data - The data to initialize the Product with
   */
  constructor(data) {
    super(data);
    if (data.id !== undefined) this.id = data.id;
    if (data.type !== undefined) this.type = data.type;
    this.name = data.name;
    this.driver = data.driver;
    if (data.description !== undefined) this.description = data.description;
    this.price = data.price;
    if (data.tax !== undefined) this.tax = data.tax;
    if (data.image !== undefined) this.image = data.image;
    if (data.category !== undefined) this.category = data.category;
    if (data.imageUrl !== undefined) this.imageUrl = data.imageUrl;
    if (data.systemId !== undefined) this.systemId = data.systemId;
    if (data.createdAt !== undefined) this.createdAt = data.createdAt;
    if (data.updatedAt !== undefined) this.updatedAt = data.updatedAt;
    if (data.deletedAt !== undefined) this.deletedAt = data.deletedAt;
  }
}

Object.defineProperty(Product.prototype, "schema", {
  value: {
    $schema: "http://json-schema.org/draft-07/schema",
    $id: "product.json",
    title: "Product",
    type: "object",
    required: ["name", "price", "driver"],
    properties: {
      id: { $ref: "definitions.json#/definitions/id" },
      type: { type: "string", default: "product", enum: ["product"] },
      name: { type: "string" },
      driver: { $ref: "definitions.json#/definitions/driver" },
      description: { type: "string" },
      price: { type: "number" },
      tax: { type: ["number", "null"] },
      image: { $ref: "mediaFile.json" },
      category: { type: "string" },
      imageUrl: { type: "string", format: "uri", pattern: "^https?://" },
      systemId: { $ref: "definitions.json#/definitions/systemId" },
      createdAt: { $ref: "definitions.json#/definitions/date" },
      updatedAt: { $ref: "definitions.json#/definitions/date" },
      deletedAt: { $ref: "definitions.json#/definitions/date" },
    },
  },
});

Object.defineProperty(Product.prototype, "validator", {
  get: function () {
    return validate;
  },
});
