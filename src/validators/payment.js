// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validatePayment = validate56;
const schema151 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"payment.json","title":"Payment","type":"object","required":["type","maskedNumber","expires"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["amex","visa","masterCard","maestro","discover","diners","jcb","applePay","alipay","chinaUnionPay","vpay"]},"enabled":{"type":"boolean","default":true},"storageData":{"type":["string","null"]},"maskedNumber":{"string":"string"},"issued":{"type":["string","null"]},"expires":{"string":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};

function validate56(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="payment.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enabled === undefined){
data.enabled = true;
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.maskedNumber === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "maskedNumber"},message:"must have required property '"+"maskedNumber"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.expires === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "expires"},message:"must have required property '"+"expires"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err3 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err5 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.type !== undefined){
let data1 = data.type;
if(typeof data1 !== "string"){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((((((((data1 === "amex") || (data1 === "visa")) || (data1 === "masterCard")) || (data1 === "maestro")) || (data1 === "discover")) || (data1 === "diners")) || (data1 === "jcb")) || (data1 === "applePay")) || (data1 === "alipay")) || (data1 === "chinaUnionPay")) || (data1 === "vpay"))){
const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema151.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(typeof data.enabled !== "boolean"){
const err8 = {instancePath:instancePath+"/enabled",schemaPath:"#/properties/enabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data.storageData !== undefined){
let data3 = data.storageData;
if((typeof data3 !== "string") && (data3 !== null)){
const err9 = {instancePath:instancePath+"/storageData",schemaPath:"#/properties/storageData/type",keyword:"type",params:{type: schema151.properties.storageData.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.issued !== undefined){
let data4 = data.issued;
if((typeof data4 !== "string") && (data4 !== null)){
const err10 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/type",keyword:"type",params:{type: schema151.properties.issued.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err11 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
}
else {
const err12 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
validate56.errors = vErrors;
return errors === 0;
}
