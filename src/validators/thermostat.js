// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateThermostat = validate71;
const schema181 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"thermostat.json","title":"Thermostat","description":"Any smart thermostat","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"$ref":"definitions.json#/definitions/name"},"type":{"$ref":"definitions.json#/definitions/type","default":"thermostat"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"currentTemperature":{"type":"number"},"currentHumidity":{"type":"number","minimum":0},"hvacMode":{"type":"string","$ref":"#/properties/supportedHvacModes/items"},"hvacState":{"type":["string","null"],"enum":["cooling","heating","off",null]},"fanMode":{"type":"string","$ref":"#/properties/supportedFanModes/items"},"fanState":{"type":["string","null"],"enum":["off","low","medium","high","on",null]},"temperatureScale":{"type":"string","enum":["celsius","fahrenheit"],"default":"fahrenheit"},"humidityScale":{"type":["string","null"],"enum":["absolute","relative",null]},"supportedHvacModes":{"type":"array","uniqueItems":true,"minItems":2,"items":{"enum":["cool","heat","auto","off"]}},"supportedFanModes":{"type":"array","uniqueItems":true,"items":{"enum":["auto","low","medium","high","off","on"]}},"setpoints":{"type":"object","additionalProperties":false,"properties":{"cool":{"$ref":"#/$defs/setpoint"},"heat":{"$ref":"#/$defs/setpoint"},"auto":{"$ref":"#/$defs/setpoint"}}},"minAutoDelta":{"type":"number","default":3},"cycleRate":{"type":"number"},"batteryLevel":{"$ref":"definitions.json#/definitions/batteryLevel"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"$defs":{"setpoint":{"type":"object","additionalProperties":false,"properties":{"value":{"$ref":"#/$defs/setpointValue"},"min":{"$ref":"#/$defs/setpointMinMax"},"max":{"$ref":"#/$defs/setpointMinMax"}}},"setpointValue":{"type":"number","minimum":0,"maximum":99},"setpointMinMax":{"type":["number","null"],"minimum":0,"maximum":99}},"required":["id","type","hvacMode","fanMode","hvacState","fanState","setpoints","temperatureScale","supportedHvacModes","supportedFanModes","driver"]};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema124 = {"type":"string"};
const schema14 = {"type":"string","enum":["alarm","dimmer","switch","motionSensor","windowCovering","camera","mediaSource","thermostat","lock","courtesy","gateway","tv","dvr","appleTv","discPlayer","mediaPlayer","uncontrolledDevice"]};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema16 = {"type":"array","uniqueItems":true,"items":{"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]}};
const schema189 = {"enum":["cool","heat","auto","off"]};
const schema190 = {"enum":["auto","low","medium","high","off","on"]};
const schema118 = {"type":"number","minimum":0,"maximum":100};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const schema20 = {"type":"number","minimum":0};
const func0 = require("ajv/dist/runtime/equal").default;
const schema17 = {"type":["object","null"],"properties":{"name":{"type":"string","$ref":"#/definitions/supportedNotifications/items"},"timestamp":{"type":"number","minimum":1655907956593},"description":{"type":"string"}}};
const schema18 = {"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]};

function validate72(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate72.errors = vErrors;
return errors === 0;
}

const schema191 = {"type":"object","additionalProperties":false,"properties":{"value":{"$ref":"#/$defs/setpointValue"},"min":{"$ref":"#/$defs/setpointMinMax"},"max":{"$ref":"#/$defs/setpointMinMax"}}};
const schema192 = {"type":"number","minimum":0,"maximum":99};
const schema193 = {"type":["number","null"],"minimum":0,"maximum":99};

function validate74(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
for(const key0 in data){
if(!(((key0 === "value") || (key0 === "min")) || (key0 === "max"))){
const err0 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
if(data.value !== undefined){
let data0 = data.value;
if(typeof data0 == "number"){
if(data0 > 99 || isNaN(data0)){
const err1 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data0 < 0 || isNaN(data0)){
const err2 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
const err3 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data.min !== undefined){
let data1 = data.min;
if((!(typeof data1 == "number")) && (data1 !== null)){
const err4 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/type",keyword:"type",params:{type: schema193.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(typeof data1 == "number"){
if(data1 > 99 || isNaN(data1)){
const err5 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data1 < 0 || isNaN(data1)){
const err6 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
}
if(data.max !== undefined){
let data2 = data.max;
if((!(typeof data2 == "number")) && (data2 !== null)){
const err7 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/type",keyword:"type",params:{type: schema193.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(typeof data2 == "number"){
if(data2 > 99 || isNaN(data2)){
const err8 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data2 < 0 || isNaN(data2)){
const err9 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
}
}
else {
const err10 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
validate74.errors = vErrors;
return errors === 0;
}


function validate71(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="thermostat.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "thermostat";
}
if(data.temperatureScale === undefined){
data.temperatureScale = "fahrenheit";
}
if(data.minAutoDelta === undefined){
data.minAutoDelta = 3;
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.hvacMode === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "hvacMode"},message:"must have required property '"+"hvacMode"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.fanMode === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "fanMode"},message:"must have required property '"+"fanMode"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.hvacState === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "hvacState"},message:"must have required property '"+"hvacState"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.fanState === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "fanState"},message:"must have required property '"+"fanState"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.setpoints === undefined){
const err6 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "setpoints"},message:"must have required property '"+"setpoints"+"'"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.temperatureScale === undefined){
const err7 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "temperatureScale"},message:"must have required property '"+"temperatureScale"+"'"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(data.supportedHvacModes === undefined){
const err8 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "supportedHvacModes"},message:"must have required property '"+"supportedHvacModes"+"'"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data.supportedFanModes === undefined){
const err9 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "supportedFanModes"},message:"must have required property '"+"supportedFanModes"+"'"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(data.driver === undefined){
const err10 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err11 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err12 = {};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err13 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err14 = {instancePath:instancePath+"/name",schemaPath:"definitions.json#/definitions/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
let data2 = data.type;
if(typeof data2 !== "string"){
const err15 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err16 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(data.driver !== undefined){
let data3 = data.driver;
if(typeof data3 !== "string"){
const err17 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data3 === "aws-kinesis") || (data3 === "butler")) || (data3 === "crestron")) || (data3 === "dell")) || (data3 === "dmp")) || (data3 === "doorbird")) || (data3 === "dormakaba")) || (data3 === "dsc")) || (data3 === "ecobee")) || (data3 === "epson")) || (data3 === "geovision-rs")) || (data3 === "geovision-as-manager")) || (data3 === "honeywell-vista")) || (data3 === "igor")) || (data3 === "inncom")) || (data3 === "isapi")) || (data3 === "kohost-k7")) || (data3 === "kohost")) || (data3 === "lg")) || (data3 === "lg-webos")) || (data3 === "lapi")) || (data3 === "lirc")) || (data3 === "mews")) || (data3 === "mht")) || (data3 === "paxton")) || (data3 === "pelican-wireless")) || (data3 === "power-shades")) || (data3 === "rachio")) || (data3 === "rebrandly")) || (data3 === "rtsp")) || (data3 === "salto")) || (data3 === "salto-irn")) || (data3 === "samsung")) || (data3 === "se")) || (data3 === "sendgrid")) || (data3 === "sonifi")) || (data3 === "stay-n-touch")) || (data3 === "storable")) || (data3 === "twilio")) || (data3 === "unifi")) || (data3 === "valcom")) || (data3 === "vizio")) || (data3 === "wisenet")) || (data3 === "cloudflare-images")) || (data3 === "cloudflare-stream")) || (data3 === "insperia-privacy"))){
const err18 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err19 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data5 = data.supportedNotifications;
if(Array.isArray(data5)){
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
let data6 = data5[i0];
if(!((((((((((((((((((((((((((((data6 === "button 1") || (data6 === "button 2")) || (data6 === "button 3")) || (data6 === "button 4")) || (data6 === "button 5")) || (data6 === "idle")) || (data6 === "powerHasBeedApplied")) || (data6 === "acMainsDisconnected")) || (data6 === "acMainsReconnected")) || (data6 === "replaceBatterySoon")) || (data6 === "replaceBatteryNow")) || (data6 === "batteryOk")) || (data6 === "hardwareFailure")) || (data6 === "softwareFailure")) || (data6 === "hardwareFailureWithCode")) || (data6 === "softwareFailureWithCode")) || (data6 === "motionDetection")) || (data6 === "airFilterNeedsCleaned")) || (data6 === "airFilterNeedsReplaced")) || (data6 === "smokeDetected")) || (data6 === "outsideSafeTemperatureRange")) || (data6 === "outsideSafeHumidityRange")) || (data6 === "scheduleMaintenance")) || (data6 === "doorAjar")) || (data6 === "communicationFailure")) || (data6 === "communicationOk")) || (data6 === "burglarAlarm")) || (data6 === "fireAlarm"))){
const err20 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
let i1 = data5.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data5[i1], data5[j0])){
const err21 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err22 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate72(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate72.errors : vErrors.concat(validate72.errors);
errors = vErrors.length;
}
}
if(data.currentTemperature !== undefined){
if(!(typeof data.currentTemperature == "number")){
const err23 = {instancePath:instancePath+"/currentTemperature",schemaPath:"#/properties/currentTemperature/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
if(data.currentHumidity !== undefined){
let data9 = data.currentHumidity;
if(typeof data9 == "number"){
if(data9 < 0 || isNaN(data9)){
const err24 = {instancePath:instancePath+"/currentHumidity",schemaPath:"#/properties/currentHumidity/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
else {
const err25 = {instancePath:instancePath+"/currentHumidity",schemaPath:"#/properties/currentHumidity/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.hvacMode !== undefined){
let data10 = data.hvacMode;
if(typeof data10 !== "string"){
const err26 = {instancePath:instancePath+"/hvacMode",schemaPath:"#/properties/hvacMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
if(!((((data10 === "cool") || (data10 === "heat")) || (data10 === "auto")) || (data10 === "off"))){
const err27 = {instancePath:instancePath+"/hvacMode",schemaPath:"#/properties/supportedHvacModes/items/enum",keyword:"enum",params:{allowedValues: schema189.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data.hvacState !== undefined){
let data11 = data.hvacState;
if((typeof data11 !== "string") && (data11 !== null)){
const err28 = {instancePath:instancePath+"/hvacState",schemaPath:"#/properties/hvacState/type",keyword:"type",params:{type: schema181.properties.hvacState.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
if(!((((data11 === "cooling") || (data11 === "heating")) || (data11 === "off")) || (data11 === null))){
const err29 = {instancePath:instancePath+"/hvacState",schemaPath:"#/properties/hvacState/enum",keyword:"enum",params:{allowedValues: schema181.properties.hvacState.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data.fanMode !== undefined){
let data12 = data.fanMode;
if(typeof data12 !== "string"){
const err30 = {instancePath:instancePath+"/fanMode",schemaPath:"#/properties/fanMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
if(!((((((data12 === "auto") || (data12 === "low")) || (data12 === "medium")) || (data12 === "high")) || (data12 === "off")) || (data12 === "on"))){
const err31 = {instancePath:instancePath+"/fanMode",schemaPath:"#/properties/supportedFanModes/items/enum",keyword:"enum",params:{allowedValues: schema190.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
if(data.fanState !== undefined){
let data13 = data.fanState;
if((typeof data13 !== "string") && (data13 !== null)){
const err32 = {instancePath:instancePath+"/fanState",schemaPath:"#/properties/fanState/type",keyword:"type",params:{type: schema181.properties.fanState.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
if(!((((((data13 === "off") || (data13 === "low")) || (data13 === "medium")) || (data13 === "high")) || (data13 === "on")) || (data13 === null))){
const err33 = {instancePath:instancePath+"/fanState",schemaPath:"#/properties/fanState/enum",keyword:"enum",params:{allowedValues: schema181.properties.fanState.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
let data14 = data.temperatureScale;
if(typeof data14 !== "string"){
const err34 = {instancePath:instancePath+"/temperatureScale",schemaPath:"#/properties/temperatureScale/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(!((data14 === "celsius") || (data14 === "fahrenheit"))){
const err35 = {instancePath:instancePath+"/temperatureScale",schemaPath:"#/properties/temperatureScale/enum",keyword:"enum",params:{allowedValues: schema181.properties.temperatureScale.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
if(data.humidityScale !== undefined){
let data15 = data.humidityScale;
if((typeof data15 !== "string") && (data15 !== null)){
const err36 = {instancePath:instancePath+"/humidityScale",schemaPath:"#/properties/humidityScale/type",keyword:"type",params:{type: schema181.properties.humidityScale.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
if(!(((data15 === "absolute") || (data15 === "relative")) || (data15 === null))){
const err37 = {instancePath:instancePath+"/humidityScale",schemaPath:"#/properties/humidityScale/enum",keyword:"enum",params:{allowedValues: schema181.properties.humidityScale.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
if(data.supportedHvacModes !== undefined){
let data16 = data.supportedHvacModes;
if(Array.isArray(data16)){
if(data16.length < 2){
const err38 = {instancePath:instancePath+"/supportedHvacModes",schemaPath:"#/properties/supportedHvacModes/minItems",keyword:"minItems",params:{limit: 2},message:"must NOT have fewer than 2 items"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
const len1 = data16.length;
for(let i2=0; i2<len1; i2++){
let data17 = data16[i2];
if(!((((data17 === "cool") || (data17 === "heat")) || (data17 === "auto")) || (data17 === "off"))){
const err39 = {instancePath:instancePath+"/supportedHvacModes/" + i2,schemaPath:"#/properties/supportedHvacModes/items/enum",keyword:"enum",params:{allowedValues: schema181.properties.supportedHvacModes.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
let i3 = data16.length;
let j1;
if(i3 > 1){
outer1:
for(;i3--;){
for(j1 = i3; j1--;){
if(func0(data16[i3], data16[j1])){
const err40 = {instancePath:instancePath+"/supportedHvacModes",schemaPath:"#/properties/supportedHvacModes/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
break outer1;
}
}
}
}
}
else {
const err41 = {instancePath:instancePath+"/supportedHvacModes",schemaPath:"#/properties/supportedHvacModes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data.supportedFanModes !== undefined){
let data18 = data.supportedFanModes;
if(Array.isArray(data18)){
const len2 = data18.length;
for(let i4=0; i4<len2; i4++){
let data19 = data18[i4];
if(!((((((data19 === "auto") || (data19 === "low")) || (data19 === "medium")) || (data19 === "high")) || (data19 === "off")) || (data19 === "on"))){
const err42 = {instancePath:instancePath+"/supportedFanModes/" + i4,schemaPath:"#/properties/supportedFanModes/items/enum",keyword:"enum",params:{allowedValues: schema181.properties.supportedFanModes.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
let i5 = data18.length;
let j2;
if(i5 > 1){
outer2:
for(;i5--;){
for(j2 = i5; j2--;){
if(func0(data18[i5], data18[j2])){
const err43 = {instancePath:instancePath+"/supportedFanModes",schemaPath:"#/properties/supportedFanModes/uniqueItems",keyword:"uniqueItems",params:{i: i5, j: j2},message:"must NOT have duplicate items (items ## "+j2+" and "+i5+" are identical)"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
break outer2;
}
}
}
}
}
else {
const err44 = {instancePath:instancePath+"/supportedFanModes",schemaPath:"#/properties/supportedFanModes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
if(data.setpoints !== undefined){
let data20 = data.setpoints;
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
for(const key0 in data20){
if(!(((key0 === "cool") || (key0 === "heat")) || (key0 === "auto"))){
const err45 = {instancePath:instancePath+"/setpoints",schemaPath:"#/properties/setpoints/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
if(data20.cool !== undefined){
if(!(validate74(data20.cool, {instancePath:instancePath+"/setpoints/cool",parentData:data20,parentDataProperty:"cool",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
if(data20.heat !== undefined){
if(!(validate74(data20.heat, {instancePath:instancePath+"/setpoints/heat",parentData:data20,parentDataProperty:"heat",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
if(data20.auto !== undefined){
if(!(validate74(data20.auto, {instancePath:instancePath+"/setpoints/auto",parentData:data20,parentDataProperty:"auto",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
}
else {
const err46 = {instancePath:instancePath+"/setpoints",schemaPath:"#/properties/setpoints/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
if(!(typeof data.minAutoDelta == "number")){
const err47 = {instancePath:instancePath+"/minAutoDelta",schemaPath:"#/properties/minAutoDelta/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
if(data.cycleRate !== undefined){
if(!(typeof data.cycleRate == "number")){
const err48 = {instancePath:instancePath+"/cycleRate",schemaPath:"#/properties/cycleRate/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
if(data.batteryLevel !== undefined){
let data26 = data.batteryLevel;
if(typeof data26 == "number"){
if(data26 > 100 || isNaN(data26)){
const err49 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
if(data26 < 0 || isNaN(data26)){
const err50 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
}
else {
const err51 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err52 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
if(data.watts !== undefined){
let data28 = data.watts;
if(typeof data28 == "number"){
if(data28 < 0 || isNaN(data28)){
const err53 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
else {
const err54 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
}
else {
const err55 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
validate71.errors = vErrors;
return errors === 0;
}
