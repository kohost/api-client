// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateDiscoveredDevice = validate30;
const schema68 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"discoveredDevice.json","title":"Discovered Device","description":"A device that has been discovered by Kohost, but not yet added to the Kohost system.","type":"object","required":["name","deviceId","deviceData"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"deviceId":{"type":"string"},"type":{"type":"string","enum":["discoveredDevice"],"default":"discoveredDevice"},"discriminator":{"$ref":"definitions.json#/definitions/type"},"driver":{"type":"string"},"deviceData":{"type":"object"},"ignore":{"type":"boolean"},"organizationId":{"type":["string","null"],"description":"Reference (id) to the organization that owns this device"},"propertyId":{"type":["string","null"],"description":"Reference (id) to the property that this device belongs to"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema14 = {"type":"string","enum":["alarm","dimmer","switch","motionSensor","windowCovering","camera","mediaSource","thermostat","lock","courtesy","gateway","tv","dvr","appleTv","discPlayer","mediaPlayer","uncontrolledDevice"]};

function validate30(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="discoveredDevice.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "discoveredDevice";
}
if(data.name === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.deviceId === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "deviceId"},message:"must have required property '"+"deviceId"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.deviceData === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "deviceData"},message:"must have required property '"+"deviceData"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err3 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err5 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err6 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data.deviceId !== undefined){
if(typeof data.deviceId !== "string"){
const err7 = {instancePath:instancePath+"/deviceId",schemaPath:"#/properties/deviceId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
let data3 = data.type;
if(typeof data3 !== "string"){
const err8 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!(data3 === "discoveredDevice")){
const err9 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema68.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(data.discriminator !== undefined){
let data4 = data.discriminator;
if(typeof data4 !== "string"){
const err10 = {instancePath:instancePath+"/discriminator",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!(((((((((((((((((data4 === "alarm") || (data4 === "dimmer")) || (data4 === "switch")) || (data4 === "motionSensor")) || (data4 === "windowCovering")) || (data4 === "camera")) || (data4 === "mediaSource")) || (data4 === "thermostat")) || (data4 === "lock")) || (data4 === "courtesy")) || (data4 === "gateway")) || (data4 === "tv")) || (data4 === "dvr")) || (data4 === "appleTv")) || (data4 === "discPlayer")) || (data4 === "mediaPlayer")) || (data4 === "uncontrolledDevice"))){
const err11 = {instancePath:instancePath+"/discriminator",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.driver !== undefined){
if(typeof data.driver !== "string"){
const err12 = {instancePath:instancePath+"/driver",schemaPath:"#/properties/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.deviceData !== undefined){
let data6 = data.deviceData;
if(!(data6 && typeof data6 == "object" && !Array.isArray(data6))){
const err13 = {instancePath:instancePath+"/deviceData",schemaPath:"#/properties/deviceData/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.ignore !== undefined){
if(typeof data.ignore !== "boolean"){
const err14 = {instancePath:instancePath+"/ignore",schemaPath:"#/properties/ignore/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.organizationId !== undefined){
let data8 = data.organizationId;
if((typeof data8 !== "string") && (data8 !== null)){
const err15 = {instancePath:instancePath+"/organizationId",schemaPath:"#/properties/organizationId/type",keyword:"type",params:{type: schema68.properties.organizationId.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.propertyId !== undefined){
let data9 = data.propertyId;
if((typeof data9 !== "string") && (data9 !== null)){
const err16 = {instancePath:instancePath+"/propertyId",schemaPath:"#/properties/propertyId/type",keyword:"type",params:{type: schema68.properties.propertyId.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
else {
const err17 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
validate30.errors = vErrors;
return errors === 0;
}
