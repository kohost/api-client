// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateCredential = validate25;
const schema53 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"credential.json","title":"Credential","type":"object","required":["type","credential","expires"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"credential"},"driver":{"$ref":"definitions.json#/definitions/driver"},"discriminator":{"type":"string","enum":["verificationCode","token","mobileKey","pin","publicKey","passkeyChallenge"]},"credential":{"type":"string"},"userId":{"type":"string"},"organizationId":{"type":"string"},"propertyId":{"type":"string"},"deviceId":{"type":"string"},"userAgent":{"type":"string"},"expires":{"type":["string","object","null"]},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};

function validate25(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="credential.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "credential";
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.credential === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "credential"},message:"must have required property '"+"credential"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.expires === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "expires"},message:"must have required property '"+"expires"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err3 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err5 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(typeof data.type !== "string"){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.driver !== undefined){
let data2 = data.driver;
if(typeof data2 !== "string"){
const err7 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data2 === "aws-kinesis") || (data2 === "butler")) || (data2 === "crestron")) || (data2 === "dell")) || (data2 === "dmp")) || (data2 === "doorbird")) || (data2 === "dormakaba")) || (data2 === "dsc")) || (data2 === "ecobee")) || (data2 === "epson")) || (data2 === "geovision-rs")) || (data2 === "geovision-as-manager")) || (data2 === "honeywell-vista")) || (data2 === "igor")) || (data2 === "inncom")) || (data2 === "isapi")) || (data2 === "kohost-k7")) || (data2 === "kohost")) || (data2 === "lg")) || (data2 === "lg-webos")) || (data2 === "lapi")) || (data2 === "lirc")) || (data2 === "mews")) || (data2 === "mht")) || (data2 === "paxton")) || (data2 === "pelican-wireless")) || (data2 === "power-shades")) || (data2 === "rachio")) || (data2 === "rebrandly")) || (data2 === "rtsp")) || (data2 === "salto")) || (data2 === "salto-irn")) || (data2 === "samsung")) || (data2 === "se")) || (data2 === "sendgrid")) || (data2 === "sonifi")) || (data2 === "stay-n-touch")) || (data2 === "storable")) || (data2 === "twilio")) || (data2 === "unifi")) || (data2 === "valcom")) || (data2 === "vizio")) || (data2 === "wisenet")) || (data2 === "cloudflare-images")) || (data2 === "cloudflare-stream")) || (data2 === "insperia-privacy"))){
const err8 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.discriminator !== undefined){
let data3 = data.discriminator;
if(typeof data3 !== "string"){
const err9 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!((((((data3 === "verificationCode") || (data3 === "token")) || (data3 === "mobileKey")) || (data3 === "pin")) || (data3 === "publicKey")) || (data3 === "passkeyChallenge"))){
const err10 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema53.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.credential !== undefined){
if(typeof data.credential !== "string"){
const err11 = {instancePath:instancePath+"/credential",schemaPath:"#/properties/credential/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.userId !== undefined){
if(typeof data.userId !== "string"){
const err12 = {instancePath:instancePath+"/userId",schemaPath:"#/properties/userId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.organizationId !== undefined){
if(typeof data.organizationId !== "string"){
const err13 = {instancePath:instancePath+"/organizationId",schemaPath:"#/properties/organizationId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.propertyId !== undefined){
if(typeof data.propertyId !== "string"){
const err14 = {instancePath:instancePath+"/propertyId",schemaPath:"#/properties/propertyId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.deviceId !== undefined){
if(typeof data.deviceId !== "string"){
const err15 = {instancePath:instancePath+"/deviceId",schemaPath:"#/properties/deviceId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.userAgent !== undefined){
if(typeof data.userAgent !== "string"){
const err16 = {instancePath:instancePath+"/userAgent",schemaPath:"#/properties/userAgent/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.expires !== undefined){
let data10 = data.expires;
if(((typeof data10 !== "string") && (!(data10 && typeof data10 == "object" && !Array.isArray(data10)))) && (data10 !== null)){
const err17 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/type",keyword:"type",params:{type: schema53.properties.expires.type},message:"must be string,object,null"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err18 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
else {
const err19 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
validate25.errors = vErrors;
return errors === 0;
}
