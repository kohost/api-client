// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateIdentification = validate37;
const schema96 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"identification.json","title":"Identification","type":"object","required":["type"],"oneOf":[{"required":["number"]},{"required":["encryptedNumber"]}],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["driversLicense","passport","identityCard","visa"]},"number":{"string":"string"},"maskedNumber":{"string":"string"},"encryptedNumber":{"string":"string"},"issued":{"type":["string","object"],"format":"date-time"},"expires":{"type":["string","object","null"],"format":"date-time"},"verified":{"type":"boolean"},"matched":{"type":"boolean"},"firstName":{"type":"string"},"lastName":{"type":"string"},"issuingCountry":{"string":"string","minLength":2,"maxLength":2},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];
const func3 = require("ajv/dist/runtime/ucs2length").default;

function validate37(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="identification.json" */;
let vErrors = null;
let errors = 0;
const _errs1 = errors;
let valid0 = false;
let passing0 = null;
const _errs2 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.number === undefined){
const err0 = {instancePath,schemaPath:"#/oneOf/0/required",keyword:"required",params:{missingProperty: "number"},message:"must have required property '"+"number"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs2 === errors;
if(_valid0){
valid0 = true;
passing0 = 0;
}
const _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.encryptedNumber === undefined){
const err1 = {instancePath,schemaPath:"#/oneOf/1/required",keyword:"required",params:{missingProperty: "encryptedNumber"},message:"must have required property '"+"encryptedNumber"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs3 === errors;
if(_valid0 && valid0){
valid0 = false;
passing0 = [passing0, 1];
}
else {
if(_valid0){
valid0 = true;
passing0 = 1;
}
}
if(!valid0){
const err2 = {instancePath,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
else {
errors = _errs1;
if(vErrors !== null){
if(_errs1){
vErrors.length = _errs1;
}
else {
vErrors = null;
}
}
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs7 = errors;
const _errs8 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid3 = _errs8 === errors;
if(valid3){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs7;
if(vErrors !== null){
if(_errs7){
vErrors.length = _errs7;
}
else {
vErrors = null;
}
}
}
}
if(data.type !== undefined){
let data1 = data.type;
if(typeof data1 !== "string"){
const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!((((data1 === "driversLicense") || (data1 === "passport")) || (data1 === "identityCard")) || (data1 === "visa"))){
const err8 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema96.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.issued !== undefined){
let data2 = data.issued;
if((typeof data2 !== "string") && (!(data2 && typeof data2 == "object" && !Array.isArray(data2)))){
const err9 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/type",keyword:"type",params:{type: schema96.properties.issued.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(typeof data2 === "string"){
if(!(formats4.validate(data2))){
const err10 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
if(data.expires !== undefined){
let data3 = data.expires;
if(((typeof data3 !== "string") && (!(data3 && typeof data3 == "object" && !Array.isArray(data3)))) && (data3 !== null)){
const err11 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/type",keyword:"type",params:{type: schema96.properties.expires.type},message:"must be string,object,null"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err12 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
}
if(data.verified !== undefined){
if(typeof data.verified !== "boolean"){
const err13 = {instancePath:instancePath+"/verified",schemaPath:"#/properties/verified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.matched !== undefined){
if(typeof data.matched !== "boolean"){
const err14 = {instancePath:instancePath+"/matched",schemaPath:"#/properties/matched/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.firstName !== undefined){
if(typeof data.firstName !== "string"){
const err15 = {instancePath:instancePath+"/firstName",schemaPath:"#/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.lastName !== undefined){
if(typeof data.lastName !== "string"){
const err16 = {instancePath:instancePath+"/lastName",schemaPath:"#/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.issuingCountry !== undefined){
let data8 = data.issuingCountry;
if(typeof data8 === "string"){
if(func3(data8) > 2){
const err17 = {instancePath:instancePath+"/issuingCountry",schemaPath:"#/properties/issuingCountry/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(func3(data8) < 2){
const err18 = {instancePath:instancePath+"/issuingCountry",schemaPath:"#/properties/issuingCountry/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err19 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
}
else {
const err20 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
validate37.errors = vErrors;
return errors === 0;
}
