// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateSpace = validate101;
const schema236 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"space.json","title":"Space","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string","minLength":1},"type":{"type":"string","default":"space","enum":["space"]},"discriminator":{"type":"string","enum":["classRoom","hotelRoom","office","building","commonArea","conferenceRoom","lobby","gym","pool","restaurant","unit"]},"driver":{"$ref":"definitions.json#/definitions/driver"},"category":{"type":"string","description":"This is the category id"},"rooms":{"type":"array","items":{"type":"string"}},"subGroups":{"type":"array","items":{"type":"string"}},"occupied":{"type":"boolean"},"inUse":{"type":"boolean"},"eco":{"type":"object","additionalProperties":false,"default":{"active":false,"allowed":false,"previousState":null},"properties":{"active":{"type":"boolean","default":false},"activatedAt":{"type":["string","object"],"format":"date-time"},"allowed":{"type":"boolean","default":false},"previousState":{"type":["object","null"],"properties":{"thermostats":{"type":"object","patternProperties":{".*":{"type":"object","properties":{"setpoints":{"$ref":"thermostat.json#/properties/setpoints"}}}}}},"additionalProperties":false}}},"features":{"type":"array","items":{"type":"string","enum":["pet"]}},"maximumOccupancy":{"type":"number","minimum":1},"housekeepingStatus":{"type":"string","enum":["clean","dirty","inspected","pickup"]},"serviceStatus":{"type":"string","enum":["inService","outOfOrder","outOfService"]},"systemId":{"$ref":"definitions.json#/definitions/systemId"}},"if":{"properties":{"type":{"const":"hotelRoom"}}},"then":{"required":["name","type","features","maximumOccupancy","housekeepingStatus","serviceStatus"],"properties":{"features":{"default":[]},"maximumOccupancy":{"default":2},"housekeepingStatus":{"default":"dirty"},"serviceStatus":{"default":"inService"}}},"else":{"required":["name","type"]}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const func3 = require("ajv/dist/runtime/ucs2length").default;
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];
const pattern10 = new RegExp(".*", "u");
const schema221 = {"type":"object","additionalProperties":false,"properties":{"cool":{"$ref":"#/$defs/setpoint"},"heat":{"$ref":"#/$defs/setpoint"},"auto":{"$ref":"#/$defs/setpoint"}}};
const schema191 = {"type":"object","additionalProperties":false,"properties":{"value":{"$ref":"#/$defs/setpointValue"},"min":{"$ref":"#/$defs/setpointMinMax"},"max":{"$ref":"#/$defs/setpointMinMax"}}};
const schema192 = {"type":"number","minimum":0,"maximum":99};
const schema193 = {"type":["number","null"],"minimum":0,"maximum":99};

function validate74(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
for(const key0 in data){
if(!(((key0 === "value") || (key0 === "min")) || (key0 === "max"))){
const err0 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
if(data.value !== undefined){
let data0 = data.value;
if(typeof data0 == "number"){
if(data0 > 99 || isNaN(data0)){
const err1 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data0 < 0 || isNaN(data0)){
const err2 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
const err3 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data.min !== undefined){
let data1 = data.min;
if((!(typeof data1 == "number")) && (data1 !== null)){
const err4 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/type",keyword:"type",params:{type: schema193.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(typeof data1 == "number"){
if(data1 > 99 || isNaN(data1)){
const err5 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data1 < 0 || isNaN(data1)){
const err6 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
}
if(data.max !== undefined){
let data2 = data.max;
if((!(typeof data2 == "number")) && (data2 !== null)){
const err7 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/type",keyword:"type",params:{type: schema193.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(typeof data2 == "number"){
if(data2 > 99 || isNaN(data2)){
const err8 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data2 < 0 || isNaN(data2)){
const err9 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
}
}
else {
const err10 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
validate74.errors = vErrors;
return errors === 0;
}


function validate102(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
for(const key0 in data){
if(!(((key0 === "cool") || (key0 === "heat")) || (key0 === "auto"))){
const err0 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
if(data.cool !== undefined){
if(!(validate74(data.cool, {instancePath:instancePath+"/cool",parentData:data,parentDataProperty:"cool",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
if(data.heat !== undefined){
if(!(validate74(data.heat, {instancePath:instancePath+"/heat",parentData:data,parentDataProperty:"heat",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
if(data.auto !== undefined){
if(!(validate74(data.auto, {instancePath:instancePath+"/auto",parentData:data,parentDataProperty:"auto",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
}
else {
const err1 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
validate102.errors = vErrors;
return errors === 0;
}


function validate101(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="space.json" */;
let vErrors = null;
let errors = 0;
const _errs1 = errors;
let valid0 = true;
const _errs2 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type !== undefined){
if("hotelRoom" !== data.type){
const err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
}
var _valid0 = _errs2 === errors;
errors = _errs1;
if(vErrors !== null){
if(_errs1){
vErrors.length = _errs1;
}
else {
vErrors = null;
}
}
let ifClause0;
if(_valid0){
const _errs4 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.features === undefined){
data.features = [];
}
if(data.maximumOccupancy === undefined){
data.maximumOccupancy = 2;
}
if(data.housekeepingStatus === undefined){
data.housekeepingStatus = "dirty";
}
if(data.serviceStatus === undefined){
data.serviceStatus = "inService";
}
if(data.name === undefined){
const err1 = {instancePath,schemaPath:"#/then/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.type === undefined){
const err2 = {instancePath,schemaPath:"#/then/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.features === undefined){
const err3 = {instancePath,schemaPath:"#/then/required",keyword:"required",params:{missingProperty: "features"},message:"must have required property '"+"features"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.maximumOccupancy === undefined){
const err4 = {instancePath,schemaPath:"#/then/required",keyword:"required",params:{missingProperty: "maximumOccupancy"},message:"must have required property '"+"maximumOccupancy"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.housekeepingStatus === undefined){
const err5 = {instancePath,schemaPath:"#/then/required",keyword:"required",params:{missingProperty: "housekeepingStatus"},message:"must have required property '"+"housekeepingStatus"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.serviceStatus === undefined){
const err6 = {instancePath,schemaPath:"#/then/required",keyword:"required",params:{missingProperty: "serviceStatus"},message:"must have required property '"+"serviceStatus"+"'"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid0 = _valid0;
ifClause0 = "then";
}
else {
const _errs5 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name === undefined){
const err7 = {instancePath,schemaPath:"#/else/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(data.type === undefined){
const err8 = {instancePath,schemaPath:"#/else/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid0 = _valid0;
ifClause0 = "else";
}
if(!valid0){
const err9 = {instancePath,schemaPath:"#/if",keyword:"if",params:{failingKeyword: ifClause0},message:"must match \""+ifClause0+"\" schema"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "space";
}
if(data.eco === undefined){
data.eco = {"active":false,"allowed":false,"previousState":null};
}
if(data.id !== undefined){
let data1 = data.id;
if(typeof data1 !== "string"){
const err10 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
const _errs9 = errors;
const _errs10 = errors;
if(!((data1 === "global") || (data1 === "system"))){
const err11 = {};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
var valid4 = _errs10 === errors;
if(valid4){
const err12 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
let data2 = data.name;
if(typeof data2 === "string"){
if(func3(data2) < 1){
const err13 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
else {
const err14 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
let data3 = data.type;
if(typeof data3 !== "string"){
const err15 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!(data3 === "space")){
const err16 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema236.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(data.discriminator !== undefined){
let data4 = data.discriminator;
if(typeof data4 !== "string"){
const err17 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(!(((((((((((data4 === "classRoom") || (data4 === "hotelRoom")) || (data4 === "office")) || (data4 === "building")) || (data4 === "commonArea")) || (data4 === "conferenceRoom")) || (data4 === "lobby")) || (data4 === "gym")) || (data4 === "pool")) || (data4 === "restaurant")) || (data4 === "unit"))){
const err18 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema236.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data.driver !== undefined){
let data5 = data.driver;
if(typeof data5 !== "string"){
const err19 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data5 === "aws-kinesis") || (data5 === "butler")) || (data5 === "crestron")) || (data5 === "dell")) || (data5 === "dmp")) || (data5 === "doorbird")) || (data5 === "dormakaba")) || (data5 === "dsc")) || (data5 === "ecobee")) || (data5 === "epson")) || (data5 === "geovision-rs")) || (data5 === "geovision-as-manager")) || (data5 === "honeywell-vista")) || (data5 === "igor")) || (data5 === "inncom")) || (data5 === "isapi")) || (data5 === "kohost-k7")) || (data5 === "kohost")) || (data5 === "lg")) || (data5 === "lg-webos")) || (data5 === "lapi")) || (data5 === "lirc")) || (data5 === "mews")) || (data5 === "mht")) || (data5 === "paxton")) || (data5 === "pelican-wireless")) || (data5 === "power-shades")) || (data5 === "rachio")) || (data5 === "rebrandly")) || (data5 === "rtsp")) || (data5 === "salto")) || (data5 === "salto-irn")) || (data5 === "samsung")) || (data5 === "se")) || (data5 === "sendgrid")) || (data5 === "sonifi")) || (data5 === "stay-n-touch")) || (data5 === "storable")) || (data5 === "twilio")) || (data5 === "unifi")) || (data5 === "valcom")) || (data5 === "vizio")) || (data5 === "wisenet")) || (data5 === "cloudflare-images")) || (data5 === "cloudflare-stream")) || (data5 === "insperia-privacy"))){
const err20 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data.category !== undefined){
if(typeof data.category !== "string"){
const err21 = {instancePath:instancePath+"/category",schemaPath:"#/properties/category/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
if(data.rooms !== undefined){
let data7 = data.rooms;
if(Array.isArray(data7)){
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
if(typeof data7[i0] !== "string"){
const err22 = {instancePath:instancePath+"/rooms/" + i0,schemaPath:"#/properties/rooms/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
}
else {
const err23 = {instancePath:instancePath+"/rooms",schemaPath:"#/properties/rooms/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
if(data.subGroups !== undefined){
let data9 = data.subGroups;
if(Array.isArray(data9)){
const len1 = data9.length;
for(let i1=0; i1<len1; i1++){
if(typeof data9[i1] !== "string"){
const err24 = {instancePath:instancePath+"/subGroups/" + i1,schemaPath:"#/properties/subGroups/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
else {
const err25 = {instancePath:instancePath+"/subGroups",schemaPath:"#/properties/subGroups/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.occupied !== undefined){
if(typeof data.occupied !== "boolean"){
const err26 = {instancePath:instancePath+"/occupied",schemaPath:"#/properties/occupied/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.inUse !== undefined){
if(typeof data.inUse !== "boolean"){
const err27 = {instancePath:instancePath+"/inUse",schemaPath:"#/properties/inUse/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
let data13 = data.eco;
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
if(data13.active === undefined){
data13.active = false;
}
if(data13.allowed === undefined){
data13.allowed = false;
}
for(const key0 in data13){
if(!((((key0 === "active") || (key0 === "activatedAt")) || (key0 === "allowed")) || (key0 === "previousState"))){
const err28 = {instancePath:instancePath+"/eco",schemaPath:"#/properties/eco/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(typeof data13.active !== "boolean"){
const err29 = {instancePath:instancePath+"/eco/active",schemaPath:"#/properties/eco/properties/active/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
if(data13.activatedAt !== undefined){
let data15 = data13.activatedAt;
if((typeof data15 !== "string") && (!(data15 && typeof data15 == "object" && !Array.isArray(data15)))){
const err30 = {instancePath:instancePath+"/eco/activatedAt",schemaPath:"#/properties/eco/properties/activatedAt/type",keyword:"type",params:{type: schema236.properties.eco.properties.activatedAt.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
if(typeof data15 === "string"){
if(!(formats4.validate(data15))){
const err31 = {instancePath:instancePath+"/eco/activatedAt",schemaPath:"#/properties/eco/properties/activatedAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
}
if(typeof data13.allowed !== "boolean"){
const err32 = {instancePath:instancePath+"/eco/allowed",schemaPath:"#/properties/eco/properties/allowed/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
if(data13.previousState !== undefined){
let data17 = data13.previousState;
if((!(data17 && typeof data17 == "object" && !Array.isArray(data17))) && (data17 !== null)){
const err33 = {instancePath:instancePath+"/eco/previousState",schemaPath:"#/properties/eco/properties/previousState/type",keyword:"type",params:{type: schema236.properties.eco.properties.previousState.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
for(const key1 in data17){
if(!(key1 === "thermostats")){
const err34 = {instancePath:instancePath+"/eco/previousState",schemaPath:"#/properties/eco/properties/previousState/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
if(data17.thermostats !== undefined){
let data18 = data17.thermostats;
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
for(const key2 in data18){
if(pattern10.test(key2)){
let data19 = data18[key2];
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
if(data19.setpoints !== undefined){
if(!(validate102(data19.setpoints, {instancePath:instancePath+"/eco/previousState/thermostats/" + key2.replace(/~/g, "~0").replace(/\//g, "~1")+"/setpoints",parentData:data19,parentDataProperty:"setpoints",rootData}))){
vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors);
errors = vErrors.length;
}
}
}
else {
const err35 = {instancePath:instancePath+"/eco/previousState/thermostats/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/eco/properties/previousState/properties/thermostats/patternProperties/.*/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
}
}
else {
const err36 = {instancePath:instancePath+"/eco/previousState/thermostats",schemaPath:"#/properties/eco/properties/previousState/properties/thermostats/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
}
}
}
else {
const err37 = {instancePath:instancePath+"/eco",schemaPath:"#/properties/eco/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
if(data.features !== undefined){
let data21 = data.features;
if(Array.isArray(data21)){
const len2 = data21.length;
for(let i2=0; i2<len2; i2++){
let data22 = data21[i2];
if(typeof data22 !== "string"){
const err38 = {instancePath:instancePath+"/features/" + i2,schemaPath:"#/properties/features/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
if(!(data22 === "pet")){
const err39 = {instancePath:instancePath+"/features/" + i2,schemaPath:"#/properties/features/items/enum",keyword:"enum",params:{allowedValues: schema236.properties.features.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
}
else {
const err40 = {instancePath:instancePath+"/features",schemaPath:"#/properties/features/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
if(data.maximumOccupancy !== undefined){
let data23 = data.maximumOccupancy;
if(typeof data23 == "number"){
if(data23 < 1 || isNaN(data23)){
const err41 = {instancePath:instancePath+"/maximumOccupancy",schemaPath:"#/properties/maximumOccupancy/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
else {
const err42 = {instancePath:instancePath+"/maximumOccupancy",schemaPath:"#/properties/maximumOccupancy/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
if(data.housekeepingStatus !== undefined){
let data24 = data.housekeepingStatus;
if(typeof data24 !== "string"){
const err43 = {instancePath:instancePath+"/housekeepingStatus",schemaPath:"#/properties/housekeepingStatus/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
if(!((((data24 === "clean") || (data24 === "dirty")) || (data24 === "inspected")) || (data24 === "pickup"))){
const err44 = {instancePath:instancePath+"/housekeepingStatus",schemaPath:"#/properties/housekeepingStatus/enum",keyword:"enum",params:{allowedValues: schema236.properties.housekeepingStatus.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
if(data.serviceStatus !== undefined){
let data25 = data.serviceStatus;
if(typeof data25 !== "string"){
const err45 = {instancePath:instancePath+"/serviceStatus",schemaPath:"#/properties/serviceStatus/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
if(!(((data25 === "inService") || (data25 === "outOfOrder")) || (data25 === "outOfService"))){
const err46 = {instancePath:instancePath+"/serviceStatus",schemaPath:"#/properties/serviceStatus/enum",keyword:"enum",params:{allowedValues: schema236.properties.serviceStatus.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err47 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
}
else {
const err48 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
validate101.errors = vErrors;
return errors === 0;
}
