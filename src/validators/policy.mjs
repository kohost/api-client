// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validate = validate57;
const schema154 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"policy.json","title":"Policy","description":"A policy is a set of permissions that can be applied to a user to limit their access to resources.","type":"object","required":["name","type","organizationId","propertyId","permissions","discriminator"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"policy","enum":["policy"]},"discriminator":{"type":"string","enum":["user"]},"name":{"type":"string","minLength":1},"description":{"type":"string"},"organizationId":{"type":"string"},"propertyId":{"type":"string"},"permissions":{"type":"array","items":{"type":"object","required":["entities","effect"],"properties":{"entities":{"type":"array","items":{"type":"string","pattern":"^[^:]+(:.+)+$"}},"effect":{"type":"string","enum":["Allow","Deny"]}}}}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const func3 = require("ajv/dist/runtime/ucs2length").default;
const pattern2 = new RegExp("^[^:]+(:.+)+$", "u");

function validate57(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="policy.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "policy";
}
if(data.name === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.organizationId === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "organizationId"},message:"must have required property '"+"organizationId"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.propertyId === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "propertyId"},message:"must have required property '"+"propertyId"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.permissions === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "permissions"},message:"must have required property '"+"permissions"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.discriminator === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "discriminator"},message:"must have required property '"+"discriminator"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err8 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err9 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(data1 === "policy")){
const err10 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema154.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(data.discriminator !== undefined){
let data2 = data.discriminator;
if(typeof data2 !== "string"){
const err11 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(!(data2 === "user")){
const err12 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema154.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.name !== undefined){
let data3 = data.name;
if(typeof data3 === "string"){
if(func3(data3) < 1){
const err13 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
else {
const err14 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err15 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.organizationId !== undefined){
if(typeof data.organizationId !== "string"){
const err16 = {instancePath:instancePath+"/organizationId",schemaPath:"#/properties/organizationId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.propertyId !== undefined){
if(typeof data.propertyId !== "string"){
const err17 = {instancePath:instancePath+"/propertyId",schemaPath:"#/properties/propertyId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.permissions !== undefined){
let data7 = data.permissions;
if(Array.isArray(data7)){
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
let data8 = data7[i0];
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
if(data8.entities === undefined){
const err18 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/required",keyword:"required",params:{missingProperty: "entities"},message:"must have required property '"+"entities"+"'"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(data8.effect === undefined){
const err19 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/required",keyword:"required",params:{missingProperty: "effect"},message:"must have required property '"+"effect"+"'"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(data8.entities !== undefined){
let data9 = data8.entities;
if(Array.isArray(data9)){
const len1 = data9.length;
for(let i1=0; i1<len1; i1++){
let data10 = data9[i1];
if(typeof data10 === "string"){
if(!pattern2.test(data10)){
const err20 = {instancePath:instancePath+"/permissions/" + i0+"/entities/" + i1,schemaPath:"#/properties/permissions/items/properties/entities/items/pattern",keyword:"pattern",params:{pattern: "^[^:]+(:.+)+$"},message:"must match pattern \""+"^[^:]+(:.+)+$"+"\""};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
else {
const err21 = {instancePath:instancePath+"/permissions/" + i0+"/entities/" + i1,schemaPath:"#/properties/permissions/items/properties/entities/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
}
else {
const err22 = {instancePath:instancePath+"/permissions/" + i0+"/entities",schemaPath:"#/properties/permissions/items/properties/entities/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data8.effect !== undefined){
let data11 = data8.effect;
if(typeof data11 !== "string"){
const err23 = {instancePath:instancePath+"/permissions/" + i0+"/effect",schemaPath:"#/properties/permissions/items/properties/effect/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(!((data11 === "Allow") || (data11 === "Deny"))){
const err24 = {instancePath:instancePath+"/permissions/" + i0+"/effect",schemaPath:"#/properties/permissions/items/properties/effect/enum",keyword:"enum",params:{allowedValues: schema154.properties.permissions.items.properties.effect.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
else {
const err25 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
}
else {
const err26 = {instancePath:instancePath+"/permissions",schemaPath:"#/properties/permissions/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
validate57.errors = vErrors;
return errors === 0;
}
