// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateProperty = validate60;
const schema160 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"property.json","title":"Property","type":"object","description":"A property is a physical asset or building","required":["id","name","type","organization","timezone","discriminator"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"type":"string","default":"property","enum":["property"]},"discriminator":{"type":"string","enum":["hospitality","education","commercial","storage"]},"organization":{"type":["string","null"],"description":"Reference (id) to the organization that owns this property"},"departments":{"type":"array","items":{"type":"string"}},"testModeEnabled":{"type":"boolean"},"testMode":{"type":"object","properties":{"notificationEmails":{"type":"array","items":{"type":"string"},"description":"Only users with these email addresses will receive notifications in test mode, including sms, email, or push."},"notificationEmailDomains":{"type":"array","items":{"type":"string"},"description":"Only users with email addreses ending in these domains will receive notifications in test mode, including sms, email, or push."}}},"timezone":{"type":"string","description":"IANA timezone string","pattern":"^([a-zA-Z]+/[a-zA-Z_]+)$","examples":["America/New_York","America/Los_Angeles"]},"smsNumber":{"type":"string"},"checkInTime":{"type":"string"},"checkOutTime":{"type":"string"},"address":{"$ref":"definitions.json#/definitions/address"},"latitude":{"type":"number"},"longitude":{"type":"number"},"appFeatures":{"type":"object","properties":{"RoomControl":{"type":"object","properties":{"disabledSystems":{"type":"array","items":{"type":"string","enum":["climate","lights","shades","tv","doors"]}},"commonAreas":{"type":"object","properties":{"spaces":{"type":"array","items":{"type":"string"}}}},"alarmConfig":{"type":"object","patternProperties":{"^[a-zA-Z0-9]+$":{"type":"object","properties":{"zoneLockMap":{"type":"object","description":"Maps zone numbers to lock ids","additionalProperties":{"type":"string"}}}}},"examples":[{"wZz7hucY":{"zoneLockMap":{"1":"wc87hucc","2":"bc86hzxc","3":"zv5ah5jv"}}}]}},"additionalProperties":false},"CheckIn":{"properties":{"payment":{},"identification":{},"earlyCheckIn":{"type":"object","required":["dynamic"],"properties":{"dynamic":{"type":"boolean","default":false},"minimumPrice":{"type":"number","default":10},"maximumPrice":{"type":"number","default":50},"priceRatioPerHour":{"type":"number","default":0.1},"minimumTime":{"type":"string"}}},"roomUpgrades":{},"pet":{},"promos":{}}},"CheckOut":{"properties":{"lateCheckOut":{"type":"object","required":["dynamic"],"properties":{"dynamic":{"type":"boolean","default":false},"minimumPrice":{"type":"number","default":10},"maximumPrice":{"type":"number","default":50},"priceRatioPerHour":{"type":"number","default":0.1}}}}},"Concierge":{"type":"object","properties":{"timeTracking":{"type":"boolean","default":false},"tipping":{"type":"boolean","default":false},"ratings":{"type":"boolean","default":true},"newTicketCCs":{"type":"array","items":{"type":"string"},"default":[]},"newMessageChannel":{"type":["string","null"],"enum":["sms","email"],"default":"sms","description":"Determines how users should be notified of new messages in the concierge system"},"quickServices":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"},"department":{"type":"string"},"image":{"$ref":"mediaFile.json"}},"required":["name","description","image"]}},"issues":{"type":"object","properties":{"syncWithPropertyId":{"type":"string"}}}}},"DigitalKey":{"type":"object","properties":{"system":{"type":"string","enum":["salto","dormakaba"]},"systemOnline":{"type":"boolean","default":false},"systemConfig":{"type":"object","properties":{"legicUrl":{"type":"string","format":"uri"},"legicWalletName":{"type":"string"},"legicAppId":{"type":"number"},"legicTechUsername":{"type":"string"},"legicTechPassword":{"type":"string"}},"additionalProperties":false,"default":{}},"enableApp":{"type":"boolean"},"branding":{"type":"object","properties":{"logo":{"type":"string","format":"uri"},"gradient":{"type":"array","items":{"type":"string","pattern":"^(?!#ffffff)(#[0-9a-fA-F]{6})$"},"minItems":2,"maxItems":2},"highlightedGradient":{"type":"array","items":{"type":"string","pattern":"^(?!#ffffff)(#[0-9a-fA-F]{6})$"},"minItems":2,"maxItems":3}}}}},"SOS":{"type":"object","properties":{"active":{"type":"boolean"},"activeEmergencies":{"type":"array","items":{"type":"string","enum":["medical","fire","suspiciousPerson","other","conflict","shooter"]}}}},"Elevator":{},"Experiences":{},"Dining":{"type":"object","properties":{"system":{"type":"string","enum":["gotab"]},"systemConfig":{"type":"object","properties":{"landingUrl":{"type":"string","format":"uri"},"includeUserDetails":{"type":"boolean"}},"additionalProperties":false}}},"Rentals":{},"Shop":{},"Spa":{},"Valet":{}},"additionalProperties":false,"default":{"RoomControl":{}}},"notifications":{"type":"object","properties":{"email":{"type":"object","properties":{"enabled":{"type":"boolean"}},"additionalProperties":false},"sms":{"type":"object","properties":{"enabled":{"type":"boolean"}},"additionalProperties":false},"push":{"type":"object","properties":{"enabled":{"type":"boolean"}},"additionalProperties":false}},"additionalProperties":false,"default":{"email":{"enabled":false},"sms":{"enabled":false},"push":{"enabled":false}}},"credentials":{"type":"object","additionalProperties":true}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema21 = {"type":"object","properties":{"id":{"type":"string"},"line1":{"type":"string"},"line2":{"type":"string"},"line3":{"type":"string"},"city":{"type":"string"},"state":{"type":"string"},"postalCode":{"type":"string"},"countryCode":{"type":"string","minLength":2,"maxLength":2}}};
const pattern4 = new RegExp("^([a-zA-Z]+/[a-zA-Z_]+)$", "u");
const pattern5 = new RegExp("^[a-zA-Z0-9]+$", "u");
const pattern6 = new RegExp("^(?!#ffffff)(#[0-9a-fA-F]{6})$", "u");
const func3 = require("ajv/dist/runtime/ucs2length").default;
const func5 = Object.prototype.hasOwnProperty;
const schema24 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"mediaFile.json","title":"Media File","description":"Any media file","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"mediaFile","enum":["mediaFile"]},"name":{"type":"string"},"fileHash":{"type":"string"},"category":{"type":"string","description":"This is the category id"},"mimeType":{"type":"string","enum":["image/*","image/jpeg","image/png","image/gif","image/webp","image/avif","image/svg+xml","application/pdf"]},"data":{"type":"string"},"url":{"type":"string","format":"uri"},"width":{"type":"integer","minimum":0},"height":{"type":"integer","minimum":0},"size":{"type":"integer","minimum":0,"description":"Size in bytes"},"uploadUrl":{"type":"string","format":"uri"},"uploadUrlExpires":{"$ref":"definitions.json#/definitions/date"},"createdBy":{"type":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}},"additionalProperties":false,"required":["type"]};
const schema26 = {"type":["string","object"],"format":"date-time"};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const formats0 = require("ajv-formats/dist/formats").fullFormats.uri;
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];

function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="mediaFile.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "mediaFile";
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema24.properties, key0))){
const err1 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(!(data1 === "mediaFile")){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema24.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.fileHash !== undefined){
if(typeof data.fileHash !== "string"){
const err8 = {instancePath:instancePath+"/fileHash",schemaPath:"#/properties/fileHash/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.category !== undefined){
if(typeof data.category !== "string"){
const err9 = {instancePath:instancePath+"/category",schemaPath:"#/properties/category/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.mimeType !== undefined){
let data5 = data.mimeType;
if(typeof data5 !== "string"){
const err10 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!((((((((data5 === "image/*") || (data5 === "image/jpeg")) || (data5 === "image/png")) || (data5 === "image/gif")) || (data5 === "image/webp")) || (data5 === "image/avif")) || (data5 === "image/svg+xml")) || (data5 === "application/pdf"))){
const err11 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/enum",keyword:"enum",params:{allowedValues: schema24.properties.mimeType.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.data !== undefined){
if(typeof data.data !== "string"){
const err12 = {instancePath:instancePath+"/data",schemaPath:"#/properties/data/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.url !== undefined){
let data7 = data.url;
if(typeof data7 === "string"){
if(!(formats0(data7))){
const err13 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
else {
const err14 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.width !== undefined){
let data8 = data.width;
if(!((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8)))){
const err15 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(typeof data8 == "number"){
if(data8 < 0 || isNaN(data8)){
const err16 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
if(data.height !== undefined){
let data9 = data.height;
if(!((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9)))){
const err17 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(typeof data9 == "number"){
if(data9 < 0 || isNaN(data9)){
const err18 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.size !== undefined){
let data10 = data.size;
if(!((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10)))){
const err19 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(typeof data10 == "number"){
if(data10 < 0 || isNaN(data10)){
const err20 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
if(data.uploadUrl !== undefined){
let data11 = data.uploadUrl;
if(typeof data11 === "string"){
if(!(formats0(data11))){
const err21 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
else {
const err22 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.uploadUrlExpires !== undefined){
let data12 = data.uploadUrlExpires;
if((typeof data12 !== "string") && (!(data12 && typeof data12 == "object" && !Array.isArray(data12)))){
const err23 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(typeof data12 === "string"){
if(!(formats4.validate(data12))){
const err24 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
if(data.createdBy !== undefined){
if(typeof data.createdBy !== "string"){
const err25 = {instancePath:instancePath+"/createdBy",schemaPath:"#/properties/createdBy/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err26 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
validate15.errors = vErrors;
return errors === 0;
}


function validate60(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="property.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "property";
}
if(data.appFeatures === undefined){
data.appFeatures = {"RoomControl":{}};
}
if(data.notifications === undefined){
data.notifications = {"email":{"enabled":false},"sms":{"enabled":false},"push":{"enabled":false}};
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.name === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.type === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.organization === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "organization"},message:"must have required property '"+"organization"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.timezone === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "timezone"},message:"must have required property '"+"timezone"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.discriminator === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "discriminator"},message:"must have required property '"+"discriminator"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err8 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err9 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
let data2 = data.type;
if(typeof data2 !== "string"){
const err10 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!(data2 === "property")){
const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema160.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(data.discriminator !== undefined){
let data3 = data.discriminator;
if(typeof data3 !== "string"){
const err12 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!((((data3 === "hospitality") || (data3 === "education")) || (data3 === "commercial")) || (data3 === "storage"))){
const err13 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema160.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.organization !== undefined){
let data4 = data.organization;
if((typeof data4 !== "string") && (data4 !== null)){
const err14 = {instancePath:instancePath+"/organization",schemaPath:"#/properties/organization/type",keyword:"type",params:{type: schema160.properties.organization.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.departments !== undefined){
let data5 = data.departments;
if(Array.isArray(data5)){
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
if(typeof data5[i0] !== "string"){
const err15 = {instancePath:instancePath+"/departments/" + i0,schemaPath:"#/properties/departments/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
}
else {
const err16 = {instancePath:instancePath+"/departments",schemaPath:"#/properties/departments/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.testModeEnabled !== undefined){
if(typeof data.testModeEnabled !== "boolean"){
const err17 = {instancePath:instancePath+"/testModeEnabled",schemaPath:"#/properties/testModeEnabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.testMode !== undefined){
let data8 = data.testMode;
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
if(data8.notificationEmails !== undefined){
let data9 = data8.notificationEmails;
if(Array.isArray(data9)){
const len1 = data9.length;
for(let i1=0; i1<len1; i1++){
if(typeof data9[i1] !== "string"){
const err18 = {instancePath:instancePath+"/testMode/notificationEmails/" + i1,schemaPath:"#/properties/testMode/properties/notificationEmails/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
else {
const err19 = {instancePath:instancePath+"/testMode/notificationEmails",schemaPath:"#/properties/testMode/properties/notificationEmails/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data8.notificationEmailDomains !== undefined){
let data11 = data8.notificationEmailDomains;
if(Array.isArray(data11)){
const len2 = data11.length;
for(let i2=0; i2<len2; i2++){
if(typeof data11[i2] !== "string"){
const err20 = {instancePath:instancePath+"/testMode/notificationEmailDomains/" + i2,schemaPath:"#/properties/testMode/properties/notificationEmailDomains/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
else {
const err21 = {instancePath:instancePath+"/testMode/notificationEmailDomains",schemaPath:"#/properties/testMode/properties/notificationEmailDomains/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
}
else {
const err22 = {instancePath:instancePath+"/testMode",schemaPath:"#/properties/testMode/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.timezone !== undefined){
let data13 = data.timezone;
if(typeof data13 === "string"){
if(!pattern4.test(data13)){
const err23 = {instancePath:instancePath+"/timezone",schemaPath:"#/properties/timezone/pattern",keyword:"pattern",params:{pattern: "^([a-zA-Z]+/[a-zA-Z_]+)$"},message:"must match pattern \""+"^([a-zA-Z]+/[a-zA-Z_]+)$"+"\""};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
else {
const err24 = {instancePath:instancePath+"/timezone",schemaPath:"#/properties/timezone/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
if(data.smsNumber !== undefined){
if(typeof data.smsNumber !== "string"){
const err25 = {instancePath:instancePath+"/smsNumber",schemaPath:"#/properties/smsNumber/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.checkInTime !== undefined){
if(typeof data.checkInTime !== "string"){
const err26 = {instancePath:instancePath+"/checkInTime",schemaPath:"#/properties/checkInTime/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.checkOutTime !== undefined){
if(typeof data.checkOutTime !== "string"){
const err27 = {instancePath:instancePath+"/checkOutTime",schemaPath:"#/properties/checkOutTime/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data.address !== undefined){
let data17 = data.address;
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
if(data17.id !== undefined){
if(typeof data17.id !== "string"){
const err28 = {instancePath:instancePath+"/address/id",schemaPath:"definitions.json#/definitions/address/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data17.line1 !== undefined){
if(typeof data17.line1 !== "string"){
const err29 = {instancePath:instancePath+"/address/line1",schemaPath:"definitions.json#/definitions/address/properties/line1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data17.line2 !== undefined){
if(typeof data17.line2 !== "string"){
const err30 = {instancePath:instancePath+"/address/line2",schemaPath:"definitions.json#/definitions/address/properties/line2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
if(data17.line3 !== undefined){
if(typeof data17.line3 !== "string"){
const err31 = {instancePath:instancePath+"/address/line3",schemaPath:"definitions.json#/definitions/address/properties/line3/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
if(data17.city !== undefined){
if(typeof data17.city !== "string"){
const err32 = {instancePath:instancePath+"/address/city",schemaPath:"definitions.json#/definitions/address/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
if(data17.state !== undefined){
if(typeof data17.state !== "string"){
const err33 = {instancePath:instancePath+"/address/state",schemaPath:"definitions.json#/definitions/address/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data17.postalCode !== undefined){
if(typeof data17.postalCode !== "string"){
const err34 = {instancePath:instancePath+"/address/postalCode",schemaPath:"definitions.json#/definitions/address/properties/postalCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
if(data17.countryCode !== undefined){
let data25 = data17.countryCode;
if(typeof data25 === "string"){
if(func3(data25) > 2){
const err35 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
if(func3(data25) < 2){
const err36 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
else {
const err37 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
}
else {
const err38 = {instancePath:instancePath+"/address",schemaPath:"definitions.json#/definitions/address/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
if(data.latitude !== undefined){
if(!(typeof data.latitude == "number")){
const err39 = {instancePath:instancePath+"/latitude",schemaPath:"#/properties/latitude/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
if(data.longitude !== undefined){
if(!(typeof data.longitude == "number")){
const err40 = {instancePath:instancePath+"/longitude",schemaPath:"#/properties/longitude/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
let data28 = data.appFeatures;
if(data28 && typeof data28 == "object" && !Array.isArray(data28)){
for(const key0 in data28){
if(!(func5.call(schema160.properties.appFeatures.properties, key0))){
const err41 = {instancePath:instancePath+"/appFeatures",schemaPath:"#/properties/appFeatures/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data28.RoomControl !== undefined){
let data29 = data28.RoomControl;
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
for(const key1 in data29){
if(!(((key1 === "disabledSystems") || (key1 === "commonAreas")) || (key1 === "alarmConfig"))){
const err42 = {instancePath:instancePath+"/appFeatures/RoomControl",schemaPath:"#/properties/appFeatures/properties/RoomControl/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
if(data29.disabledSystems !== undefined){
let data30 = data29.disabledSystems;
if(Array.isArray(data30)){
const len3 = data30.length;
for(let i3=0; i3<len3; i3++){
let data31 = data30[i3];
if(typeof data31 !== "string"){
const err43 = {instancePath:instancePath+"/appFeatures/RoomControl/disabledSystems/" + i3,schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/disabledSystems/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
if(!(((((data31 === "climate") || (data31 === "lights")) || (data31 === "shades")) || (data31 === "tv")) || (data31 === "doors"))){
const err44 = {instancePath:instancePath+"/appFeatures/RoomControl/disabledSystems/" + i3,schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/disabledSystems/items/enum",keyword:"enum",params:{allowedValues: schema160.properties.appFeatures.properties.RoomControl.properties.disabledSystems.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
}
else {
const err45 = {instancePath:instancePath+"/appFeatures/RoomControl/disabledSystems",schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/disabledSystems/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
if(data29.commonAreas !== undefined){
let data32 = data29.commonAreas;
if(data32 && typeof data32 == "object" && !Array.isArray(data32)){
if(data32.spaces !== undefined){
let data33 = data32.spaces;
if(Array.isArray(data33)){
const len4 = data33.length;
for(let i4=0; i4<len4; i4++){
if(typeof data33[i4] !== "string"){
const err46 = {instancePath:instancePath+"/appFeatures/RoomControl/commonAreas/spaces/" + i4,schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/commonAreas/properties/spaces/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
}
else {
const err47 = {instancePath:instancePath+"/appFeatures/RoomControl/commonAreas/spaces",schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/commonAreas/properties/spaces/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
}
else {
const err48 = {instancePath:instancePath+"/appFeatures/RoomControl/commonAreas",schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/commonAreas/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
if(data29.alarmConfig !== undefined){
let data35 = data29.alarmConfig;
if(data35 && typeof data35 == "object" && !Array.isArray(data35)){
for(const key2 in data35){
if(pattern5.test(key2)){
let data36 = data35[key2];
if(data36 && typeof data36 == "object" && !Array.isArray(data36)){
if(data36.zoneLockMap !== undefined){
let data37 = data36.zoneLockMap;
if(data37 && typeof data37 == "object" && !Array.isArray(data37)){
for(const key3 in data37){
if(typeof data37[key3] !== "string"){
const err49 = {instancePath:instancePath+"/appFeatures/RoomControl/alarmConfig/" + key2.replace(/~/g, "~0").replace(/\//g, "~1")+"/zoneLockMap/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/alarmConfig/patternProperties/%5E%5Ba-zA-Z0-9%5D%2B%24/properties/zoneLockMap/additionalProperties/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
}
else {
const err50 = {instancePath:instancePath+"/appFeatures/RoomControl/alarmConfig/" + key2.replace(/~/g, "~0").replace(/\//g, "~1")+"/zoneLockMap",schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/alarmConfig/patternProperties/%5E%5Ba-zA-Z0-9%5D%2B%24/properties/zoneLockMap/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
}
}
else {
const err51 = {instancePath:instancePath+"/appFeatures/RoomControl/alarmConfig/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/alarmConfig/patternProperties/%5E%5Ba-zA-Z0-9%5D%2B%24/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
}
}
else {
const err52 = {instancePath:instancePath+"/appFeatures/RoomControl/alarmConfig",schemaPath:"#/properties/appFeatures/properties/RoomControl/properties/alarmConfig/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
}
else {
const err53 = {instancePath:instancePath+"/appFeatures/RoomControl",schemaPath:"#/properties/appFeatures/properties/RoomControl/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
if(data28.CheckIn !== undefined){
let data39 = data28.CheckIn;
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
if(data39.earlyCheckIn !== undefined){
let data40 = data39.earlyCheckIn;
if(data40 && typeof data40 == "object" && !Array.isArray(data40)){
if(data40.dynamic === undefined){
data40.dynamic = false;
}
if(data40.minimumPrice === undefined){
data40.minimumPrice = 10;
}
if(data40.maximumPrice === undefined){
data40.maximumPrice = 50;
}
if(data40.priceRatioPerHour === undefined){
data40.priceRatioPerHour = 0.1;
}
if(data40.dynamic === undefined){
const err54 = {instancePath:instancePath+"/appFeatures/CheckIn/earlyCheckIn",schemaPath:"#/properties/appFeatures/properties/CheckIn/properties/earlyCheckIn/required",keyword:"required",params:{missingProperty: "dynamic"},message:"must have required property '"+"dynamic"+"'"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
if(typeof data40.dynamic !== "boolean"){
const err55 = {instancePath:instancePath+"/appFeatures/CheckIn/earlyCheckIn/dynamic",schemaPath:"#/properties/appFeatures/properties/CheckIn/properties/earlyCheckIn/properties/dynamic/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
if(!(typeof data40.minimumPrice == "number")){
const err56 = {instancePath:instancePath+"/appFeatures/CheckIn/earlyCheckIn/minimumPrice",schemaPath:"#/properties/appFeatures/properties/CheckIn/properties/earlyCheckIn/properties/minimumPrice/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
if(!(typeof data40.maximumPrice == "number")){
const err57 = {instancePath:instancePath+"/appFeatures/CheckIn/earlyCheckIn/maximumPrice",schemaPath:"#/properties/appFeatures/properties/CheckIn/properties/earlyCheckIn/properties/maximumPrice/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
if(!(typeof data40.priceRatioPerHour == "number")){
const err58 = {instancePath:instancePath+"/appFeatures/CheckIn/earlyCheckIn/priceRatioPerHour",schemaPath:"#/properties/appFeatures/properties/CheckIn/properties/earlyCheckIn/properties/priceRatioPerHour/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
}
if(data40.minimumTime !== undefined){
if(typeof data40.minimumTime !== "string"){
const err59 = {instancePath:instancePath+"/appFeatures/CheckIn/earlyCheckIn/minimumTime",schemaPath:"#/properties/appFeatures/properties/CheckIn/properties/earlyCheckIn/properties/minimumTime/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
}
}
}
else {
const err60 = {instancePath:instancePath+"/appFeatures/CheckIn/earlyCheckIn",schemaPath:"#/properties/appFeatures/properties/CheckIn/properties/earlyCheckIn/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
}
}
}
if(data28.CheckOut !== undefined){
let data46 = data28.CheckOut;
if(data46 && typeof data46 == "object" && !Array.isArray(data46)){
if(data46.lateCheckOut !== undefined){
let data47 = data46.lateCheckOut;
if(data47 && typeof data47 == "object" && !Array.isArray(data47)){
if(data47.dynamic === undefined){
data47.dynamic = false;
}
if(data47.minimumPrice === undefined){
data47.minimumPrice = 10;
}
if(data47.maximumPrice === undefined){
data47.maximumPrice = 50;
}
if(data47.priceRatioPerHour === undefined){
data47.priceRatioPerHour = 0.1;
}
if(data47.dynamic === undefined){
const err61 = {instancePath:instancePath+"/appFeatures/CheckOut/lateCheckOut",schemaPath:"#/properties/appFeatures/properties/CheckOut/properties/lateCheckOut/required",keyword:"required",params:{missingProperty: "dynamic"},message:"must have required property '"+"dynamic"+"'"};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
if(typeof data47.dynamic !== "boolean"){
const err62 = {instancePath:instancePath+"/appFeatures/CheckOut/lateCheckOut/dynamic",schemaPath:"#/properties/appFeatures/properties/CheckOut/properties/lateCheckOut/properties/dynamic/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
}
if(!(typeof data47.minimumPrice == "number")){
const err63 = {instancePath:instancePath+"/appFeatures/CheckOut/lateCheckOut/minimumPrice",schemaPath:"#/properties/appFeatures/properties/CheckOut/properties/lateCheckOut/properties/minimumPrice/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err63];
}
else {
vErrors.push(err63);
}
errors++;
}
if(!(typeof data47.maximumPrice == "number")){
const err64 = {instancePath:instancePath+"/appFeatures/CheckOut/lateCheckOut/maximumPrice",schemaPath:"#/properties/appFeatures/properties/CheckOut/properties/lateCheckOut/properties/maximumPrice/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err64];
}
else {
vErrors.push(err64);
}
errors++;
}
if(!(typeof data47.priceRatioPerHour == "number")){
const err65 = {instancePath:instancePath+"/appFeatures/CheckOut/lateCheckOut/priceRatioPerHour",schemaPath:"#/properties/appFeatures/properties/CheckOut/properties/lateCheckOut/properties/priceRatioPerHour/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err65];
}
else {
vErrors.push(err65);
}
errors++;
}
}
else {
const err66 = {instancePath:instancePath+"/appFeatures/CheckOut/lateCheckOut",schemaPath:"#/properties/appFeatures/properties/CheckOut/properties/lateCheckOut/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err66];
}
else {
vErrors.push(err66);
}
errors++;
}
}
}
}
if(data28.Concierge !== undefined){
let data52 = data28.Concierge;
if(data52 && typeof data52 == "object" && !Array.isArray(data52)){
if(data52.timeTracking === undefined){
data52.timeTracking = false;
}
if(data52.tipping === undefined){
data52.tipping = false;
}
if(data52.ratings === undefined){
data52.ratings = true;
}
if(data52.newTicketCCs === undefined){
data52.newTicketCCs = [];
}
if(data52.newMessageChannel === undefined){
data52.newMessageChannel = "sms";
}
if(typeof data52.timeTracking !== "boolean"){
const err67 = {instancePath:instancePath+"/appFeatures/Concierge/timeTracking",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/timeTracking/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err67];
}
else {
vErrors.push(err67);
}
errors++;
}
if(typeof data52.tipping !== "boolean"){
const err68 = {instancePath:instancePath+"/appFeatures/Concierge/tipping",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/tipping/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err68];
}
else {
vErrors.push(err68);
}
errors++;
}
if(typeof data52.ratings !== "boolean"){
const err69 = {instancePath:instancePath+"/appFeatures/Concierge/ratings",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/ratings/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err69];
}
else {
vErrors.push(err69);
}
errors++;
}
let data56 = data52.newTicketCCs;
if(Array.isArray(data56)){
const len5 = data56.length;
for(let i5=0; i5<len5; i5++){
if(typeof data56[i5] !== "string"){
const err70 = {instancePath:instancePath+"/appFeatures/Concierge/newTicketCCs/" + i5,schemaPath:"#/properties/appFeatures/properties/Concierge/properties/newTicketCCs/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err70];
}
else {
vErrors.push(err70);
}
errors++;
}
}
}
else {
const err71 = {instancePath:instancePath+"/appFeatures/Concierge/newTicketCCs",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/newTicketCCs/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err71];
}
else {
vErrors.push(err71);
}
errors++;
}
let data58 = data52.newMessageChannel;
if((typeof data58 !== "string") && (data58 !== null)){
const err72 = {instancePath:instancePath+"/appFeatures/Concierge/newMessageChannel",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/newMessageChannel/type",keyword:"type",params:{type: schema160.properties.appFeatures.properties.Concierge.properties.newMessageChannel.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err72];
}
else {
vErrors.push(err72);
}
errors++;
}
if(!((data58 === "sms") || (data58 === "email"))){
const err73 = {instancePath:instancePath+"/appFeatures/Concierge/newMessageChannel",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/newMessageChannel/enum",keyword:"enum",params:{allowedValues: schema160.properties.appFeatures.properties.Concierge.properties.newMessageChannel.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err73];
}
else {
vErrors.push(err73);
}
errors++;
}
if(data52.quickServices !== undefined){
let data59 = data52.quickServices;
if(Array.isArray(data59)){
const len6 = data59.length;
for(let i6=0; i6<len6; i6++){
let data60 = data59[i6];
if(data60 && typeof data60 == "object" && !Array.isArray(data60)){
if(data60.name === undefined){
const err74 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6,schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/items/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err74];
}
else {
vErrors.push(err74);
}
errors++;
}
if(data60.description === undefined){
const err75 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6,schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/items/required",keyword:"required",params:{missingProperty: "description"},message:"must have required property '"+"description"+"'"};
if(vErrors === null){
vErrors = [err75];
}
else {
vErrors.push(err75);
}
errors++;
}
if(data60.image === undefined){
const err76 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6,schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/items/required",keyword:"required",params:{missingProperty: "image"},message:"must have required property '"+"image"+"'"};
if(vErrors === null){
vErrors = [err76];
}
else {
vErrors.push(err76);
}
errors++;
}
if(data60.name !== undefined){
if(typeof data60.name !== "string"){
const err77 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6+"/name",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err77];
}
else {
vErrors.push(err77);
}
errors++;
}
}
if(data60.description !== undefined){
if(typeof data60.description !== "string"){
const err78 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6+"/description",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/items/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err78];
}
else {
vErrors.push(err78);
}
errors++;
}
}
if(data60.department !== undefined){
if(typeof data60.department !== "string"){
const err79 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6+"/department",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/items/properties/department/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err79];
}
else {
vErrors.push(err79);
}
errors++;
}
}
if(data60.image !== undefined){
if(!(validate15(data60.image, {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6+"/image",parentData:data60,parentDataProperty:"image",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
}
}
else {
const err80 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices/" + i6,schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err80];
}
else {
vErrors.push(err80);
}
errors++;
}
}
}
else {
const err81 = {instancePath:instancePath+"/appFeatures/Concierge/quickServices",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/quickServices/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err81];
}
else {
vErrors.push(err81);
}
errors++;
}
}
if(data52.issues !== undefined){
let data65 = data52.issues;
if(data65 && typeof data65 == "object" && !Array.isArray(data65)){
if(data65.syncWithPropertyId !== undefined){
if(typeof data65.syncWithPropertyId !== "string"){
const err82 = {instancePath:instancePath+"/appFeatures/Concierge/issues/syncWithPropertyId",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/issues/properties/syncWithPropertyId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err82];
}
else {
vErrors.push(err82);
}
errors++;
}
}
}
else {
const err83 = {instancePath:instancePath+"/appFeatures/Concierge/issues",schemaPath:"#/properties/appFeatures/properties/Concierge/properties/issues/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err83];
}
else {
vErrors.push(err83);
}
errors++;
}
}
}
else {
const err84 = {instancePath:instancePath+"/appFeatures/Concierge",schemaPath:"#/properties/appFeatures/properties/Concierge/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err84];
}
else {
vErrors.push(err84);
}
errors++;
}
}
if(data28.DigitalKey !== undefined){
let data67 = data28.DigitalKey;
if(data67 && typeof data67 == "object" && !Array.isArray(data67)){
if(data67.systemOnline === undefined){
data67.systemOnline = false;
}
if(data67.systemConfig === undefined){
data67.systemConfig = {};
}
if(data67.system !== undefined){
let data68 = data67.system;
if(typeof data68 !== "string"){
const err85 = {instancePath:instancePath+"/appFeatures/DigitalKey/system",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/system/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err85];
}
else {
vErrors.push(err85);
}
errors++;
}
if(!((data68 === "salto") || (data68 === "dormakaba"))){
const err86 = {instancePath:instancePath+"/appFeatures/DigitalKey/system",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/system/enum",keyword:"enum",params:{allowedValues: schema160.properties.appFeatures.properties.DigitalKey.properties.system.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err86];
}
else {
vErrors.push(err86);
}
errors++;
}
}
if(typeof data67.systemOnline !== "boolean"){
const err87 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemOnline",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemOnline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err87];
}
else {
vErrors.push(err87);
}
errors++;
}
let data70 = data67.systemConfig;
if(data70 && typeof data70 == "object" && !Array.isArray(data70)){
for(const key4 in data70){
if(!(((((key4 === "legicUrl") || (key4 === "legicWalletName")) || (key4 === "legicAppId")) || (key4 === "legicTechUsername")) || (key4 === "legicTechPassword"))){
const err88 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err88];
}
else {
vErrors.push(err88);
}
errors++;
}
}
if(data70.legicUrl !== undefined){
let data71 = data70.legicUrl;
if(typeof data71 === "string"){
if(!(formats0(data71))){
const err89 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig/legicUrl",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/properties/legicUrl/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err89];
}
else {
vErrors.push(err89);
}
errors++;
}
}
else {
const err90 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig/legicUrl",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/properties/legicUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err90];
}
else {
vErrors.push(err90);
}
errors++;
}
}
if(data70.legicWalletName !== undefined){
if(typeof data70.legicWalletName !== "string"){
const err91 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig/legicWalletName",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/properties/legicWalletName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err91];
}
else {
vErrors.push(err91);
}
errors++;
}
}
if(data70.legicAppId !== undefined){
if(!(typeof data70.legicAppId == "number")){
const err92 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig/legicAppId",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/properties/legicAppId/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err92];
}
else {
vErrors.push(err92);
}
errors++;
}
}
if(data70.legicTechUsername !== undefined){
if(typeof data70.legicTechUsername !== "string"){
const err93 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig/legicTechUsername",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/properties/legicTechUsername/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err93];
}
else {
vErrors.push(err93);
}
errors++;
}
}
if(data70.legicTechPassword !== undefined){
if(typeof data70.legicTechPassword !== "string"){
const err94 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig/legicTechPassword",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/properties/legicTechPassword/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err94];
}
else {
vErrors.push(err94);
}
errors++;
}
}
}
else {
const err95 = {instancePath:instancePath+"/appFeatures/DigitalKey/systemConfig",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/systemConfig/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err95];
}
else {
vErrors.push(err95);
}
errors++;
}
if(data67.enableApp !== undefined){
if(typeof data67.enableApp !== "boolean"){
const err96 = {instancePath:instancePath+"/appFeatures/DigitalKey/enableApp",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/enableApp/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err96];
}
else {
vErrors.push(err96);
}
errors++;
}
}
if(data67.branding !== undefined){
let data77 = data67.branding;
if(data77 && typeof data77 == "object" && !Array.isArray(data77)){
if(data77.logo !== undefined){
let data78 = data77.logo;
if(typeof data78 === "string"){
if(!(formats0(data78))){
const err97 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/logo",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/logo/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err97];
}
else {
vErrors.push(err97);
}
errors++;
}
}
else {
const err98 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/logo",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/logo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err98];
}
else {
vErrors.push(err98);
}
errors++;
}
}
if(data77.gradient !== undefined){
let data79 = data77.gradient;
if(Array.isArray(data79)){
if(data79.length > 2){
const err99 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/gradient",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/gradient/maxItems",keyword:"maxItems",params:{limit: 2},message:"must NOT have more than 2 items"};
if(vErrors === null){
vErrors = [err99];
}
else {
vErrors.push(err99);
}
errors++;
}
if(data79.length < 2){
const err100 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/gradient",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/gradient/minItems",keyword:"minItems",params:{limit: 2},message:"must NOT have fewer than 2 items"};
if(vErrors === null){
vErrors = [err100];
}
else {
vErrors.push(err100);
}
errors++;
}
const len7 = data79.length;
for(let i7=0; i7<len7; i7++){
let data80 = data79[i7];
if(typeof data80 === "string"){
if(!pattern6.test(data80)){
const err101 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/gradient/" + i7,schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/gradient/items/pattern",keyword:"pattern",params:{pattern: "^(?!#ffffff)(#[0-9a-fA-F]{6})$"},message:"must match pattern \""+"^(?!#ffffff)(#[0-9a-fA-F]{6})$"+"\""};
if(vErrors === null){
vErrors = [err101];
}
else {
vErrors.push(err101);
}
errors++;
}
}
else {
const err102 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/gradient/" + i7,schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/gradient/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err102];
}
else {
vErrors.push(err102);
}
errors++;
}
}
}
else {
const err103 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/gradient",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/gradient/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err103];
}
else {
vErrors.push(err103);
}
errors++;
}
}
if(data77.highlightedGradient !== undefined){
let data81 = data77.highlightedGradient;
if(Array.isArray(data81)){
if(data81.length > 3){
const err104 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/highlightedGradient",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/highlightedGradient/maxItems",keyword:"maxItems",params:{limit: 3},message:"must NOT have more than 3 items"};
if(vErrors === null){
vErrors = [err104];
}
else {
vErrors.push(err104);
}
errors++;
}
if(data81.length < 2){
const err105 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/highlightedGradient",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/highlightedGradient/minItems",keyword:"minItems",params:{limit: 2},message:"must NOT have fewer than 2 items"};
if(vErrors === null){
vErrors = [err105];
}
else {
vErrors.push(err105);
}
errors++;
}
const len8 = data81.length;
for(let i8=0; i8<len8; i8++){
let data82 = data81[i8];
if(typeof data82 === "string"){
if(!pattern6.test(data82)){
const err106 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/highlightedGradient/" + i8,schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/highlightedGradient/items/pattern",keyword:"pattern",params:{pattern: "^(?!#ffffff)(#[0-9a-fA-F]{6})$"},message:"must match pattern \""+"^(?!#ffffff)(#[0-9a-fA-F]{6})$"+"\""};
if(vErrors === null){
vErrors = [err106];
}
else {
vErrors.push(err106);
}
errors++;
}
}
else {
const err107 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/highlightedGradient/" + i8,schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/highlightedGradient/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err107];
}
else {
vErrors.push(err107);
}
errors++;
}
}
}
else {
const err108 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding/highlightedGradient",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/properties/highlightedGradient/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err108];
}
else {
vErrors.push(err108);
}
errors++;
}
}
}
else {
const err109 = {instancePath:instancePath+"/appFeatures/DigitalKey/branding",schemaPath:"#/properties/appFeatures/properties/DigitalKey/properties/branding/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err109];
}
else {
vErrors.push(err109);
}
errors++;
}
}
}
else {
const err110 = {instancePath:instancePath+"/appFeatures/DigitalKey",schemaPath:"#/properties/appFeatures/properties/DigitalKey/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err110];
}
else {
vErrors.push(err110);
}
errors++;
}
}
if(data28.SOS !== undefined){
let data83 = data28.SOS;
if(data83 && typeof data83 == "object" && !Array.isArray(data83)){
if(data83.active !== undefined){
if(typeof data83.active !== "boolean"){
const err111 = {instancePath:instancePath+"/appFeatures/SOS/active",schemaPath:"#/properties/appFeatures/properties/SOS/properties/active/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err111];
}
else {
vErrors.push(err111);
}
errors++;
}
}
if(data83.activeEmergencies !== undefined){
let data85 = data83.activeEmergencies;
if(Array.isArray(data85)){
const len9 = data85.length;
for(let i9=0; i9<len9; i9++){
let data86 = data85[i9];
if(typeof data86 !== "string"){
const err112 = {instancePath:instancePath+"/appFeatures/SOS/activeEmergencies/" + i9,schemaPath:"#/properties/appFeatures/properties/SOS/properties/activeEmergencies/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err112];
}
else {
vErrors.push(err112);
}
errors++;
}
if(!((((((data86 === "medical") || (data86 === "fire")) || (data86 === "suspiciousPerson")) || (data86 === "other")) || (data86 === "conflict")) || (data86 === "shooter"))){
const err113 = {instancePath:instancePath+"/appFeatures/SOS/activeEmergencies/" + i9,schemaPath:"#/properties/appFeatures/properties/SOS/properties/activeEmergencies/items/enum",keyword:"enum",params:{allowedValues: schema160.properties.appFeatures.properties.SOS.properties.activeEmergencies.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err113];
}
else {
vErrors.push(err113);
}
errors++;
}
}
}
else {
const err114 = {instancePath:instancePath+"/appFeatures/SOS/activeEmergencies",schemaPath:"#/properties/appFeatures/properties/SOS/properties/activeEmergencies/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err114];
}
else {
vErrors.push(err114);
}
errors++;
}
}
}
else {
const err115 = {instancePath:instancePath+"/appFeatures/SOS",schemaPath:"#/properties/appFeatures/properties/SOS/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err115];
}
else {
vErrors.push(err115);
}
errors++;
}
}
if(data28.Dining !== undefined){
let data87 = data28.Dining;
if(data87 && typeof data87 == "object" && !Array.isArray(data87)){
if(data87.system !== undefined){
let data88 = data87.system;
if(typeof data88 !== "string"){
const err116 = {instancePath:instancePath+"/appFeatures/Dining/system",schemaPath:"#/properties/appFeatures/properties/Dining/properties/system/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err116];
}
else {
vErrors.push(err116);
}
errors++;
}
if(!(data88 === "gotab")){
const err117 = {instancePath:instancePath+"/appFeatures/Dining/system",schemaPath:"#/properties/appFeatures/properties/Dining/properties/system/enum",keyword:"enum",params:{allowedValues: schema160.properties.appFeatures.properties.Dining.properties.system.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err117];
}
else {
vErrors.push(err117);
}
errors++;
}
}
if(data87.systemConfig !== undefined){
let data89 = data87.systemConfig;
if(data89 && typeof data89 == "object" && !Array.isArray(data89)){
for(const key5 in data89){
if(!((key5 === "landingUrl") || (key5 === "includeUserDetails"))){
const err118 = {instancePath:instancePath+"/appFeatures/Dining/systemConfig",schemaPath:"#/properties/appFeatures/properties/Dining/properties/systemConfig/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err118];
}
else {
vErrors.push(err118);
}
errors++;
}
}
if(data89.landingUrl !== undefined){
let data90 = data89.landingUrl;
if(typeof data90 === "string"){
if(!(formats0(data90))){
const err119 = {instancePath:instancePath+"/appFeatures/Dining/systemConfig/landingUrl",schemaPath:"#/properties/appFeatures/properties/Dining/properties/systemConfig/properties/landingUrl/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err119];
}
else {
vErrors.push(err119);
}
errors++;
}
}
else {
const err120 = {instancePath:instancePath+"/appFeatures/Dining/systemConfig/landingUrl",schemaPath:"#/properties/appFeatures/properties/Dining/properties/systemConfig/properties/landingUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err120];
}
else {
vErrors.push(err120);
}
errors++;
}
}
if(data89.includeUserDetails !== undefined){
if(typeof data89.includeUserDetails !== "boolean"){
const err121 = {instancePath:instancePath+"/appFeatures/Dining/systemConfig/includeUserDetails",schemaPath:"#/properties/appFeatures/properties/Dining/properties/systemConfig/properties/includeUserDetails/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err121];
}
else {
vErrors.push(err121);
}
errors++;
}
}
}
else {
const err122 = {instancePath:instancePath+"/appFeatures/Dining/systemConfig",schemaPath:"#/properties/appFeatures/properties/Dining/properties/systemConfig/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err122];
}
else {
vErrors.push(err122);
}
errors++;
}
}
}
else {
const err123 = {instancePath:instancePath+"/appFeatures/Dining",schemaPath:"#/properties/appFeatures/properties/Dining/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err123];
}
else {
vErrors.push(err123);
}
errors++;
}
}
}
else {
const err124 = {instancePath:instancePath+"/appFeatures",schemaPath:"#/properties/appFeatures/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err124];
}
else {
vErrors.push(err124);
}
errors++;
}
let data92 = data.notifications;
if(data92 && typeof data92 == "object" && !Array.isArray(data92)){
for(const key6 in data92){
if(!(((key6 === "email") || (key6 === "sms")) || (key6 === "push"))){
const err125 = {instancePath:instancePath+"/notifications",schemaPath:"#/properties/notifications/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err125];
}
else {
vErrors.push(err125);
}
errors++;
}
}
if(data92.email !== undefined){
let data93 = data92.email;
if(data93 && typeof data93 == "object" && !Array.isArray(data93)){
for(const key7 in data93){
if(!(key7 === "enabled")){
const err126 = {instancePath:instancePath+"/notifications/email",schemaPath:"#/properties/notifications/properties/email/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err126];
}
else {
vErrors.push(err126);
}
errors++;
}
}
if(data93.enabled !== undefined){
if(typeof data93.enabled !== "boolean"){
const err127 = {instancePath:instancePath+"/notifications/email/enabled",schemaPath:"#/properties/notifications/properties/email/properties/enabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err127];
}
else {
vErrors.push(err127);
}
errors++;
}
}
}
else {
const err128 = {instancePath:instancePath+"/notifications/email",schemaPath:"#/properties/notifications/properties/email/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err128];
}
else {
vErrors.push(err128);
}
errors++;
}
}
if(data92.sms !== undefined){
let data95 = data92.sms;
if(data95 && typeof data95 == "object" && !Array.isArray(data95)){
for(const key8 in data95){
if(!(key8 === "enabled")){
const err129 = {instancePath:instancePath+"/notifications/sms",schemaPath:"#/properties/notifications/properties/sms/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err129];
}
else {
vErrors.push(err129);
}
errors++;
}
}
if(data95.enabled !== undefined){
if(typeof data95.enabled !== "boolean"){
const err130 = {instancePath:instancePath+"/notifications/sms/enabled",schemaPath:"#/properties/notifications/properties/sms/properties/enabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err130];
}
else {
vErrors.push(err130);
}
errors++;
}
}
}
else {
const err131 = {instancePath:instancePath+"/notifications/sms",schemaPath:"#/properties/notifications/properties/sms/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err131];
}
else {
vErrors.push(err131);
}
errors++;
}
}
if(data92.push !== undefined){
let data97 = data92.push;
if(data97 && typeof data97 == "object" && !Array.isArray(data97)){
for(const key9 in data97){
if(!(key9 === "enabled")){
const err132 = {instancePath:instancePath+"/notifications/push",schemaPath:"#/properties/notifications/properties/push/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err132];
}
else {
vErrors.push(err132);
}
errors++;
}
}
if(data97.enabled !== undefined){
if(typeof data97.enabled !== "boolean"){
const err133 = {instancePath:instancePath+"/notifications/push/enabled",schemaPath:"#/properties/notifications/properties/push/properties/enabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err133];
}
else {
vErrors.push(err133);
}
errors++;
}
}
}
else {
const err134 = {instancePath:instancePath+"/notifications/push",schemaPath:"#/properties/notifications/properties/push/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err134];
}
else {
vErrors.push(err134);
}
errors++;
}
}
}
else {
const err135 = {instancePath:instancePath+"/notifications",schemaPath:"#/properties/notifications/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err135];
}
else {
vErrors.push(err135);
}
errors++;
}
if(data.credentials !== undefined){
let data99 = data.credentials;
if(data99 && typeof data99 == "object" && !Array.isArray(data99)){
}
else {
const err136 = {instancePath:instancePath+"/credentials",schemaPath:"#/properties/credentials/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err136];
}
else {
vErrors.push(err136);
}
errors++;
}
}
}
else {
const err137 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err137];
}
else {
vErrors.push(err137);
}
errors++;
}
validate60.errors = vErrors;
return errors === 0;
}
