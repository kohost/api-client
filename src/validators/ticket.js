// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateTicket = validate39;
const schema101 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"ticket.json","title":"Ticket","description":"A ticket is a request from a user.","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["ticket"],"default":"ticket"},"number":{"type":"string"},"issueId":{"type":"string"},"conversation":{"type":"array","default":[],"items":{"type":"object","additionalProperties":false,"properties":{"id":{"type":"string"},"userId":{"type":"string"},"userName":{"type":"string"},"vendorId":{"type":"string"},"vendorName":{"type":"string"},"systemId":{"type":"string"},"systemName":{"type":"string"},"timestamp":{"$ref":"definitions.json#/definitions/createdAt"},"body":{"type":"string"},"readBy":{"type":"array","default":[],"items":{"type":"string"}},"media":{"anyOf":[{"$ref":"mediaFile.json"},{"type":"null"}]}},"anyOf":[{"required":["id","userId","timestamp","body"]},{"required":["id","systemId","timestamp","body"]},{"required":["id","vendorId","timestamp","body"]}]}},"openedBy":{"type":"object","properties":{"userId":{"type":"string"},"systemId":{"type":"string"}}},"requester":{"type":"object","properties":{"systemId":{"type":"string"},"systemName":{"type":"string"},"systemPhoto":{"anyOf":[{"$ref":"mediaFile.json"},{"type":"null"},{"type":"string"}]},"userId":{"type":"string"},"userName":{"type":"string"},"userPhoto":{"anyOf":[{"$ref":"mediaFile.json"},{"type":"null"},{"type":"string"}]},"deviceId":{"type":"string"},"roomId":{"type":"string"},"reservationId":{"type":"string"},"spaceId":{"type":"string"},"spaceName":{"type":"string"}}},"assignedTo":{"type":"object","properties":{"userId":{"type":"string"},"userName":{"type":"string"},"userPhoto":{"anyOf":[{"$ref":"mediaFile.json"},{"type":"null"},{"type":"string"}]},"vendorId":{"type":"string"},"vendorName":{"type":"string"},"vendorPhoto":{"anyOf":[{"$ref":"mediaFile.json"},{"type":"null"},{"type":"string"}]}}},"status":{"type":"string","enum":["open","pending","solved","closed"],"default":"open"},"priority":{"type":"string","enum":["low","normal","high"],"default":"normal"},"tags":{"type":"array","default":[],"items":{"type":"string"}},"department":{"type":"string"},"rating":{"type":"number","minimum":0,"maximum":5},"ratingComment":{"type":"string"},"tipAmount":{"type":"string"},"autoCloseAt":{"$ref":"definitions.json#/definitions/date"},"scheduleDate":{"$ref":"definitions.json#/definitions/date"},"createdAt":{"$ref":"definitions.json#/definitions/date"},"updatedAt":{"$ref":"definitions.json#/definitions/date"},"solvedAt":{"$ref":"definitions.json#/definitions/date"},"closedAt":{"$ref":"definitions.json#/definitions/date"}},"required":["id","conversation","requester","status","tags","createdAt","updatedAt"],"additionalProperties":false};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema103 = {"type":["string","object"],"format":"date-time"};
const schema26 = {"type":["string","object"],"format":"date-time"};
const func5 = Object.prototype.hasOwnProperty;
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];
const schema24 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"mediaFile.json","title":"Media File","description":"Any media file","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"mediaFile","enum":["mediaFile"]},"name":{"type":"string"},"fileHash":{"type":"string"},"category":{"type":"string","description":"This is the category id"},"mimeType":{"type":"string","enum":["image/*","image/jpeg","image/png","image/gif","image/webp","image/avif","image/svg+xml","application/pdf"]},"data":{"type":"string"},"url":{"type":"string","format":"uri"},"width":{"type":"integer","minimum":0},"height":{"type":"integer","minimum":0},"size":{"type":"integer","minimum":0,"description":"Size in bytes"},"uploadUrl":{"type":"string","format":"uri"},"uploadUrlExpires":{"$ref":"definitions.json#/definitions/date"},"createdBy":{"type":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}},"additionalProperties":false,"required":["type"]};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const formats0 = require("ajv-formats/dist/formats").fullFormats.uri;

function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="mediaFile.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "mediaFile";
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema24.properties, key0))){
const err1 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(!(data1 === "mediaFile")){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema24.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.fileHash !== undefined){
if(typeof data.fileHash !== "string"){
const err8 = {instancePath:instancePath+"/fileHash",schemaPath:"#/properties/fileHash/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.category !== undefined){
if(typeof data.category !== "string"){
const err9 = {instancePath:instancePath+"/category",schemaPath:"#/properties/category/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.mimeType !== undefined){
let data5 = data.mimeType;
if(typeof data5 !== "string"){
const err10 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!((((((((data5 === "image/*") || (data5 === "image/jpeg")) || (data5 === "image/png")) || (data5 === "image/gif")) || (data5 === "image/webp")) || (data5 === "image/avif")) || (data5 === "image/svg+xml")) || (data5 === "application/pdf"))){
const err11 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/enum",keyword:"enum",params:{allowedValues: schema24.properties.mimeType.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.data !== undefined){
if(typeof data.data !== "string"){
const err12 = {instancePath:instancePath+"/data",schemaPath:"#/properties/data/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.url !== undefined){
let data7 = data.url;
if(typeof data7 === "string"){
if(!(formats0(data7))){
const err13 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
else {
const err14 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.width !== undefined){
let data8 = data.width;
if(!((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8)))){
const err15 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(typeof data8 == "number"){
if(data8 < 0 || isNaN(data8)){
const err16 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
if(data.height !== undefined){
let data9 = data.height;
if(!((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9)))){
const err17 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(typeof data9 == "number"){
if(data9 < 0 || isNaN(data9)){
const err18 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.size !== undefined){
let data10 = data.size;
if(!((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10)))){
const err19 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(typeof data10 == "number"){
if(data10 < 0 || isNaN(data10)){
const err20 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
if(data.uploadUrl !== undefined){
let data11 = data.uploadUrl;
if(typeof data11 === "string"){
if(!(formats0(data11))){
const err21 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
else {
const err22 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.uploadUrlExpires !== undefined){
let data12 = data.uploadUrlExpires;
if((typeof data12 !== "string") && (!(data12 && typeof data12 == "object" && !Array.isArray(data12)))){
const err23 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(typeof data12 === "string"){
if(!(formats4.validate(data12))){
const err24 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
if(data.createdBy !== undefined){
if(typeof data.createdBy !== "string"){
const err25 = {instancePath:instancePath+"/createdBy",schemaPath:"#/properties/createdBy/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err26 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
validate15.errors = vErrors;
return errors === 0;
}


function validate39(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="ticket.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "ticket";
}
if(data.conversation === undefined){
data.conversation = [];
}
if(data.status === undefined){
data.status = "open";
}
if(data.priority === undefined){
data.priority = "normal";
}
if(data.tags === undefined){
data.tags = [];
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.conversation === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "conversation"},message:"must have required property '"+"conversation"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.requester === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "requester"},message:"must have required property '"+"requester"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.status === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "status"},message:"must have required property '"+"status"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.tags === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "tags"},message:"must have required property '"+"tags"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.createdAt === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "createdAt"},message:"must have required property '"+"createdAt"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.updatedAt === undefined){
const err6 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "updatedAt"},message:"must have required property '"+"updatedAt"+"'"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema101.properties, key0))){
const err7 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err8 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err10 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(!(data1 === "ticket")){
const err12 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema101.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(data.number !== undefined){
if(typeof data.number !== "string"){
const err13 = {instancePath:instancePath+"/number",schemaPath:"#/properties/number/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.issueId !== undefined){
if(typeof data.issueId !== "string"){
const err14 = {instancePath:instancePath+"/issueId",schemaPath:"#/properties/issueId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
let data4 = data.conversation;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
let data5 = data4[i0];
const _errs17 = errors;
let valid5 = false;
const _errs18 = errors;
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
if(data5.id === undefined){
const err15 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/0/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(data5.userId === undefined){
const err16 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/0/required",keyword:"required",params:{missingProperty: "userId"},message:"must have required property '"+"userId"+"'"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(data5.timestamp === undefined){
const err17 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/0/required",keyword:"required",params:{missingProperty: "timestamp"},message:"must have required property '"+"timestamp"+"'"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(data5.body === undefined){
const err18 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/0/required",keyword:"required",params:{missingProperty: "body"},message:"must have required property '"+"body"+"'"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
var _valid0 = _errs18 === errors;
valid5 = valid5 || _valid0;
if(!valid5){
const _errs19 = errors;
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
if(data5.id === undefined){
const err19 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/1/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(data5.systemId === undefined){
const err20 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/1/required",keyword:"required",params:{missingProperty: "systemId"},message:"must have required property '"+"systemId"+"'"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
if(data5.timestamp === undefined){
const err21 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/1/required",keyword:"required",params:{missingProperty: "timestamp"},message:"must have required property '"+"timestamp"+"'"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(data5.body === undefined){
const err22 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/1/required",keyword:"required",params:{missingProperty: "body"},message:"must have required property '"+"body"+"'"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
var _valid0 = _errs19 === errors;
valid5 = valid5 || _valid0;
if(!valid5){
const _errs20 = errors;
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
if(data5.id === undefined){
const err23 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/2/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(data5.vendorId === undefined){
const err24 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/2/required",keyword:"required",params:{missingProperty: "vendorId"},message:"must have required property '"+"vendorId"+"'"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(data5.timestamp === undefined){
const err25 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/2/required",keyword:"required",params:{missingProperty: "timestamp"},message:"must have required property '"+"timestamp"+"'"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
if(data5.body === undefined){
const err26 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf/2/required",keyword:"required",params:{missingProperty: "body"},message:"must have required property '"+"body"+"'"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
var _valid0 = _errs20 === errors;
valid5 = valid5 || _valid0;
}
}
if(!valid5){
const err27 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
else {
errors = _errs17;
if(vErrors !== null){
if(_errs17){
vErrors.length = _errs17;
}
else {
vErrors = null;
}
}
}
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
if(data5.readBy === undefined){
data5.readBy = [];
}
for(const key1 in data5){
if(!(func5.call(schema101.properties.conversation.items.properties, key1))){
const err28 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data5.id !== undefined){
if(typeof data5.id !== "string"){
const err29 = {instancePath:instancePath+"/conversation/" + i0+"/id",schemaPath:"#/properties/conversation/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data5.userId !== undefined){
if(typeof data5.userId !== "string"){
const err30 = {instancePath:instancePath+"/conversation/" + i0+"/userId",schemaPath:"#/properties/conversation/items/properties/userId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
if(data5.userName !== undefined){
if(typeof data5.userName !== "string"){
const err31 = {instancePath:instancePath+"/conversation/" + i0+"/userName",schemaPath:"#/properties/conversation/items/properties/userName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
if(data5.vendorId !== undefined){
if(typeof data5.vendorId !== "string"){
const err32 = {instancePath:instancePath+"/conversation/" + i0+"/vendorId",schemaPath:"#/properties/conversation/items/properties/vendorId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
if(data5.vendorName !== undefined){
if(typeof data5.vendorName !== "string"){
const err33 = {instancePath:instancePath+"/conversation/" + i0+"/vendorName",schemaPath:"#/properties/conversation/items/properties/vendorName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data5.systemId !== undefined){
if(typeof data5.systemId !== "string"){
const err34 = {instancePath:instancePath+"/conversation/" + i0+"/systemId",schemaPath:"#/properties/conversation/items/properties/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
if(data5.systemName !== undefined){
if(typeof data5.systemName !== "string"){
const err35 = {instancePath:instancePath+"/conversation/" + i0+"/systemName",schemaPath:"#/properties/conversation/items/properties/systemName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
if(data5.timestamp !== undefined){
let data13 = data5.timestamp;
if((typeof data13 !== "string") && (!(data13 && typeof data13 == "object" && !Array.isArray(data13)))){
const err36 = {instancePath:instancePath+"/conversation/" + i0+"/timestamp",schemaPath:"definitions.json#/definitions/createdAt/type",keyword:"type",params:{type: schema103.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
if(typeof data13 === "string"){
if(!(formats4.validate(data13))){
const err37 = {instancePath:instancePath+"/conversation/" + i0+"/timestamp",schemaPath:"definitions.json#/definitions/createdAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
}
if(data5.body !== undefined){
if(typeof data5.body !== "string"){
const err38 = {instancePath:instancePath+"/conversation/" + i0+"/body",schemaPath:"#/properties/conversation/items/properties/body/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
let data15 = data5.readBy;
if(Array.isArray(data15)){
const len1 = data15.length;
for(let i1=0; i1<len1; i1++){
if(typeof data15[i1] !== "string"){
const err39 = {instancePath:instancePath+"/conversation/" + i0+"/readBy/" + i1,schemaPath:"#/properties/conversation/items/properties/readBy/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
}
else {
const err40 = {instancePath:instancePath+"/conversation/" + i0+"/readBy",schemaPath:"#/properties/conversation/items/properties/readBy/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
if(data5.media !== undefined){
let data17 = data5.media;
const _errs46 = errors;
let valid10 = false;
const _errs47 = errors;
if(!(validate15(data17, {instancePath:instancePath+"/conversation/" + i0+"/media",parentData:data5,parentDataProperty:"media",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
var _valid1 = _errs47 === errors;
valid10 = valid10 || _valid1;
if(!valid10){
const _errs48 = errors;
if(data17 !== null){
const err41 = {instancePath:instancePath+"/conversation/" + i0+"/media",schemaPath:"#/properties/conversation/items/properties/media/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
var _valid1 = _errs48 === errors;
valid10 = valid10 || _valid1;
}
if(!valid10){
const err42 = {instancePath:instancePath+"/conversation/" + i0+"/media",schemaPath:"#/properties/conversation/items/properties/media/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
else {
errors = _errs46;
if(vErrors !== null){
if(_errs46){
vErrors.length = _errs46;
}
else {
vErrors = null;
}
}
}
}
}
else {
const err43 = {instancePath:instancePath+"/conversation/" + i0,schemaPath:"#/properties/conversation/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
}
else {
const err44 = {instancePath:instancePath+"/conversation",schemaPath:"#/properties/conversation/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
if(data.openedBy !== undefined){
let data18 = data.openedBy;
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
if(data18.userId !== undefined){
if(typeof data18.userId !== "string"){
const err45 = {instancePath:instancePath+"/openedBy/userId",schemaPath:"#/properties/openedBy/properties/userId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
if(data18.systemId !== undefined){
if(typeof data18.systemId !== "string"){
const err46 = {instancePath:instancePath+"/openedBy/systemId",schemaPath:"#/properties/openedBy/properties/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
}
else {
const err47 = {instancePath:instancePath+"/openedBy",schemaPath:"#/properties/openedBy/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
if(data.requester !== undefined){
let data21 = data.requester;
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
if(data21.systemId !== undefined){
if(typeof data21.systemId !== "string"){
const err48 = {instancePath:instancePath+"/requester/systemId",schemaPath:"#/properties/requester/properties/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
if(data21.systemName !== undefined){
if(typeof data21.systemName !== "string"){
const err49 = {instancePath:instancePath+"/requester/systemName",schemaPath:"#/properties/requester/properties/systemName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
if(data21.systemPhoto !== undefined){
let data24 = data21.systemPhoto;
const _errs63 = errors;
let valid13 = false;
const _errs64 = errors;
if(!(validate15(data24, {instancePath:instancePath+"/requester/systemPhoto",parentData:data21,parentDataProperty:"systemPhoto",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
var _valid2 = _errs64 === errors;
valid13 = valid13 || _valid2;
if(!valid13){
const _errs65 = errors;
if(data24 !== null){
const err50 = {instancePath:instancePath+"/requester/systemPhoto",schemaPath:"#/properties/requester/properties/systemPhoto/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
var _valid2 = _errs65 === errors;
valid13 = valid13 || _valid2;
if(!valid13){
const _errs67 = errors;
if(typeof data24 !== "string"){
const err51 = {instancePath:instancePath+"/requester/systemPhoto",schemaPath:"#/properties/requester/properties/systemPhoto/anyOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
var _valid2 = _errs67 === errors;
valid13 = valid13 || _valid2;
}
}
if(!valid13){
const err52 = {instancePath:instancePath+"/requester/systemPhoto",schemaPath:"#/properties/requester/properties/systemPhoto/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
else {
errors = _errs63;
if(vErrors !== null){
if(_errs63){
vErrors.length = _errs63;
}
else {
vErrors = null;
}
}
}
}
if(data21.userId !== undefined){
if(typeof data21.userId !== "string"){
const err53 = {instancePath:instancePath+"/requester/userId",schemaPath:"#/properties/requester/properties/userId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
if(data21.userName !== undefined){
if(typeof data21.userName !== "string"){
const err54 = {instancePath:instancePath+"/requester/userName",schemaPath:"#/properties/requester/properties/userName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
if(data21.userPhoto !== undefined){
let data27 = data21.userPhoto;
const _errs74 = errors;
let valid14 = false;
const _errs75 = errors;
if(!(validate15(data27, {instancePath:instancePath+"/requester/userPhoto",parentData:data21,parentDataProperty:"userPhoto",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
var _valid3 = _errs75 === errors;
valid14 = valid14 || _valid3;
if(!valid14){
const _errs76 = errors;
if(data27 !== null){
const err55 = {instancePath:instancePath+"/requester/userPhoto",schemaPath:"#/properties/requester/properties/userPhoto/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
var _valid3 = _errs76 === errors;
valid14 = valid14 || _valid3;
if(!valid14){
const _errs78 = errors;
if(typeof data27 !== "string"){
const err56 = {instancePath:instancePath+"/requester/userPhoto",schemaPath:"#/properties/requester/properties/userPhoto/anyOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
var _valid3 = _errs78 === errors;
valid14 = valid14 || _valid3;
}
}
if(!valid14){
const err57 = {instancePath:instancePath+"/requester/userPhoto",schemaPath:"#/properties/requester/properties/userPhoto/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
else {
errors = _errs74;
if(vErrors !== null){
if(_errs74){
vErrors.length = _errs74;
}
else {
vErrors = null;
}
}
}
}
if(data21.deviceId !== undefined){
if(typeof data21.deviceId !== "string"){
const err58 = {instancePath:instancePath+"/requester/deviceId",schemaPath:"#/properties/requester/properties/deviceId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
}
}
if(data21.roomId !== undefined){
if(typeof data21.roomId !== "string"){
const err59 = {instancePath:instancePath+"/requester/roomId",schemaPath:"#/properties/requester/properties/roomId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
}
}
if(data21.reservationId !== undefined){
if(typeof data21.reservationId !== "string"){
const err60 = {instancePath:instancePath+"/requester/reservationId",schemaPath:"#/properties/requester/properties/reservationId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
}
if(data21.spaceId !== undefined){
if(typeof data21.spaceId !== "string"){
const err61 = {instancePath:instancePath+"/requester/spaceId",schemaPath:"#/properties/requester/properties/spaceId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
}
if(data21.spaceName !== undefined){
if(typeof data21.spaceName !== "string"){
const err62 = {instancePath:instancePath+"/requester/spaceName",schemaPath:"#/properties/requester/properties/spaceName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
}
}
}
else {
const err63 = {instancePath:instancePath+"/requester",schemaPath:"#/properties/requester/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err63];
}
else {
vErrors.push(err63);
}
errors++;
}
}
if(data.assignedTo !== undefined){
let data33 = data.assignedTo;
if(data33 && typeof data33 == "object" && !Array.isArray(data33)){
if(data33.userId !== undefined){
if(typeof data33.userId !== "string"){
const err64 = {instancePath:instancePath+"/assignedTo/userId",schemaPath:"#/properties/assignedTo/properties/userId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err64];
}
else {
vErrors.push(err64);
}
errors++;
}
}
if(data33.userName !== undefined){
if(typeof data33.userName !== "string"){
const err65 = {instancePath:instancePath+"/assignedTo/userName",schemaPath:"#/properties/assignedTo/properties/userName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err65];
}
else {
vErrors.push(err65);
}
errors++;
}
}
if(data33.userPhoto !== undefined){
let data36 = data33.userPhoto;
const _errs97 = errors;
let valid16 = false;
const _errs98 = errors;
if(!(validate15(data36, {instancePath:instancePath+"/assignedTo/userPhoto",parentData:data33,parentDataProperty:"userPhoto",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
var _valid4 = _errs98 === errors;
valid16 = valid16 || _valid4;
if(!valid16){
const _errs99 = errors;
if(data36 !== null){
const err66 = {instancePath:instancePath+"/assignedTo/userPhoto",schemaPath:"#/properties/assignedTo/properties/userPhoto/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err66];
}
else {
vErrors.push(err66);
}
errors++;
}
var _valid4 = _errs99 === errors;
valid16 = valid16 || _valid4;
if(!valid16){
const _errs101 = errors;
if(typeof data36 !== "string"){
const err67 = {instancePath:instancePath+"/assignedTo/userPhoto",schemaPath:"#/properties/assignedTo/properties/userPhoto/anyOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err67];
}
else {
vErrors.push(err67);
}
errors++;
}
var _valid4 = _errs101 === errors;
valid16 = valid16 || _valid4;
}
}
if(!valid16){
const err68 = {instancePath:instancePath+"/assignedTo/userPhoto",schemaPath:"#/properties/assignedTo/properties/userPhoto/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err68];
}
else {
vErrors.push(err68);
}
errors++;
}
else {
errors = _errs97;
if(vErrors !== null){
if(_errs97){
vErrors.length = _errs97;
}
else {
vErrors = null;
}
}
}
}
if(data33.vendorId !== undefined){
if(typeof data33.vendorId !== "string"){
const err69 = {instancePath:instancePath+"/assignedTo/vendorId",schemaPath:"#/properties/assignedTo/properties/vendorId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err69];
}
else {
vErrors.push(err69);
}
errors++;
}
}
if(data33.vendorName !== undefined){
if(typeof data33.vendorName !== "string"){
const err70 = {instancePath:instancePath+"/assignedTo/vendorName",schemaPath:"#/properties/assignedTo/properties/vendorName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err70];
}
else {
vErrors.push(err70);
}
errors++;
}
}
if(data33.vendorPhoto !== undefined){
let data39 = data33.vendorPhoto;
const _errs108 = errors;
let valid17 = false;
const _errs109 = errors;
if(!(validate15(data39, {instancePath:instancePath+"/assignedTo/vendorPhoto",parentData:data33,parentDataProperty:"vendorPhoto",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
var _valid5 = _errs109 === errors;
valid17 = valid17 || _valid5;
if(!valid17){
const _errs110 = errors;
if(data39 !== null){
const err71 = {instancePath:instancePath+"/assignedTo/vendorPhoto",schemaPath:"#/properties/assignedTo/properties/vendorPhoto/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err71];
}
else {
vErrors.push(err71);
}
errors++;
}
var _valid5 = _errs110 === errors;
valid17 = valid17 || _valid5;
if(!valid17){
const _errs112 = errors;
if(typeof data39 !== "string"){
const err72 = {instancePath:instancePath+"/assignedTo/vendorPhoto",schemaPath:"#/properties/assignedTo/properties/vendorPhoto/anyOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err72];
}
else {
vErrors.push(err72);
}
errors++;
}
var _valid5 = _errs112 === errors;
valid17 = valid17 || _valid5;
}
}
if(!valid17){
const err73 = {instancePath:instancePath+"/assignedTo/vendorPhoto",schemaPath:"#/properties/assignedTo/properties/vendorPhoto/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err73];
}
else {
vErrors.push(err73);
}
errors++;
}
else {
errors = _errs108;
if(vErrors !== null){
if(_errs108){
vErrors.length = _errs108;
}
else {
vErrors = null;
}
}
}
}
}
else {
const err74 = {instancePath:instancePath+"/assignedTo",schemaPath:"#/properties/assignedTo/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err74];
}
else {
vErrors.push(err74);
}
errors++;
}
}
let data40 = data.status;
if(typeof data40 !== "string"){
const err75 = {instancePath:instancePath+"/status",schemaPath:"#/properties/status/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err75];
}
else {
vErrors.push(err75);
}
errors++;
}
if(!((((data40 === "open") || (data40 === "pending")) || (data40 === "solved")) || (data40 === "closed"))){
const err76 = {instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues: schema101.properties.status.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err76];
}
else {
vErrors.push(err76);
}
errors++;
}
let data41 = data.priority;
if(typeof data41 !== "string"){
const err77 = {instancePath:instancePath+"/priority",schemaPath:"#/properties/priority/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err77];
}
else {
vErrors.push(err77);
}
errors++;
}
if(!(((data41 === "low") || (data41 === "normal")) || (data41 === "high"))){
const err78 = {instancePath:instancePath+"/priority",schemaPath:"#/properties/priority/enum",keyword:"enum",params:{allowedValues: schema101.properties.priority.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err78];
}
else {
vErrors.push(err78);
}
errors++;
}
let data42 = data.tags;
if(Array.isArray(data42)){
const len2 = data42.length;
for(let i2=0; i2<len2; i2++){
if(typeof data42[i2] !== "string"){
const err79 = {instancePath:instancePath+"/tags/" + i2,schemaPath:"#/properties/tags/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err79];
}
else {
vErrors.push(err79);
}
errors++;
}
}
}
else {
const err80 = {instancePath:instancePath+"/tags",schemaPath:"#/properties/tags/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err80];
}
else {
vErrors.push(err80);
}
errors++;
}
if(data.department !== undefined){
if(typeof data.department !== "string"){
const err81 = {instancePath:instancePath+"/department",schemaPath:"#/properties/department/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err81];
}
else {
vErrors.push(err81);
}
errors++;
}
}
if(data.rating !== undefined){
let data45 = data.rating;
if(typeof data45 == "number"){
if(data45 > 5 || isNaN(data45)){
const err82 = {instancePath:instancePath+"/rating",schemaPath:"#/properties/rating/maximum",keyword:"maximum",params:{comparison: "<=", limit: 5},message:"must be <= 5"};
if(vErrors === null){
vErrors = [err82];
}
else {
vErrors.push(err82);
}
errors++;
}
if(data45 < 0 || isNaN(data45)){
const err83 = {instancePath:instancePath+"/rating",schemaPath:"#/properties/rating/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err83];
}
else {
vErrors.push(err83);
}
errors++;
}
}
else {
const err84 = {instancePath:instancePath+"/rating",schemaPath:"#/properties/rating/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err84];
}
else {
vErrors.push(err84);
}
errors++;
}
}
if(data.ratingComment !== undefined){
if(typeof data.ratingComment !== "string"){
const err85 = {instancePath:instancePath+"/ratingComment",schemaPath:"#/properties/ratingComment/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err85];
}
else {
vErrors.push(err85);
}
errors++;
}
}
if(data.tipAmount !== undefined){
if(typeof data.tipAmount !== "string"){
const err86 = {instancePath:instancePath+"/tipAmount",schemaPath:"#/properties/tipAmount/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err86];
}
else {
vErrors.push(err86);
}
errors++;
}
}
if(data.autoCloseAt !== undefined){
let data48 = data.autoCloseAt;
if((typeof data48 !== "string") && (!(data48 && typeof data48 == "object" && !Array.isArray(data48)))){
const err87 = {instancePath:instancePath+"/autoCloseAt",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err87];
}
else {
vErrors.push(err87);
}
errors++;
}
if(typeof data48 === "string"){
if(!(formats4.validate(data48))){
const err88 = {instancePath:instancePath+"/autoCloseAt",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err88];
}
else {
vErrors.push(err88);
}
errors++;
}
}
}
if(data.scheduleDate !== undefined){
let data49 = data.scheduleDate;
if((typeof data49 !== "string") && (!(data49 && typeof data49 == "object" && !Array.isArray(data49)))){
const err89 = {instancePath:instancePath+"/scheduleDate",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err89];
}
else {
vErrors.push(err89);
}
errors++;
}
if(typeof data49 === "string"){
if(!(formats4.validate(data49))){
const err90 = {instancePath:instancePath+"/scheduleDate",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err90];
}
else {
vErrors.push(err90);
}
errors++;
}
}
}
if(data.createdAt !== undefined){
let data50 = data.createdAt;
if((typeof data50 !== "string") && (!(data50 && typeof data50 == "object" && !Array.isArray(data50)))){
const err91 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err91];
}
else {
vErrors.push(err91);
}
errors++;
}
if(typeof data50 === "string"){
if(!(formats4.validate(data50))){
const err92 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err92];
}
else {
vErrors.push(err92);
}
errors++;
}
}
}
if(data.updatedAt !== undefined){
let data51 = data.updatedAt;
if((typeof data51 !== "string") && (!(data51 && typeof data51 == "object" && !Array.isArray(data51)))){
const err93 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err93];
}
else {
vErrors.push(err93);
}
errors++;
}
if(typeof data51 === "string"){
if(!(formats4.validate(data51))){
const err94 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err94];
}
else {
vErrors.push(err94);
}
errors++;
}
}
}
if(data.solvedAt !== undefined){
let data52 = data.solvedAt;
if((typeof data52 !== "string") && (!(data52 && typeof data52 == "object" && !Array.isArray(data52)))){
const err95 = {instancePath:instancePath+"/solvedAt",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err95];
}
else {
vErrors.push(err95);
}
errors++;
}
if(typeof data52 === "string"){
if(!(formats4.validate(data52))){
const err96 = {instancePath:instancePath+"/solvedAt",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err96];
}
else {
vErrors.push(err96);
}
errors++;
}
}
}
if(data.closedAt !== undefined){
let data53 = data.closedAt;
if((typeof data53 !== "string") && (!(data53 && typeof data53 == "object" && !Array.isArray(data53)))){
const err97 = {instancePath:instancePath+"/closedAt",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err97];
}
else {
vErrors.push(err97);
}
errors++;
}
if(typeof data53 === "string"){
if(!(formats4.validate(data53))){
const err98 = {instancePath:instancePath+"/closedAt",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err98];
}
else {
vErrors.push(err98);
}
errors++;
}
}
}
}
else {
const err99 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err99];
}
else {
vErrors.push(err99);
}
errors++;
}
validate39.errors = vErrors;
return errors === 0;
}
