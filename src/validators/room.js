// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validate = validate65;
const schema170 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"room.json","title":"Room","description":"A room represents a physical space of controllable IoT devices","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["room"],"default":"room"},"name":{"type":"string"},"floor":{"type":"string"},"dimmers":{"type":"array","default":[],"items":{"$ref":"dimmer.json"}},"switches":{"type":"array","default":[],"items":{"$ref":"switch.json"}},"thermostats":{"type":"array","default":[],"items":{"$ref":"thermostat.json"}},"locks":{"type":"array","default":[],"items":{"$ref":"lock.json"}},"windowCoverings":{"type":"array","default":[],"items":{"$ref":"windowCovering.json"}},"courtesy":{"type":"array","default":[],"items":{"$ref":"courtesy.json"}},"cameras":{"type":"array","default":[],"items":{"$ref":"camera.json"}},"mediaSources":{"type":"array","default":[],"items":{"$ref":"mediaSource.json"}},"motionSensors":{"type":"array","default":[],"items":{"$ref":"motionSensor.json"}},"alarms":{"type":"array","default":[],"items":{"$ref":"alarm.json"}},"occupiedAt":{"$ref":"definitions.json#/definitions/createdAt"},"createdAt":{"$ref":"definitions.json#/definitions/createdAt"},"updatedAt":{"$ref":"definitions.json#/definitions/updatedAt"}},"additionalProperties":false};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema103 = {"type":["string","object"],"format":"date-time"};
const schema150 = {"type":["string","object"],"format":"date-time"};
const func5 = Object.prototype.hasOwnProperty;
const schema59 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"dimmer.json","title":"Dimmer","description":"Any smart dimmer","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"$ref":"definitions.json#/definitions/type"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"level":{"type":["number","null"],"minimum":0,"maximum":100},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"required":["id","type","level","driver"]};
const schema14 = {"type":"string","enum":["alarm","dimmer","switch","motionSensor","windowCovering","camera","mediaSource","thermostat","lock","courtesy","gateway","tv","dvr","appleTv","discPlayer","mediaPlayer","uncontrolledDevice"]};
const schema16 = {"type":"array","uniqueItems":true,"items":{"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]}};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const schema20 = {"type":"number","minimum":0};
const func0 = require("ajv/dist/runtime/equal").default;
const schema17 = {"type":["object","null"],"properties":{"name":{"type":"string","$ref":"#/definitions/supportedNotifications/items"},"timestamp":{"type":"number","minimum":1655907956593},"description":{"type":"string"}}};
const schema18 = {"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]};

function validate28(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate28.errors = vErrors;
return errors === 0;
}


function validate27(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="dimmer.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.level === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "level"},message:"must have required property '"+"level"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.driver === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.type !== undefined){
let data2 = data.type;
if(typeof data2 !== "string"){
const err8 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err9 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data3 = data.supportedNotifications;
if(Array.isArray(data3)){
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
let data4 = data3[i0];
if(!((((((((((((((((((((((((((((data4 === "button 1") || (data4 === "button 2")) || (data4 === "button 3")) || (data4 === "button 4")) || (data4 === "button 5")) || (data4 === "idle")) || (data4 === "powerHasBeedApplied")) || (data4 === "acMainsDisconnected")) || (data4 === "acMainsReconnected")) || (data4 === "replaceBatterySoon")) || (data4 === "replaceBatteryNow")) || (data4 === "batteryOk")) || (data4 === "hardwareFailure")) || (data4 === "softwareFailure")) || (data4 === "hardwareFailureWithCode")) || (data4 === "softwareFailureWithCode")) || (data4 === "motionDetection")) || (data4 === "airFilterNeedsCleaned")) || (data4 === "airFilterNeedsReplaced")) || (data4 === "smokeDetected")) || (data4 === "outsideSafeTemperatureRange")) || (data4 === "outsideSafeHumidityRange")) || (data4 === "scheduleMaintenance")) || (data4 === "doorAjar")) || (data4 === "communicationFailure")) || (data4 === "communicationOk")) || (data4 === "burglarAlarm")) || (data4 === "fireAlarm"))){
const err10 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
let i1 = data3.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data3[i1], data3[j0])){
const err11 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err12 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate28(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data6 = data.driver;
if(typeof data6 !== "string"){
const err13 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data6 === "aws-kinesis") || (data6 === "butler")) || (data6 === "crestron")) || (data6 === "dell")) || (data6 === "dmp")) || (data6 === "doorbird")) || (data6 === "dormakaba")) || (data6 === "dsc")) || (data6 === "ecobee")) || (data6 === "epson")) || (data6 === "geovision-rs")) || (data6 === "geovision-as-manager")) || (data6 === "honeywell-vista")) || (data6 === "igor")) || (data6 === "inncom")) || (data6 === "isapi")) || (data6 === "kohost-k7")) || (data6 === "kohost")) || (data6 === "lg")) || (data6 === "lg-webos")) || (data6 === "lapi")) || (data6 === "lirc")) || (data6 === "mews")) || (data6 === "mht")) || (data6 === "paxton")) || (data6 === "pelican-wireless")) || (data6 === "power-shades")) || (data6 === "rachio")) || (data6 === "rebrandly")) || (data6 === "rtsp")) || (data6 === "salto")) || (data6 === "salto-irn")) || (data6 === "samsung")) || (data6 === "se")) || (data6 === "sendgrid")) || (data6 === "sonifi")) || (data6 === "stay-n-touch")) || (data6 === "storable")) || (data6 === "twilio")) || (data6 === "unifi")) || (data6 === "valcom")) || (data6 === "vizio")) || (data6 === "wisenet")) || (data6 === "cloudflare-images")) || (data6 === "cloudflare-stream")) || (data6 === "insperia-privacy"))){
const err14 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err15 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.level !== undefined){
let data8 = data.level;
if((!(typeof data8 == "number")) && (data8 !== null)){
const err16 = {instancePath:instancePath+"/level",schemaPath:"#/properties/level/type",keyword:"type",params:{type: schema59.properties.level.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(typeof data8 == "number"){
if(data8 > 100 || isNaN(data8)){
const err17 = {instancePath:instancePath+"/level",schemaPath:"#/properties/level/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(data8 < 0 || isNaN(data8)){
const err18 = {instancePath:instancePath+"/level",schemaPath:"#/properties/level/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err19 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.watts !== undefined){
let data10 = data.watts;
if(typeof data10 == "number"){
if(data10 < 0 || isNaN(data10)){
const err20 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
else {
const err21 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
}
else {
const err22 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
validate27.errors = vErrors;
return errors === 0;
}

const schema172 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"switch.json","title":"Switch","description":"Any smart switch","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"$ref":"definitions.json#/definitions/type"},"discriminator":{"type":"string","enum":["light","fan","irrigation"]},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"state":{"type":"string","enum":["on","off"]},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"required":["id","type","state","driver"]};

function validate68(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate68.errors = vErrors;
return errors === 0;
}


function validate67(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="switch.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.state === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "state"},message:"must have required property '"+"state"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.driver === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.type !== undefined){
let data2 = data.type;
if(typeof data2 !== "string"){
const err8 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err9 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.discriminator !== undefined){
let data3 = data.discriminator;
if(typeof data3 !== "string"){
const err10 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!(((data3 === "light") || (data3 === "fan")) || (data3 === "irrigation"))){
const err11 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema172.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data4 = data.supportedNotifications;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
let data5 = data4[i0];
if(!((((((((((((((((((((((((((((data5 === "button 1") || (data5 === "button 2")) || (data5 === "button 3")) || (data5 === "button 4")) || (data5 === "button 5")) || (data5 === "idle")) || (data5 === "powerHasBeedApplied")) || (data5 === "acMainsDisconnected")) || (data5 === "acMainsReconnected")) || (data5 === "replaceBatterySoon")) || (data5 === "replaceBatteryNow")) || (data5 === "batteryOk")) || (data5 === "hardwareFailure")) || (data5 === "softwareFailure")) || (data5 === "hardwareFailureWithCode")) || (data5 === "softwareFailureWithCode")) || (data5 === "motionDetection")) || (data5 === "airFilterNeedsCleaned")) || (data5 === "airFilterNeedsReplaced")) || (data5 === "smokeDetected")) || (data5 === "outsideSafeTemperatureRange")) || (data5 === "outsideSafeHumidityRange")) || (data5 === "scheduleMaintenance")) || (data5 === "doorAjar")) || (data5 === "communicationFailure")) || (data5 === "communicationOk")) || (data5 === "burglarAlarm")) || (data5 === "fireAlarm"))){
const err12 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
let i1 = data4.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data4[i1], data4[j0])){
const err13 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err14 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate68(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data7 = data.driver;
if(typeof data7 !== "string"){
const err15 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data7 === "aws-kinesis") || (data7 === "butler")) || (data7 === "crestron")) || (data7 === "dell")) || (data7 === "dmp")) || (data7 === "doorbird")) || (data7 === "dormakaba")) || (data7 === "dsc")) || (data7 === "ecobee")) || (data7 === "epson")) || (data7 === "geovision-rs")) || (data7 === "geovision-as-manager")) || (data7 === "honeywell-vista")) || (data7 === "igor")) || (data7 === "inncom")) || (data7 === "isapi")) || (data7 === "kohost-k7")) || (data7 === "kohost")) || (data7 === "lg")) || (data7 === "lg-webos")) || (data7 === "lapi")) || (data7 === "lirc")) || (data7 === "mews")) || (data7 === "mht")) || (data7 === "paxton")) || (data7 === "pelican-wireless")) || (data7 === "power-shades")) || (data7 === "rachio")) || (data7 === "rebrandly")) || (data7 === "rtsp")) || (data7 === "salto")) || (data7 === "salto-irn")) || (data7 === "samsung")) || (data7 === "se")) || (data7 === "sendgrid")) || (data7 === "sonifi")) || (data7 === "stay-n-touch")) || (data7 === "storable")) || (data7 === "twilio")) || (data7 === "unifi")) || (data7 === "valcom")) || (data7 === "vizio")) || (data7 === "wisenet")) || (data7 === "cloudflare-images")) || (data7 === "cloudflare-stream")) || (data7 === "insperia-privacy"))){
const err16 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err17 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.state !== undefined){
let data9 = data.state;
if(typeof data9 !== "string"){
const err18 = {instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!((data9 === "on") || (data9 === "off"))){
const err19 = {instancePath:instancePath+"/state",schemaPath:"#/properties/state/enum",keyword:"enum",params:{allowedValues: schema172.properties.state.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err20 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data.watts !== undefined){
let data11 = data.watts;
if(typeof data11 == "number"){
if(data11 < 0 || isNaN(data11)){
const err21 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
else {
const err22 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
}
else {
const err23 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
validate67.errors = vErrors;
return errors === 0;
}

const schema181 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"thermostat.json","title":"Thermostat","description":"Any smart thermostat","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"$ref":"definitions.json#/definitions/name"},"type":{"$ref":"definitions.json#/definitions/type","default":"thermostat"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"currentTemperature":{"type":"number"},"currentHumidity":{"type":"number","minimum":0},"hvacMode":{"type":"string","$ref":"#/properties/supportedHvacModes/items"},"hvacState":{"type":["string","null"],"enum":["cooling","heating","off",null]},"fanMode":{"type":"string","$ref":"#/properties/supportedFanModes/items"},"fanState":{"type":["string","null"],"enum":["off","low","medium","high","on",null]},"temperatureScale":{"type":"string","enum":["celsius","fahrenheit"],"default":"fahrenheit"},"humidityScale":{"type":["string","null"],"enum":["absolute","relative",null]},"supportedHvacModes":{"type":"array","uniqueItems":true,"minItems":2,"items":{"enum":["cool","heat","auto","off"]}},"supportedFanModes":{"type":"array","uniqueItems":true,"items":{"enum":["auto","low","medium","high","off","on"]}},"setpoints":{"type":"object","additionalProperties":false,"properties":{"cool":{"$ref":"#/$defs/setpoint"},"heat":{"$ref":"#/$defs/setpoint"},"auto":{"$ref":"#/$defs/setpoint"}}},"minAutoDelta":{"type":"number","default":3},"cycleRate":{"type":"number"},"batteryLevel":{"$ref":"definitions.json#/definitions/batteryLevel"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"$defs":{"setpoint":{"type":"object","additionalProperties":false,"properties":{"value":{"$ref":"#/$defs/setpointValue"},"min":{"$ref":"#/$defs/setpointMinMax"},"max":{"$ref":"#/$defs/setpointMinMax"}}},"setpointValue":{"type":"number","minimum":0,"maximum":99},"setpointMinMax":{"type":["number","null"],"minimum":0,"maximum":99}},"required":["id","type","hvacMode","fanMode","hvacState","fanState","setpoints","temperatureScale","supportedHvacModes","supportedFanModes","driver"]};
const schema124 = {"type":"string"};
const schema189 = {"enum":["cool","heat","auto","off"]};
const schema190 = {"enum":["auto","low","medium","high","off","on"]};
const schema118 = {"type":"number","minimum":0,"maximum":100};

function validate72(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate72.errors = vErrors;
return errors === 0;
}

const schema191 = {"type":"object","additionalProperties":false,"properties":{"value":{"$ref":"#/$defs/setpointValue"},"min":{"$ref":"#/$defs/setpointMinMax"},"max":{"$ref":"#/$defs/setpointMinMax"}}};
const schema192 = {"type":"number","minimum":0,"maximum":99};
const schema193 = {"type":["number","null"],"minimum":0,"maximum":99};

function validate74(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
for(const key0 in data){
if(!(((key0 === "value") || (key0 === "min")) || (key0 === "max"))){
const err0 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
if(data.value !== undefined){
let data0 = data.value;
if(typeof data0 == "number"){
if(data0 > 99 || isNaN(data0)){
const err1 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data0 < 0 || isNaN(data0)){
const err2 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
const err3 = {instancePath:instancePath+"/value",schemaPath:"#/$defs/setpointValue/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data.min !== undefined){
let data1 = data.min;
if((!(typeof data1 == "number")) && (data1 !== null)){
const err4 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/type",keyword:"type",params:{type: schema193.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(typeof data1 == "number"){
if(data1 > 99 || isNaN(data1)){
const err5 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data1 < 0 || isNaN(data1)){
const err6 = {instancePath:instancePath+"/min",schemaPath:"#/$defs/setpointMinMax/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
}
if(data.max !== undefined){
let data2 = data.max;
if((!(typeof data2 == "number")) && (data2 !== null)){
const err7 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/type",keyword:"type",params:{type: schema193.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(typeof data2 == "number"){
if(data2 > 99 || isNaN(data2)){
const err8 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/maximum",keyword:"maximum",params:{comparison: "<=", limit: 99},message:"must be <= 99"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data2 < 0 || isNaN(data2)){
const err9 = {instancePath:instancePath+"/max",schemaPath:"#/$defs/setpointMinMax/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
}
}
else {
const err10 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
validate74.errors = vErrors;
return errors === 0;
}


function validate71(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="thermostat.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "thermostat";
}
if(data.temperatureScale === undefined){
data.temperatureScale = "fahrenheit";
}
if(data.minAutoDelta === undefined){
data.minAutoDelta = 3;
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.hvacMode === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "hvacMode"},message:"must have required property '"+"hvacMode"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.fanMode === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "fanMode"},message:"must have required property '"+"fanMode"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.hvacState === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "hvacState"},message:"must have required property '"+"hvacState"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.fanState === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "fanState"},message:"must have required property '"+"fanState"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.setpoints === undefined){
const err6 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "setpoints"},message:"must have required property '"+"setpoints"+"'"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.temperatureScale === undefined){
const err7 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "temperatureScale"},message:"must have required property '"+"temperatureScale"+"'"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(data.supportedHvacModes === undefined){
const err8 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "supportedHvacModes"},message:"must have required property '"+"supportedHvacModes"+"'"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data.supportedFanModes === undefined){
const err9 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "supportedFanModes"},message:"must have required property '"+"supportedFanModes"+"'"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(data.driver === undefined){
const err10 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err11 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err12 = {};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err13 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err14 = {instancePath:instancePath+"/name",schemaPath:"definitions.json#/definitions/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
let data2 = data.type;
if(typeof data2 !== "string"){
const err15 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err16 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(data.driver !== undefined){
let data3 = data.driver;
if(typeof data3 !== "string"){
const err17 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data3 === "aws-kinesis") || (data3 === "butler")) || (data3 === "crestron")) || (data3 === "dell")) || (data3 === "dmp")) || (data3 === "doorbird")) || (data3 === "dormakaba")) || (data3 === "dsc")) || (data3 === "ecobee")) || (data3 === "epson")) || (data3 === "geovision-rs")) || (data3 === "geovision-as-manager")) || (data3 === "honeywell-vista")) || (data3 === "igor")) || (data3 === "inncom")) || (data3 === "isapi")) || (data3 === "kohost-k7")) || (data3 === "kohost")) || (data3 === "lg")) || (data3 === "lg-webos")) || (data3 === "lapi")) || (data3 === "lirc")) || (data3 === "mews")) || (data3 === "mht")) || (data3 === "paxton")) || (data3 === "pelican-wireless")) || (data3 === "power-shades")) || (data3 === "rachio")) || (data3 === "rebrandly")) || (data3 === "rtsp")) || (data3 === "salto")) || (data3 === "salto-irn")) || (data3 === "samsung")) || (data3 === "se")) || (data3 === "sendgrid")) || (data3 === "sonifi")) || (data3 === "stay-n-touch")) || (data3 === "storable")) || (data3 === "twilio")) || (data3 === "unifi")) || (data3 === "valcom")) || (data3 === "vizio")) || (data3 === "wisenet")) || (data3 === "cloudflare-images")) || (data3 === "cloudflare-stream")) || (data3 === "insperia-privacy"))){
const err18 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err19 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data5 = data.supportedNotifications;
if(Array.isArray(data5)){
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
let data6 = data5[i0];
if(!((((((((((((((((((((((((((((data6 === "button 1") || (data6 === "button 2")) || (data6 === "button 3")) || (data6 === "button 4")) || (data6 === "button 5")) || (data6 === "idle")) || (data6 === "powerHasBeedApplied")) || (data6 === "acMainsDisconnected")) || (data6 === "acMainsReconnected")) || (data6 === "replaceBatterySoon")) || (data6 === "replaceBatteryNow")) || (data6 === "batteryOk")) || (data6 === "hardwareFailure")) || (data6 === "softwareFailure")) || (data6 === "hardwareFailureWithCode")) || (data6 === "softwareFailureWithCode")) || (data6 === "motionDetection")) || (data6 === "airFilterNeedsCleaned")) || (data6 === "airFilterNeedsReplaced")) || (data6 === "smokeDetected")) || (data6 === "outsideSafeTemperatureRange")) || (data6 === "outsideSafeHumidityRange")) || (data6 === "scheduleMaintenance")) || (data6 === "doorAjar")) || (data6 === "communicationFailure")) || (data6 === "communicationOk")) || (data6 === "burglarAlarm")) || (data6 === "fireAlarm"))){
const err20 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
let i1 = data5.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data5[i1], data5[j0])){
const err21 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err22 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate72(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate72.errors : vErrors.concat(validate72.errors);
errors = vErrors.length;
}
}
if(data.currentTemperature !== undefined){
if(!(typeof data.currentTemperature == "number")){
const err23 = {instancePath:instancePath+"/currentTemperature",schemaPath:"#/properties/currentTemperature/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
if(data.currentHumidity !== undefined){
let data9 = data.currentHumidity;
if(typeof data9 == "number"){
if(data9 < 0 || isNaN(data9)){
const err24 = {instancePath:instancePath+"/currentHumidity",schemaPath:"#/properties/currentHumidity/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
else {
const err25 = {instancePath:instancePath+"/currentHumidity",schemaPath:"#/properties/currentHumidity/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.hvacMode !== undefined){
let data10 = data.hvacMode;
if(typeof data10 !== "string"){
const err26 = {instancePath:instancePath+"/hvacMode",schemaPath:"#/properties/hvacMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
if(!((((data10 === "cool") || (data10 === "heat")) || (data10 === "auto")) || (data10 === "off"))){
const err27 = {instancePath:instancePath+"/hvacMode",schemaPath:"#/properties/supportedHvacModes/items/enum",keyword:"enum",params:{allowedValues: schema189.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data.hvacState !== undefined){
let data11 = data.hvacState;
if((typeof data11 !== "string") && (data11 !== null)){
const err28 = {instancePath:instancePath+"/hvacState",schemaPath:"#/properties/hvacState/type",keyword:"type",params:{type: schema181.properties.hvacState.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
if(!((((data11 === "cooling") || (data11 === "heating")) || (data11 === "off")) || (data11 === null))){
const err29 = {instancePath:instancePath+"/hvacState",schemaPath:"#/properties/hvacState/enum",keyword:"enum",params:{allowedValues: schema181.properties.hvacState.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data.fanMode !== undefined){
let data12 = data.fanMode;
if(typeof data12 !== "string"){
const err30 = {instancePath:instancePath+"/fanMode",schemaPath:"#/properties/fanMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
if(!((((((data12 === "auto") || (data12 === "low")) || (data12 === "medium")) || (data12 === "high")) || (data12 === "off")) || (data12 === "on"))){
const err31 = {instancePath:instancePath+"/fanMode",schemaPath:"#/properties/supportedFanModes/items/enum",keyword:"enum",params:{allowedValues: schema190.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
if(data.fanState !== undefined){
let data13 = data.fanState;
if((typeof data13 !== "string") && (data13 !== null)){
const err32 = {instancePath:instancePath+"/fanState",schemaPath:"#/properties/fanState/type",keyword:"type",params:{type: schema181.properties.fanState.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
if(!((((((data13 === "off") || (data13 === "low")) || (data13 === "medium")) || (data13 === "high")) || (data13 === "on")) || (data13 === null))){
const err33 = {instancePath:instancePath+"/fanState",schemaPath:"#/properties/fanState/enum",keyword:"enum",params:{allowedValues: schema181.properties.fanState.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
let data14 = data.temperatureScale;
if(typeof data14 !== "string"){
const err34 = {instancePath:instancePath+"/temperatureScale",schemaPath:"#/properties/temperatureScale/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(!((data14 === "celsius") || (data14 === "fahrenheit"))){
const err35 = {instancePath:instancePath+"/temperatureScale",schemaPath:"#/properties/temperatureScale/enum",keyword:"enum",params:{allowedValues: schema181.properties.temperatureScale.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
if(data.humidityScale !== undefined){
let data15 = data.humidityScale;
if((typeof data15 !== "string") && (data15 !== null)){
const err36 = {instancePath:instancePath+"/humidityScale",schemaPath:"#/properties/humidityScale/type",keyword:"type",params:{type: schema181.properties.humidityScale.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
if(!(((data15 === "absolute") || (data15 === "relative")) || (data15 === null))){
const err37 = {instancePath:instancePath+"/humidityScale",schemaPath:"#/properties/humidityScale/enum",keyword:"enum",params:{allowedValues: schema181.properties.humidityScale.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
if(data.supportedHvacModes !== undefined){
let data16 = data.supportedHvacModes;
if(Array.isArray(data16)){
if(data16.length < 2){
const err38 = {instancePath:instancePath+"/supportedHvacModes",schemaPath:"#/properties/supportedHvacModes/minItems",keyword:"minItems",params:{limit: 2},message:"must NOT have fewer than 2 items"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
const len1 = data16.length;
for(let i2=0; i2<len1; i2++){
let data17 = data16[i2];
if(!((((data17 === "cool") || (data17 === "heat")) || (data17 === "auto")) || (data17 === "off"))){
const err39 = {instancePath:instancePath+"/supportedHvacModes/" + i2,schemaPath:"#/properties/supportedHvacModes/items/enum",keyword:"enum",params:{allowedValues: schema181.properties.supportedHvacModes.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
let i3 = data16.length;
let j1;
if(i3 > 1){
outer1:
for(;i3--;){
for(j1 = i3; j1--;){
if(func0(data16[i3], data16[j1])){
const err40 = {instancePath:instancePath+"/supportedHvacModes",schemaPath:"#/properties/supportedHvacModes/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
break outer1;
}
}
}
}
}
else {
const err41 = {instancePath:instancePath+"/supportedHvacModes",schemaPath:"#/properties/supportedHvacModes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data.supportedFanModes !== undefined){
let data18 = data.supportedFanModes;
if(Array.isArray(data18)){
const len2 = data18.length;
for(let i4=0; i4<len2; i4++){
let data19 = data18[i4];
if(!((((((data19 === "auto") || (data19 === "low")) || (data19 === "medium")) || (data19 === "high")) || (data19 === "off")) || (data19 === "on"))){
const err42 = {instancePath:instancePath+"/supportedFanModes/" + i4,schemaPath:"#/properties/supportedFanModes/items/enum",keyword:"enum",params:{allowedValues: schema181.properties.supportedFanModes.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
let i5 = data18.length;
let j2;
if(i5 > 1){
outer2:
for(;i5--;){
for(j2 = i5; j2--;){
if(func0(data18[i5], data18[j2])){
const err43 = {instancePath:instancePath+"/supportedFanModes",schemaPath:"#/properties/supportedFanModes/uniqueItems",keyword:"uniqueItems",params:{i: i5, j: j2},message:"must NOT have duplicate items (items ## "+j2+" and "+i5+" are identical)"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
break outer2;
}
}
}
}
}
else {
const err44 = {instancePath:instancePath+"/supportedFanModes",schemaPath:"#/properties/supportedFanModes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
if(data.setpoints !== undefined){
let data20 = data.setpoints;
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
for(const key0 in data20){
if(!(((key0 === "cool") || (key0 === "heat")) || (key0 === "auto"))){
const err45 = {instancePath:instancePath+"/setpoints",schemaPath:"#/properties/setpoints/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
if(data20.cool !== undefined){
if(!(validate74(data20.cool, {instancePath:instancePath+"/setpoints/cool",parentData:data20,parentDataProperty:"cool",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
if(data20.heat !== undefined){
if(!(validate74(data20.heat, {instancePath:instancePath+"/setpoints/heat",parentData:data20,parentDataProperty:"heat",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
if(data20.auto !== undefined){
if(!(validate74(data20.auto, {instancePath:instancePath+"/setpoints/auto",parentData:data20,parentDataProperty:"auto",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
}
}
else {
const err46 = {instancePath:instancePath+"/setpoints",schemaPath:"#/properties/setpoints/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
if(!(typeof data.minAutoDelta == "number")){
const err47 = {instancePath:instancePath+"/minAutoDelta",schemaPath:"#/properties/minAutoDelta/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
if(data.cycleRate !== undefined){
if(!(typeof data.cycleRate == "number")){
const err48 = {instancePath:instancePath+"/cycleRate",schemaPath:"#/properties/cycleRate/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
if(data.batteryLevel !== undefined){
let data26 = data.batteryLevel;
if(typeof data26 == "number"){
if(data26 > 100 || isNaN(data26)){
const err49 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
if(data26 < 0 || isNaN(data26)){
const err50 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
}
else {
const err51 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err52 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
if(data.watts !== undefined){
let data28 = data.watts;
if(typeof data28 == "number"){
if(data28 < 0 || isNaN(data28)){
const err53 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
else {
const err54 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
}
else {
const err55 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
validate71.errors = vErrors;
return errors === 0;
}

const schema111 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"lock.json","title":"Lock","description":"Any smart lock","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"$ref":"definitions.json#/definitions/type"},"offline":{"type":"boolean"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"state":{"type":["string","null"],"enum":["locked","unlocked",null]},"mode":{"type":["string","null"],"enum":["normal","autoLock","emergencyOpen","emergencyClose","holdOpen","lockdown",null],"description":"emergencyOpen and emergencyClose are deprecated and can be removed once Salto, Paxton and Geovision drivers are updated","default":null},"supportedModes":{"type":"array","uniqueItems":true,"items":{"enum":["normal","autoLock","emergencyOpen","emergencyClose","holdOpen","lockdown",null]}},"batteryLevel":{"$ref":"definitions.json#/definitions/batteryLevel"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"required":["id","type","state","driver"]};

function validate46(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate46.errors = vErrors;
return errors === 0;
}


function validate45(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="lock.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.mode === undefined){
data.mode = null;
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.state === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "state"},message:"must have required property '"+"state"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.driver === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.type !== undefined){
let data2 = data.type;
if(typeof data2 !== "string"){
const err8 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err9 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err10 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data4 = data.supportedNotifications;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
let data5 = data4[i0];
if(!((((((((((((((((((((((((((((data5 === "button 1") || (data5 === "button 2")) || (data5 === "button 3")) || (data5 === "button 4")) || (data5 === "button 5")) || (data5 === "idle")) || (data5 === "powerHasBeedApplied")) || (data5 === "acMainsDisconnected")) || (data5 === "acMainsReconnected")) || (data5 === "replaceBatterySoon")) || (data5 === "replaceBatteryNow")) || (data5 === "batteryOk")) || (data5 === "hardwareFailure")) || (data5 === "softwareFailure")) || (data5 === "hardwareFailureWithCode")) || (data5 === "softwareFailureWithCode")) || (data5 === "motionDetection")) || (data5 === "airFilterNeedsCleaned")) || (data5 === "airFilterNeedsReplaced")) || (data5 === "smokeDetected")) || (data5 === "outsideSafeTemperatureRange")) || (data5 === "outsideSafeHumidityRange")) || (data5 === "scheduleMaintenance")) || (data5 === "doorAjar")) || (data5 === "communicationFailure")) || (data5 === "communicationOk")) || (data5 === "burglarAlarm")) || (data5 === "fireAlarm"))){
const err11 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
let i1 = data4.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data4[i1], data4[j0])){
const err12 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err13 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate46(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data7 = data.driver;
if(typeof data7 !== "string"){
const err14 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data7 === "aws-kinesis") || (data7 === "butler")) || (data7 === "crestron")) || (data7 === "dell")) || (data7 === "dmp")) || (data7 === "doorbird")) || (data7 === "dormakaba")) || (data7 === "dsc")) || (data7 === "ecobee")) || (data7 === "epson")) || (data7 === "geovision-rs")) || (data7 === "geovision-as-manager")) || (data7 === "honeywell-vista")) || (data7 === "igor")) || (data7 === "inncom")) || (data7 === "isapi")) || (data7 === "kohost-k7")) || (data7 === "kohost")) || (data7 === "lg")) || (data7 === "lg-webos")) || (data7 === "lapi")) || (data7 === "lirc")) || (data7 === "mews")) || (data7 === "mht")) || (data7 === "paxton")) || (data7 === "pelican-wireless")) || (data7 === "power-shades")) || (data7 === "rachio")) || (data7 === "rebrandly")) || (data7 === "rtsp")) || (data7 === "salto")) || (data7 === "salto-irn")) || (data7 === "samsung")) || (data7 === "se")) || (data7 === "sendgrid")) || (data7 === "sonifi")) || (data7 === "stay-n-touch")) || (data7 === "storable")) || (data7 === "twilio")) || (data7 === "unifi")) || (data7 === "valcom")) || (data7 === "vizio")) || (data7 === "wisenet")) || (data7 === "cloudflare-images")) || (data7 === "cloudflare-stream")) || (data7 === "insperia-privacy"))){
const err15 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.state !== undefined){
let data8 = data.state;
if((typeof data8 !== "string") && (data8 !== null)){
const err16 = {instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: schema111.properties.state.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(!(((data8 === "locked") || (data8 === "unlocked")) || (data8 === null))){
const err17 = {instancePath:instancePath+"/state",schemaPath:"#/properties/state/enum",keyword:"enum",params:{allowedValues: schema111.properties.state.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
let data9 = data.mode;
if((typeof data9 !== "string") && (data9 !== null)){
const err18 = {instancePath:instancePath+"/mode",schemaPath:"#/properties/mode/type",keyword:"type",params:{type: schema111.properties.mode.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!(((((((data9 === "normal") || (data9 === "autoLock")) || (data9 === "emergencyOpen")) || (data9 === "emergencyClose")) || (data9 === "holdOpen")) || (data9 === "lockdown")) || (data9 === null))){
const err19 = {instancePath:instancePath+"/mode",schemaPath:"#/properties/mode/enum",keyword:"enum",params:{allowedValues: schema111.properties.mode.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(data.supportedModes !== undefined){
let data10 = data.supportedModes;
if(Array.isArray(data10)){
const len1 = data10.length;
for(let i2=0; i2<len1; i2++){
let data11 = data10[i2];
if(!(((((((data11 === "normal") || (data11 === "autoLock")) || (data11 === "emergencyOpen")) || (data11 === "emergencyClose")) || (data11 === "holdOpen")) || (data11 === "lockdown")) || (data11 === null))){
const err20 = {instancePath:instancePath+"/supportedModes/" + i2,schemaPath:"#/properties/supportedModes/items/enum",keyword:"enum",params:{allowedValues: schema111.properties.supportedModes.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
let i3 = data10.length;
let j1;
if(i3 > 1){
outer1:
for(;i3--;){
for(j1 = i3; j1--;){
if(func0(data10[i3], data10[j1])){
const err21 = {instancePath:instancePath+"/supportedModes",schemaPath:"#/properties/supportedModes/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
break outer1;
}
}
}
}
}
else {
const err22 = {instancePath:instancePath+"/supportedModes",schemaPath:"#/properties/supportedModes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.batteryLevel !== undefined){
let data12 = data.batteryLevel;
if(typeof data12 == "number"){
if(data12 > 100 || isNaN(data12)){
const err23 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(data12 < 0 || isNaN(data12)){
const err24 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
else {
const err25 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err26 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.watts !== undefined){
let data14 = data.watts;
if(typeof data14 == "number"){
if(data14 < 0 || isNaN(data14)){
const err27 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
else {
const err28 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
}
else {
const err29 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
validate45.errors = vErrors;
return errors === 0;
}

const schema198 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"windowCovering.json","title":"Window Covering","description":"Any smart window covering","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"$ref":"definitions.json#/definitions/type","default":"windowCovering"},"discriminator":{"type":"string","enum":["basic","variable"],"default":"variable"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"position":{"type":["number","null"],"minimum":0,"maximum":100},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"required":["id","type","position","driver"]};

function validate81(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate81.errors = vErrors;
return errors === 0;
}


function validate80(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="windowCovering.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "windowCovering";
}
if(data.discriminator === undefined){
data.discriminator = "variable";
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.position === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "position"},message:"must have required property '"+"position"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.driver === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
let data2 = data.type;
if(typeof data2 !== "string"){
const err8 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err9 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
let data3 = data.discriminator;
if(typeof data3 !== "string"){
const err10 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!((data3 === "basic") || (data3 === "variable"))){
const err11 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema198.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(data.supportedNotifications !== undefined){
let data4 = data.supportedNotifications;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
let data5 = data4[i0];
if(!((((((((((((((((((((((((((((data5 === "button 1") || (data5 === "button 2")) || (data5 === "button 3")) || (data5 === "button 4")) || (data5 === "button 5")) || (data5 === "idle")) || (data5 === "powerHasBeedApplied")) || (data5 === "acMainsDisconnected")) || (data5 === "acMainsReconnected")) || (data5 === "replaceBatterySoon")) || (data5 === "replaceBatteryNow")) || (data5 === "batteryOk")) || (data5 === "hardwareFailure")) || (data5 === "softwareFailure")) || (data5 === "hardwareFailureWithCode")) || (data5 === "softwareFailureWithCode")) || (data5 === "motionDetection")) || (data5 === "airFilterNeedsCleaned")) || (data5 === "airFilterNeedsReplaced")) || (data5 === "smokeDetected")) || (data5 === "outsideSafeTemperatureRange")) || (data5 === "outsideSafeHumidityRange")) || (data5 === "scheduleMaintenance")) || (data5 === "doorAjar")) || (data5 === "communicationFailure")) || (data5 === "communicationOk")) || (data5 === "burglarAlarm")) || (data5 === "fireAlarm"))){
const err12 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
let i1 = data4.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data4[i1], data4[j0])){
const err13 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err14 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate81(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data7 = data.driver;
if(typeof data7 !== "string"){
const err15 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data7 === "aws-kinesis") || (data7 === "butler")) || (data7 === "crestron")) || (data7 === "dell")) || (data7 === "dmp")) || (data7 === "doorbird")) || (data7 === "dormakaba")) || (data7 === "dsc")) || (data7 === "ecobee")) || (data7 === "epson")) || (data7 === "geovision-rs")) || (data7 === "geovision-as-manager")) || (data7 === "honeywell-vista")) || (data7 === "igor")) || (data7 === "inncom")) || (data7 === "isapi")) || (data7 === "kohost-k7")) || (data7 === "kohost")) || (data7 === "lg")) || (data7 === "lg-webos")) || (data7 === "lapi")) || (data7 === "lirc")) || (data7 === "mews")) || (data7 === "mht")) || (data7 === "paxton")) || (data7 === "pelican-wireless")) || (data7 === "power-shades")) || (data7 === "rachio")) || (data7 === "rebrandly")) || (data7 === "rtsp")) || (data7 === "salto")) || (data7 === "salto-irn")) || (data7 === "samsung")) || (data7 === "se")) || (data7 === "sendgrid")) || (data7 === "sonifi")) || (data7 === "stay-n-touch")) || (data7 === "storable")) || (data7 === "twilio")) || (data7 === "unifi")) || (data7 === "valcom")) || (data7 === "vizio")) || (data7 === "wisenet")) || (data7 === "cloudflare-images")) || (data7 === "cloudflare-stream")) || (data7 === "insperia-privacy"))){
const err16 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err17 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.position !== undefined){
let data9 = data.position;
if((!(typeof data9 == "number")) && (data9 !== null)){
const err18 = {instancePath:instancePath+"/position",schemaPath:"#/properties/position/type",keyword:"type",params:{type: schema198.properties.position.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(typeof data9 == "number"){
if(data9 > 100 || isNaN(data9)){
const err19 = {instancePath:instancePath+"/position",schemaPath:"#/properties/position/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(data9 < 0 || isNaN(data9)){
const err20 = {instancePath:instancePath+"/position",schemaPath:"#/properties/position/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err21 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
if(data.watts !== undefined){
let data11 = data.watts;
if(typeof data11 == "number"){
if(data11 < 0 || isNaN(data11)){
const err22 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
else {
const err23 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
}
else {
const err24 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
validate80.errors = vErrors;
return errors === 0;
}

const schema43 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"courtesy.json","title":"Courtesy","description":"Any smart courtesy system","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"$ref":"definitions.json#/definitions/type"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"supportedStates":{"type":"array","uniqueItems":true,"items":{"enum":["privacy","service","none"]}},"state":{"type":"string","$ref":"#/properties/supportedStates/items"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"required":["id","type","driver","supportedStates","state"]};
const schema50 = {"enum":["privacy","service","none"]};

function validate23(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate23.errors = vErrors;
return errors === 0;
}


function validate22(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="courtesy.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.driver === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.supportedStates === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "supportedStates"},message:"must have required property '"+"supportedStates"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.state === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "state"},message:"must have required property '"+"state"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err5 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err7 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err8 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.type !== undefined){
let data2 = data.type;
if(typeof data2 !== "string"){
const err9 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err10 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data3 = data.supportedNotifications;
if(Array.isArray(data3)){
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
let data4 = data3[i0];
if(!((((((((((((((((((((((((((((data4 === "button 1") || (data4 === "button 2")) || (data4 === "button 3")) || (data4 === "button 4")) || (data4 === "button 5")) || (data4 === "idle")) || (data4 === "powerHasBeedApplied")) || (data4 === "acMainsDisconnected")) || (data4 === "acMainsReconnected")) || (data4 === "replaceBatterySoon")) || (data4 === "replaceBatteryNow")) || (data4 === "batteryOk")) || (data4 === "hardwareFailure")) || (data4 === "softwareFailure")) || (data4 === "hardwareFailureWithCode")) || (data4 === "softwareFailureWithCode")) || (data4 === "motionDetection")) || (data4 === "airFilterNeedsCleaned")) || (data4 === "airFilterNeedsReplaced")) || (data4 === "smokeDetected")) || (data4 === "outsideSafeTemperatureRange")) || (data4 === "outsideSafeHumidityRange")) || (data4 === "scheduleMaintenance")) || (data4 === "doorAjar")) || (data4 === "communicationFailure")) || (data4 === "communicationOk")) || (data4 === "burglarAlarm")) || (data4 === "fireAlarm"))){
const err11 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
let i1 = data3.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data3[i1], data3[j0])){
const err12 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err13 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate23(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data6 = data.driver;
if(typeof data6 !== "string"){
const err14 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data6 === "aws-kinesis") || (data6 === "butler")) || (data6 === "crestron")) || (data6 === "dell")) || (data6 === "dmp")) || (data6 === "doorbird")) || (data6 === "dormakaba")) || (data6 === "dsc")) || (data6 === "ecobee")) || (data6 === "epson")) || (data6 === "geovision-rs")) || (data6 === "geovision-as-manager")) || (data6 === "honeywell-vista")) || (data6 === "igor")) || (data6 === "inncom")) || (data6 === "isapi")) || (data6 === "kohost-k7")) || (data6 === "kohost")) || (data6 === "lg")) || (data6 === "lg-webos")) || (data6 === "lapi")) || (data6 === "lirc")) || (data6 === "mews")) || (data6 === "mht")) || (data6 === "paxton")) || (data6 === "pelican-wireless")) || (data6 === "power-shades")) || (data6 === "rachio")) || (data6 === "rebrandly")) || (data6 === "rtsp")) || (data6 === "salto")) || (data6 === "salto-irn")) || (data6 === "samsung")) || (data6 === "se")) || (data6 === "sendgrid")) || (data6 === "sonifi")) || (data6 === "stay-n-touch")) || (data6 === "storable")) || (data6 === "twilio")) || (data6 === "unifi")) || (data6 === "valcom")) || (data6 === "vizio")) || (data6 === "wisenet")) || (data6 === "cloudflare-images")) || (data6 === "cloudflare-stream")) || (data6 === "insperia-privacy"))){
const err15 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err16 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.supportedStates !== undefined){
let data8 = data.supportedStates;
if(Array.isArray(data8)){
const len1 = data8.length;
for(let i2=0; i2<len1; i2++){
let data9 = data8[i2];
if(!(((data9 === "privacy") || (data9 === "service")) || (data9 === "none"))){
const err17 = {instancePath:instancePath+"/supportedStates/" + i2,schemaPath:"#/properties/supportedStates/items/enum",keyword:"enum",params:{allowedValues: schema43.properties.supportedStates.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
let i3 = data8.length;
let j1;
if(i3 > 1){
outer1:
for(;i3--;){
for(j1 = i3; j1--;){
if(func0(data8[i3], data8[j1])){
const err18 = {instancePath:instancePath+"/supportedStates",schemaPath:"#/properties/supportedStates/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
break outer1;
}
}
}
}
}
else {
const err19 = {instancePath:instancePath+"/supportedStates",schemaPath:"#/properties/supportedStates/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.state !== undefined){
let data10 = data.state;
if(typeof data10 !== "string"){
const err20 = {instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
if(!(((data10 === "privacy") || (data10 === "service")) || (data10 === "none"))){
const err21 = {instancePath:instancePath+"/state",schemaPath:"#/properties/supportedStates/items/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err22 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.watts !== undefined){
let data12 = data.watts;
if(typeof data12 == "number"){
if(data12 < 0 || isNaN(data12)){
const err23 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
else {
const err24 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
else {
const err25 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
validate22.errors = vErrors;
return errors === 0;
}

const schema30 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"camera.json","title":"Camera","description":"Any smart camera","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"$ref":"definitions.json#/definitions/type","default":"camera"},"offline":{"type":"boolean"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"liveStreams":{"type":"object","additionalProperties":false,"$comment":"This is now deprecated. Use liveStream instead. This will remain here for backwards compatibility.","properties":{"iframe":{"type":["string","null"]},"hls":{"type":["string","null"]},"webRTC":{"type":["string","null"]},"rtsp":{"type":["string","null"]}}},"liveStream":{"type":"object","additionalProperties":false,"properties":{"id":{"type":"string"},"driver":{"type":"string","enum":["cloudflare-stream","aws-kinesis","digital-watchdog"]},"allowedOrigins":{"type":"array","items":{"type":"string"}},"authRequired":{"type":"boolean"},"iframe":{"type":["string","null"]},"hls":{"type":["string","null"]},"webRTC":{"type":["string","null"]},"rtsp":{"type":["string","null"],"description":"Local RTSP stream URL","examples":["rtsp://192.168.1.4:544/channels/1","rtsp://10.145.6.129:8554/unicast"]},"previewImage":{"type":["string","null"],"description":"Source to preview the camera stream","examples":["https://example.com/preview.jpg","data:image/jpegbase64,/9j/4AAQSkZJRgABAQEAYABgAAD/4QBYRXhpZgAATU0AKgAAAAgAA1EQAAEAAAABAQAAAFERAAQAAAABAAABAgABAA"]}}},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"additionalProperties":false,"required":["id","type","driver"]};

function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate18.errors = vErrors;
return errors === 0;
}


function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="camera.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "camera";
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.driver === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema30.properties, key0))){
const err3 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
let data2 = data.type;
if(typeof data2 !== "string"){
const err8 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err9 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err10 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data4 = data.supportedNotifications;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
let data5 = data4[i0];
if(!((((((((((((((((((((((((((((data5 === "button 1") || (data5 === "button 2")) || (data5 === "button 3")) || (data5 === "button 4")) || (data5 === "button 5")) || (data5 === "idle")) || (data5 === "powerHasBeedApplied")) || (data5 === "acMainsDisconnected")) || (data5 === "acMainsReconnected")) || (data5 === "replaceBatterySoon")) || (data5 === "replaceBatteryNow")) || (data5 === "batteryOk")) || (data5 === "hardwareFailure")) || (data5 === "softwareFailure")) || (data5 === "hardwareFailureWithCode")) || (data5 === "softwareFailureWithCode")) || (data5 === "motionDetection")) || (data5 === "airFilterNeedsCleaned")) || (data5 === "airFilterNeedsReplaced")) || (data5 === "smokeDetected")) || (data5 === "outsideSafeTemperatureRange")) || (data5 === "outsideSafeHumidityRange")) || (data5 === "scheduleMaintenance")) || (data5 === "doorAjar")) || (data5 === "communicationFailure")) || (data5 === "communicationOk")) || (data5 === "burglarAlarm")) || (data5 === "fireAlarm"))){
const err11 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
let i1 = data4.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data4[i1], data4[j0])){
const err12 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err13 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate18(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data7 = data.driver;
if(typeof data7 !== "string"){
const err14 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data7 === "aws-kinesis") || (data7 === "butler")) || (data7 === "crestron")) || (data7 === "dell")) || (data7 === "dmp")) || (data7 === "doorbird")) || (data7 === "dormakaba")) || (data7 === "dsc")) || (data7 === "ecobee")) || (data7 === "epson")) || (data7 === "geovision-rs")) || (data7 === "geovision-as-manager")) || (data7 === "honeywell-vista")) || (data7 === "igor")) || (data7 === "inncom")) || (data7 === "isapi")) || (data7 === "kohost-k7")) || (data7 === "kohost")) || (data7 === "lg")) || (data7 === "lg-webos")) || (data7 === "lapi")) || (data7 === "lirc")) || (data7 === "mews")) || (data7 === "mht")) || (data7 === "paxton")) || (data7 === "pelican-wireless")) || (data7 === "power-shades")) || (data7 === "rachio")) || (data7 === "rebrandly")) || (data7 === "rtsp")) || (data7 === "salto")) || (data7 === "salto-irn")) || (data7 === "samsung")) || (data7 === "se")) || (data7 === "sendgrid")) || (data7 === "sonifi")) || (data7 === "stay-n-touch")) || (data7 === "storable")) || (data7 === "twilio")) || (data7 === "unifi")) || (data7 === "valcom")) || (data7 === "vizio")) || (data7 === "wisenet")) || (data7 === "cloudflare-images")) || (data7 === "cloudflare-stream")) || (data7 === "insperia-privacy"))){
const err15 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.liveStreams !== undefined){
let data8 = data.liveStreams;
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
for(const key1 in data8){
if(!((((key1 === "iframe") || (key1 === "hls")) || (key1 === "webRTC")) || (key1 === "rtsp"))){
const err16 = {instancePath:instancePath+"/liveStreams",schemaPath:"#/properties/liveStreams/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data8.iframe !== undefined){
let data9 = data8.iframe;
if((typeof data9 !== "string") && (data9 !== null)){
const err17 = {instancePath:instancePath+"/liveStreams/iframe",schemaPath:"#/properties/liveStreams/properties/iframe/type",keyword:"type",params:{type: schema30.properties.liveStreams.properties.iframe.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data8.hls !== undefined){
let data10 = data8.hls;
if((typeof data10 !== "string") && (data10 !== null)){
const err18 = {instancePath:instancePath+"/liveStreams/hls",schemaPath:"#/properties/liveStreams/properties/hls/type",keyword:"type",params:{type: schema30.properties.liveStreams.properties.hls.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data8.webRTC !== undefined){
let data11 = data8.webRTC;
if((typeof data11 !== "string") && (data11 !== null)){
const err19 = {instancePath:instancePath+"/liveStreams/webRTC",schemaPath:"#/properties/liveStreams/properties/webRTC/type",keyword:"type",params:{type: schema30.properties.liveStreams.properties.webRTC.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data8.rtsp !== undefined){
let data12 = data8.rtsp;
if((typeof data12 !== "string") && (data12 !== null)){
const err20 = {instancePath:instancePath+"/liveStreams/rtsp",schemaPath:"#/properties/liveStreams/properties/rtsp/type",keyword:"type",params:{type: schema30.properties.liveStreams.properties.rtsp.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
else {
const err21 = {instancePath:instancePath+"/liveStreams",schemaPath:"#/properties/liveStreams/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
if(data.liveStream !== undefined){
let data13 = data.liveStream;
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
for(const key2 in data13){
if(!(func5.call(schema30.properties.liveStream.properties, key2))){
const err22 = {instancePath:instancePath+"/liveStream",schemaPath:"#/properties/liveStream/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data13.id !== undefined){
if(typeof data13.id !== "string"){
const err23 = {instancePath:instancePath+"/liveStream/id",schemaPath:"#/properties/liveStream/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
if(data13.driver !== undefined){
let data15 = data13.driver;
if(typeof data15 !== "string"){
const err24 = {instancePath:instancePath+"/liveStream/driver",schemaPath:"#/properties/liveStream/properties/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(!(((data15 === "cloudflare-stream") || (data15 === "aws-kinesis")) || (data15 === "digital-watchdog"))){
const err25 = {instancePath:instancePath+"/liveStream/driver",schemaPath:"#/properties/liveStream/properties/driver/enum",keyword:"enum",params:{allowedValues: schema30.properties.liveStream.properties.driver.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data13.allowedOrigins !== undefined){
let data16 = data13.allowedOrigins;
if(Array.isArray(data16)){
const len1 = data16.length;
for(let i2=0; i2<len1; i2++){
if(typeof data16[i2] !== "string"){
const err26 = {instancePath:instancePath+"/liveStream/allowedOrigins/" + i2,schemaPath:"#/properties/liveStream/properties/allowedOrigins/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath:instancePath+"/liveStream/allowedOrigins",schemaPath:"#/properties/liveStream/properties/allowedOrigins/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data13.authRequired !== undefined){
if(typeof data13.authRequired !== "boolean"){
const err28 = {instancePath:instancePath+"/liveStream/authRequired",schemaPath:"#/properties/liveStream/properties/authRequired/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data13.iframe !== undefined){
let data19 = data13.iframe;
if((typeof data19 !== "string") && (data19 !== null)){
const err29 = {instancePath:instancePath+"/liveStream/iframe",schemaPath:"#/properties/liveStream/properties/iframe/type",keyword:"type",params:{type: schema30.properties.liveStream.properties.iframe.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data13.hls !== undefined){
let data20 = data13.hls;
if((typeof data20 !== "string") && (data20 !== null)){
const err30 = {instancePath:instancePath+"/liveStream/hls",schemaPath:"#/properties/liveStream/properties/hls/type",keyword:"type",params:{type: schema30.properties.liveStream.properties.hls.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
if(data13.webRTC !== undefined){
let data21 = data13.webRTC;
if((typeof data21 !== "string") && (data21 !== null)){
const err31 = {instancePath:instancePath+"/liveStream/webRTC",schemaPath:"#/properties/liveStream/properties/webRTC/type",keyword:"type",params:{type: schema30.properties.liveStream.properties.webRTC.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
if(data13.rtsp !== undefined){
let data22 = data13.rtsp;
if((typeof data22 !== "string") && (data22 !== null)){
const err32 = {instancePath:instancePath+"/liveStream/rtsp",schemaPath:"#/properties/liveStream/properties/rtsp/type",keyword:"type",params:{type: schema30.properties.liveStream.properties.rtsp.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
if(data13.previewImage !== undefined){
let data23 = data13.previewImage;
if((typeof data23 !== "string") && (data23 !== null)){
const err33 = {instancePath:instancePath+"/liveStream/previewImage",schemaPath:"#/properties/liveStream/properties/previewImage/type",keyword:"type",params:{type: schema30.properties.liveStream.properties.previewImage.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
}
else {
const err34 = {instancePath:instancePath+"/liveStream",schemaPath:"#/properties/liveStream/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err35 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
if(data.watts !== undefined){
let data25 = data.watts;
if(typeof data25 == "number"){
if(data25 < 0 || isNaN(data25)){
const err36 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
else {
const err37 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
}
else {
const err38 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
validate17.errors = vErrors;
return errors === 0;
}

const schema121 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"mediaSource.json","title":"Media Source","description":"Any media source","type":"object","required":["id","type","discriminator","audio","video","driver"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"mediaSource","enum":["mediaSource"]},"discriminator":{"type":"string","enum":["tv","dvr","appleTv","discPlayer","mediaPlayer","paSystem","uncontrolledDevice"]},"playlists":{"type":"array","items":{"type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"$ref":"definitions.json#/definitions/name"}}}},"remote":{"type":"string","enum":["MR22GA","XRT260","XRT270","HOF-16K 1.2","219863500","SONIFI","AKB76039803","BN59-01388A"]},"name":{"$ref":"definitions.json#/definitions/name"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"audio":{"type":"boolean"},"video":{"type":"boolean"},"powerFeedback":{"type":"boolean"},"volumeFeedback":{"type":"boolean"},"muted":{"type":"boolean"},"volume":{"type":"number","minimum":0,"maximum":100},"brightness":{"type":"number","minimum":0,"maximum":100},"contrast":{"type":"number","minimum":0,"maximum":100},"power":{"type":"string","enum":["on","off"]},"input":{"type":"string"},"supportedInputs":{"type":"array","items":{"type":"string"}},"supportedOutputs":{"type":"array","items":{"type":"string"}},"command":{"type":["string","null"],"enum":["mute","volumeUp","volumeDown","brightnessUp","brightnessDown","channelUp","channelDown","number0","number1","number2","number3","number4","number5","number6","number7","number8","number9","lastChannel","display","favoriteChannel","play","playing","stop","stopped","pause","paused","fastForward","fastForwarding","rewind","rewinding","instantReplay","record","ac3","pvrMenu","guide","menu","menuUp","menuDown","menuLeft","menuRight","pageUp","pageDown","select","exit","input","power","enterChannel","enterVolume","enterBrightness","enterContrast","number10","number11","number12","number13","number14","number15","number16","number10Plus","number20Plus","number100","dash","threeChan","threeD","sixChan","a","add","alarm","am","analog","angle","antenna","antennaEast","antennaWest","aspect","audio1","audio2","audio3","audioDumming","audioLevelDown","audioLevelUp","b","back","c","component1","component2","component3","d","home","list","liveTv","discreteInputCable","powerOff","powerOn","setupMenu","skipForward","skipReverse","video1","video2","video3","video4","video5","details","hdmi1","hdmi2","hdmi3","cecDeviceList","mtsSap","red","green","yellow","blue","alert","order"]},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"additionalProperties":false};

function validate49(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate49.errors = vErrors;
return errors === 0;
}


function validate48(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="mediaSource.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "mediaSource";
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.discriminator === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "discriminator"},message:"must have required property '"+"discriminator"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.audio === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "audio"},message:"must have required property '"+"audio"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.video === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "video"},message:"must have required property '"+"video"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.driver === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema121.properties, key0))){
const err6 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err7 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err8 = {};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err9 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err10 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!(data1 === "mediaSource")){
const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema121.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(data.discriminator !== undefined){
let data2 = data.discriminator;
if(typeof data2 !== "string"){
const err12 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!(((((((data2 === "tv") || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "paSystem")) || (data2 === "uncontrolledDevice"))){
const err13 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema121.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.playlists !== undefined){
let data3 = data.playlists;
if(Array.isArray(data3)){
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
let data4 = data3[i0];
if(data4 && typeof data4 == "object" && !Array.isArray(data4)){
if(data4.id !== undefined){
let data5 = data4.id;
if(typeof data5 !== "string"){
const err14 = {instancePath:instancePath+"/playlists/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
const _errs18 = errors;
const _errs19 = errors;
if(!((data5 === "global") || (data5 === "system"))){
const err15 = {};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
var valid7 = _errs19 === errors;
if(valid7){
const err16 = {instancePath:instancePath+"/playlists/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
else {
errors = _errs18;
if(vErrors !== null){
if(_errs18){
vErrors.length = _errs18;
}
else {
vErrors = null;
}
}
}
}
if(data4.name !== undefined){
if(typeof data4.name !== "string"){
const err17 = {instancePath:instancePath+"/playlists/" + i0+"/name",schemaPath:"definitions.json#/definitions/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
}
else {
const err18 = {instancePath:instancePath+"/playlists/" + i0,schemaPath:"#/properties/playlists/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
else {
const err19 = {instancePath:instancePath+"/playlists",schemaPath:"#/properties/playlists/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.remote !== undefined){
let data7 = data.remote;
if(typeof data7 !== "string"){
const err20 = {instancePath:instancePath+"/remote",schemaPath:"#/properties/remote/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
if(!((((((((data7 === "MR22GA") || (data7 === "XRT260")) || (data7 === "XRT270")) || (data7 === "HOF-16K 1.2")) || (data7 === "219863500")) || (data7 === "SONIFI")) || (data7 === "AKB76039803")) || (data7 === "BN59-01388A"))){
const err21 = {instancePath:instancePath+"/remote",schemaPath:"#/properties/remote/enum",keyword:"enum",params:{allowedValues: schema121.properties.remote.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err22 = {instancePath:instancePath+"/name",schemaPath:"definitions.json#/definitions/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.driver !== undefined){
let data9 = data.driver;
if(typeof data9 !== "string"){
const err23 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data9 === "aws-kinesis") || (data9 === "butler")) || (data9 === "crestron")) || (data9 === "dell")) || (data9 === "dmp")) || (data9 === "doorbird")) || (data9 === "dormakaba")) || (data9 === "dsc")) || (data9 === "ecobee")) || (data9 === "epson")) || (data9 === "geovision-rs")) || (data9 === "geovision-as-manager")) || (data9 === "honeywell-vista")) || (data9 === "igor")) || (data9 === "inncom")) || (data9 === "isapi")) || (data9 === "kohost-k7")) || (data9 === "kohost")) || (data9 === "lg")) || (data9 === "lg-webos")) || (data9 === "lapi")) || (data9 === "lirc")) || (data9 === "mews")) || (data9 === "mht")) || (data9 === "paxton")) || (data9 === "pelican-wireless")) || (data9 === "power-shades")) || (data9 === "rachio")) || (data9 === "rebrandly")) || (data9 === "rtsp")) || (data9 === "salto")) || (data9 === "salto-irn")) || (data9 === "samsung")) || (data9 === "se")) || (data9 === "sendgrid")) || (data9 === "sonifi")) || (data9 === "stay-n-touch")) || (data9 === "storable")) || (data9 === "twilio")) || (data9 === "unifi")) || (data9 === "valcom")) || (data9 === "vizio")) || (data9 === "wisenet")) || (data9 === "cloudflare-images")) || (data9 === "cloudflare-stream")) || (data9 === "insperia-privacy"))){
const err24 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err25 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.audio !== undefined){
if(typeof data.audio !== "boolean"){
const err26 = {instancePath:instancePath+"/audio",schemaPath:"#/properties/audio/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.video !== undefined){
if(typeof data.video !== "boolean"){
const err27 = {instancePath:instancePath+"/video",schemaPath:"#/properties/video/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data.powerFeedback !== undefined){
if(typeof data.powerFeedback !== "boolean"){
const err28 = {instancePath:instancePath+"/powerFeedback",schemaPath:"#/properties/powerFeedback/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data.volumeFeedback !== undefined){
if(typeof data.volumeFeedback !== "boolean"){
const err29 = {instancePath:instancePath+"/volumeFeedback",schemaPath:"#/properties/volumeFeedback/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data.muted !== undefined){
if(typeof data.muted !== "boolean"){
const err30 = {instancePath:instancePath+"/muted",schemaPath:"#/properties/muted/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
if(data.volume !== undefined){
let data16 = data.volume;
if(typeof data16 == "number"){
if(data16 > 100 || isNaN(data16)){
const err31 = {instancePath:instancePath+"/volume",schemaPath:"#/properties/volume/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
if(data16 < 0 || isNaN(data16)){
const err32 = {instancePath:instancePath+"/volume",schemaPath:"#/properties/volume/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
else {
const err33 = {instancePath:instancePath+"/volume",schemaPath:"#/properties/volume/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data.brightness !== undefined){
let data17 = data.brightness;
if(typeof data17 == "number"){
if(data17 > 100 || isNaN(data17)){
const err34 = {instancePath:instancePath+"/brightness",schemaPath:"#/properties/brightness/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(data17 < 0 || isNaN(data17)){
const err35 = {instancePath:instancePath+"/brightness",schemaPath:"#/properties/brightness/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
else {
const err36 = {instancePath:instancePath+"/brightness",schemaPath:"#/properties/brightness/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
if(data.contrast !== undefined){
let data18 = data.contrast;
if(typeof data18 == "number"){
if(data18 > 100 || isNaN(data18)){
const err37 = {instancePath:instancePath+"/contrast",schemaPath:"#/properties/contrast/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
if(data18 < 0 || isNaN(data18)){
const err38 = {instancePath:instancePath+"/contrast",schemaPath:"#/properties/contrast/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
else {
const err39 = {instancePath:instancePath+"/contrast",schemaPath:"#/properties/contrast/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
if(data.power !== undefined){
let data19 = data.power;
if(typeof data19 !== "string"){
const err40 = {instancePath:instancePath+"/power",schemaPath:"#/properties/power/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
if(!((data19 === "on") || (data19 === "off"))){
const err41 = {instancePath:instancePath+"/power",schemaPath:"#/properties/power/enum",keyword:"enum",params:{allowedValues: schema121.properties.power.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data.input !== undefined){
if(typeof data.input !== "string"){
const err42 = {instancePath:instancePath+"/input",schemaPath:"#/properties/input/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
if(data.supportedInputs !== undefined){
let data21 = data.supportedInputs;
if(Array.isArray(data21)){
const len1 = data21.length;
for(let i1=0; i1<len1; i1++){
if(typeof data21[i1] !== "string"){
const err43 = {instancePath:instancePath+"/supportedInputs/" + i1,schemaPath:"#/properties/supportedInputs/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
}
else {
const err44 = {instancePath:instancePath+"/supportedInputs",schemaPath:"#/properties/supportedInputs/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
if(data.supportedOutputs !== undefined){
let data23 = data.supportedOutputs;
if(Array.isArray(data23)){
const len2 = data23.length;
for(let i2=0; i2<len2; i2++){
if(typeof data23[i2] !== "string"){
const err45 = {instancePath:instancePath+"/supportedOutputs/" + i2,schemaPath:"#/properties/supportedOutputs/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
}
else {
const err46 = {instancePath:instancePath+"/supportedOutputs",schemaPath:"#/properties/supportedOutputs/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
if(data.command !== undefined){
let data25 = data.command;
if((typeof data25 !== "string") && (data25 !== null)){
const err47 = {instancePath:instancePath+"/command",schemaPath:"#/properties/command/type",keyword:"type",params:{type: schema121.properties.command.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
if(!(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data25 === "mute") || (data25 === "volumeUp")) || (data25 === "volumeDown")) || (data25 === "brightnessUp")) || (data25 === "brightnessDown")) || (data25 === "channelUp")) || (data25 === "channelDown")) || (data25 === "number0")) || (data25 === "number1")) || (data25 === "number2")) || (data25 === "number3")) || (data25 === "number4")) || (data25 === "number5")) || (data25 === "number6")) || (data25 === "number7")) || (data25 === "number8")) || (data25 === "number9")) || (data25 === "lastChannel")) || (data25 === "display")) || (data25 === "favoriteChannel")) || (data25 === "play")) || (data25 === "playing")) || (data25 === "stop")) || (data25 === "stopped")) || (data25 === "pause")) || (data25 === "paused")) || (data25 === "fastForward")) || (data25 === "fastForwarding")) || (data25 === "rewind")) || (data25 === "rewinding")) || (data25 === "instantReplay")) || (data25 === "record")) || (data25 === "ac3")) || (data25 === "pvrMenu")) || (data25 === "guide")) || (data25 === "menu")) || (data25 === "menuUp")) || (data25 === "menuDown")) || (data25 === "menuLeft")) || (data25 === "menuRight")) || (data25 === "pageUp")) || (data25 === "pageDown")) || (data25 === "select")) || (data25 === "exit")) || (data25 === "input")) || (data25 === "power")) || (data25 === "enterChannel")) || (data25 === "enterVolume")) || (data25 === "enterBrightness")) || (data25 === "enterContrast")) || (data25 === "number10")) || (data25 === "number11")) || (data25 === "number12")) || (data25 === "number13")) || (data25 === "number14")) || (data25 === "number15")) || (data25 === "number16")) || (data25 === "number10Plus")) || (data25 === "number20Plus")) || (data25 === "number100")) || (data25 === "dash")) || (data25 === "threeChan")) || (data25 === "threeD")) || (data25 === "sixChan")) || (data25 === "a")) || (data25 === "add")) || (data25 === "alarm")) || (data25 === "am")) || (data25 === "analog")) || (data25 === "angle")) || (data25 === "antenna")) || (data25 === "antennaEast")) || (data25 === "antennaWest")) || (data25 === "aspect")) || (data25 === "audio1")) || (data25 === "audio2")) || (data25 === "audio3")) || (data25 === "audioDumming")) || (data25 === "audioLevelDown")) || (data25 === "audioLevelUp")) || (data25 === "b")) || (data25 === "back")) || (data25 === "c")) || (data25 === "component1")) || (data25 === "component2")) || (data25 === "component3")) || (data25 === "d")) || (data25 === "home")) || (data25 === "list")) || (data25 === "liveTv")) || (data25 === "discreteInputCable")) || (data25 === "powerOff")) || (data25 === "powerOn")) || (data25 === "setupMenu")) || (data25 === "skipForward")) || (data25 === "skipReverse")) || (data25 === "video1")) || (data25 === "video2")) || (data25 === "video3")) || (data25 === "video4")) || (data25 === "video5")) || (data25 === "details")) || (data25 === "hdmi1")) || (data25 === "hdmi2")) || (data25 === "hdmi3")) || (data25 === "cecDeviceList")) || (data25 === "mtsSap")) || (data25 === "red")) || (data25 === "green")) || (data25 === "yellow")) || (data25 === "blue")) || (data25 === "alert")) || (data25 === "order"))){
const err48 = {instancePath:instancePath+"/command",schemaPath:"#/properties/command/enum",keyword:"enum",params:{allowedValues: schema121.properties.command.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data26 = data.supportedNotifications;
if(Array.isArray(data26)){
const len3 = data26.length;
for(let i3=0; i3<len3; i3++){
let data27 = data26[i3];
if(!((((((((((((((((((((((((((((data27 === "button 1") || (data27 === "button 2")) || (data27 === "button 3")) || (data27 === "button 4")) || (data27 === "button 5")) || (data27 === "idle")) || (data27 === "powerHasBeedApplied")) || (data27 === "acMainsDisconnected")) || (data27 === "acMainsReconnected")) || (data27 === "replaceBatterySoon")) || (data27 === "replaceBatteryNow")) || (data27 === "batteryOk")) || (data27 === "hardwareFailure")) || (data27 === "softwareFailure")) || (data27 === "hardwareFailureWithCode")) || (data27 === "softwareFailureWithCode")) || (data27 === "motionDetection")) || (data27 === "airFilterNeedsCleaned")) || (data27 === "airFilterNeedsReplaced")) || (data27 === "smokeDetected")) || (data27 === "outsideSafeTemperatureRange")) || (data27 === "outsideSafeHumidityRange")) || (data27 === "scheduleMaintenance")) || (data27 === "doorAjar")) || (data27 === "communicationFailure")) || (data27 === "communicationOk")) || (data27 === "burglarAlarm")) || (data27 === "fireAlarm"))){
const err49 = {instancePath:instancePath+"/supportedNotifications/" + i3,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
let i4 = data26.length;
let j0;
if(i4 > 1){
outer0:
for(;i4--;){
for(j0 = i4; j0--;){
if(func0(data26[i4], data26[j0])){
const err50 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i4, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i4+" are identical)"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err51 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate49(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate49.errors : vErrors.concat(validate49.errors);
errors = vErrors.length;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err52 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
if(data.watts !== undefined){
let data30 = data.watts;
if(typeof data30 == "number"){
if(data30 < 0 || isNaN(data30)){
const err53 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
else {
const err54 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
}
else {
const err55 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
validate48.errors = vErrors;
return errors === 0;
}

const schema132 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"motionSensor.json","title":"Motion Sensor","description":"Any smart motion sensor","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"$ref":"definitions.json#/definitions/type"},"driver":{"$ref":"definitions.json#/definitions/driver"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"additionalProperties":false,"required":["id","type","driver"]};

function validate52(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate52.errors = vErrors;
return errors === 0;
}


function validate51(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="motionSensor.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.driver === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "type")) || (key0 === "driver")) || (key0 === "systemId")) || (key0 === "supportedNotifications")) || (key0 === "notification")) || (key0 === "watts"))){
const err3 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
if(data.type !== undefined){
let data1 = data.type;
if(typeof data1 !== "string"){
const err7 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!(((((((((((((((((data1 === "alarm") || (data1 === "dimmer")) || (data1 === "switch")) || (data1 === "motionSensor")) || (data1 === "windowCovering")) || (data1 === "camera")) || (data1 === "mediaSource")) || (data1 === "thermostat")) || (data1 === "lock")) || (data1 === "courtesy")) || (data1 === "gateway")) || (data1 === "tv")) || (data1 === "dvr")) || (data1 === "appleTv")) || (data1 === "discPlayer")) || (data1 === "mediaPlayer")) || (data1 === "uncontrolledDevice"))){
const err8 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.driver !== undefined){
let data2 = data.driver;
if(typeof data2 !== "string"){
const err9 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data2 === "aws-kinesis") || (data2 === "butler")) || (data2 === "crestron")) || (data2 === "dell")) || (data2 === "dmp")) || (data2 === "doorbird")) || (data2 === "dormakaba")) || (data2 === "dsc")) || (data2 === "ecobee")) || (data2 === "epson")) || (data2 === "geovision-rs")) || (data2 === "geovision-as-manager")) || (data2 === "honeywell-vista")) || (data2 === "igor")) || (data2 === "inncom")) || (data2 === "isapi")) || (data2 === "kohost-k7")) || (data2 === "kohost")) || (data2 === "lg")) || (data2 === "lg-webos")) || (data2 === "lapi")) || (data2 === "lirc")) || (data2 === "mews")) || (data2 === "mht")) || (data2 === "paxton")) || (data2 === "pelican-wireless")) || (data2 === "power-shades")) || (data2 === "rachio")) || (data2 === "rebrandly")) || (data2 === "rtsp")) || (data2 === "salto")) || (data2 === "salto-irn")) || (data2 === "samsung")) || (data2 === "se")) || (data2 === "sendgrid")) || (data2 === "sonifi")) || (data2 === "stay-n-touch")) || (data2 === "storable")) || (data2 === "twilio")) || (data2 === "unifi")) || (data2 === "valcom")) || (data2 === "vizio")) || (data2 === "wisenet")) || (data2 === "cloudflare-images")) || (data2 === "cloudflare-stream")) || (data2 === "insperia-privacy"))){
const err10 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err11 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data4 = data.supportedNotifications;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
let data5 = data4[i0];
if(!((((((((((((((((((((((((((((data5 === "button 1") || (data5 === "button 2")) || (data5 === "button 3")) || (data5 === "button 4")) || (data5 === "button 5")) || (data5 === "idle")) || (data5 === "powerHasBeedApplied")) || (data5 === "acMainsDisconnected")) || (data5 === "acMainsReconnected")) || (data5 === "replaceBatterySoon")) || (data5 === "replaceBatteryNow")) || (data5 === "batteryOk")) || (data5 === "hardwareFailure")) || (data5 === "softwareFailure")) || (data5 === "hardwareFailureWithCode")) || (data5 === "softwareFailureWithCode")) || (data5 === "motionDetection")) || (data5 === "airFilterNeedsCleaned")) || (data5 === "airFilterNeedsReplaced")) || (data5 === "smokeDetected")) || (data5 === "outsideSafeTemperatureRange")) || (data5 === "outsideSafeHumidityRange")) || (data5 === "scheduleMaintenance")) || (data5 === "doorAjar")) || (data5 === "communicationFailure")) || (data5 === "communicationOk")) || (data5 === "burglarAlarm")) || (data5 === "fireAlarm"))){
const err12 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
let i1 = data4.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data4[i1], data4[j0])){
const err13 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err14 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate52(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors);
errors = vErrors.length;
}
}
if(data.watts !== undefined){
let data7 = data.watts;
if(typeof data7 == "number"){
if(data7 < 0 || isNaN(data7)){
const err15 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
else {
const err16 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
else {
const err17 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
validate51.errors = vErrors;
return errors === 0;
}

const schema11 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"alarm.json","title":"Alarm","description":"Any smart alarm system","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"offline":{"type":"boolean"},"type":{"$ref":"definitions.json#/definitions/type"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"areas":{"type":"array","items":{"type":"object","properties":{"number":{"type":"number"},"name":{"type":"string"},"securityMode":{"type":["string","null"],"enum":["arming","disarming","armed","disarmed","alarm",null]}},"additionalProperties":false}},"zones":{"type":"array","items":{"type":"object","properties":{"number":{"type":"number","minimum":0},"name":{"type":"string"},"secure":{"type":["boolean","null"]},"bypassed":{"type":["boolean","null"]}},"additionalProperties":false}},"chime":{"type":"boolean","description":"Reflects whether console chime is enabled"},"watts":{"$ref":"definitions.json#/definitions/watts"},"address":{"$ref":"definitions.json#/definitions/address"}},"required":["id","type","areas","zones","driver"]};
const schema21 = {"type":"object","properties":{"id":{"type":"string"},"line1":{"type":"string"},"line2":{"type":"string"},"line3":{"type":"string"},"city":{"type":"string"},"state":{"type":"string"},"postalCode":{"type":"string"},"countryCode":{"type":"string","minLength":2,"maxLength":2}}};
const func3 = require("ajv/dist/runtime/ucs2length").default;

function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate12.errors = vErrors;
return errors === 0;
}


function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="alarm.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.areas === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "areas"},message:"must have required property '"+"areas"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.zones === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "zones"},message:"must have required property '"+"zones"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.driver === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err5 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err7 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err8 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err9 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.type !== undefined){
let data3 = data.type;
if(typeof data3 !== "string"){
const err10 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!(((((((((((((((((data3 === "alarm") || (data3 === "dimmer")) || (data3 === "switch")) || (data3 === "motionSensor")) || (data3 === "windowCovering")) || (data3 === "camera")) || (data3 === "mediaSource")) || (data3 === "thermostat")) || (data3 === "lock")) || (data3 === "courtesy")) || (data3 === "gateway")) || (data3 === "tv")) || (data3 === "dvr")) || (data3 === "appleTv")) || (data3 === "discPlayer")) || (data3 === "mediaPlayer")) || (data3 === "uncontrolledDevice"))){
const err11 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err12 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data5 = data.supportedNotifications;
if(Array.isArray(data5)){
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
let data6 = data5[i0];
if(!((((((((((((((((((((((((((((data6 === "button 1") || (data6 === "button 2")) || (data6 === "button 3")) || (data6 === "button 4")) || (data6 === "button 5")) || (data6 === "idle")) || (data6 === "powerHasBeedApplied")) || (data6 === "acMainsDisconnected")) || (data6 === "acMainsReconnected")) || (data6 === "replaceBatterySoon")) || (data6 === "replaceBatteryNow")) || (data6 === "batteryOk")) || (data6 === "hardwareFailure")) || (data6 === "softwareFailure")) || (data6 === "hardwareFailureWithCode")) || (data6 === "softwareFailureWithCode")) || (data6 === "motionDetection")) || (data6 === "airFilterNeedsCleaned")) || (data6 === "airFilterNeedsReplaced")) || (data6 === "smokeDetected")) || (data6 === "outsideSafeTemperatureRange")) || (data6 === "outsideSafeHumidityRange")) || (data6 === "scheduleMaintenance")) || (data6 === "doorAjar")) || (data6 === "communicationFailure")) || (data6 === "communicationOk")) || (data6 === "burglarAlarm")) || (data6 === "fireAlarm"))){
const err13 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
let i1 = data5.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data5[i1], data5[j0])){
const err14 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err15 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate12(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data8 = data.driver;
if(typeof data8 !== "string"){
const err16 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data8 === "aws-kinesis") || (data8 === "butler")) || (data8 === "crestron")) || (data8 === "dell")) || (data8 === "dmp")) || (data8 === "doorbird")) || (data8 === "dormakaba")) || (data8 === "dsc")) || (data8 === "ecobee")) || (data8 === "epson")) || (data8 === "geovision-rs")) || (data8 === "geovision-as-manager")) || (data8 === "honeywell-vista")) || (data8 === "igor")) || (data8 === "inncom")) || (data8 === "isapi")) || (data8 === "kohost-k7")) || (data8 === "kohost")) || (data8 === "lg")) || (data8 === "lg-webos")) || (data8 === "lapi")) || (data8 === "lirc")) || (data8 === "mews")) || (data8 === "mht")) || (data8 === "paxton")) || (data8 === "pelican-wireless")) || (data8 === "power-shades")) || (data8 === "rachio")) || (data8 === "rebrandly")) || (data8 === "rtsp")) || (data8 === "salto")) || (data8 === "salto-irn")) || (data8 === "samsung")) || (data8 === "se")) || (data8 === "sendgrid")) || (data8 === "sonifi")) || (data8 === "stay-n-touch")) || (data8 === "storable")) || (data8 === "twilio")) || (data8 === "unifi")) || (data8 === "valcom")) || (data8 === "vizio")) || (data8 === "wisenet")) || (data8 === "cloudflare-images")) || (data8 === "cloudflare-stream")) || (data8 === "insperia-privacy"))){
const err17 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.areas !== undefined){
let data9 = data.areas;
if(Array.isArray(data9)){
const len1 = data9.length;
for(let i2=0; i2<len1; i2++){
let data10 = data9[i2];
if(data10 && typeof data10 == "object" && !Array.isArray(data10)){
for(const key0 in data10){
if(!(((key0 === "number") || (key0 === "name")) || (key0 === "securityMode"))){
const err18 = {instancePath:instancePath+"/areas/" + i2,schemaPath:"#/properties/areas/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data10.number !== undefined){
if(!(typeof data10.number == "number")){
const err19 = {instancePath:instancePath+"/areas/" + i2+"/number",schemaPath:"#/properties/areas/items/properties/number/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data10.name !== undefined){
if(typeof data10.name !== "string"){
const err20 = {instancePath:instancePath+"/areas/" + i2+"/name",schemaPath:"#/properties/areas/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data10.securityMode !== undefined){
let data13 = data10.securityMode;
if((typeof data13 !== "string") && (data13 !== null)){
const err21 = {instancePath:instancePath+"/areas/" + i2+"/securityMode",schemaPath:"#/properties/areas/items/properties/securityMode/type",keyword:"type",params:{type: schema11.properties.areas.items.properties.securityMode.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((((((data13 === "arming") || (data13 === "disarming")) || (data13 === "armed")) || (data13 === "disarmed")) || (data13 === "alarm")) || (data13 === null))){
const err22 = {instancePath:instancePath+"/areas/" + i2+"/securityMode",schemaPath:"#/properties/areas/items/properties/securityMode/enum",keyword:"enum",params:{allowedValues: schema11.properties.areas.items.properties.securityMode.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
}
else {
const err23 = {instancePath:instancePath+"/areas/" + i2,schemaPath:"#/properties/areas/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
}
else {
const err24 = {instancePath:instancePath+"/areas",schemaPath:"#/properties/areas/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
if(data.zones !== undefined){
let data14 = data.zones;
if(Array.isArray(data14)){
const len2 = data14.length;
for(let i3=0; i3<len2; i3++){
let data15 = data14[i3];
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
for(const key1 in data15){
if(!((((key1 === "number") || (key1 === "name")) || (key1 === "secure")) || (key1 === "bypassed"))){
const err25 = {instancePath:instancePath+"/zones/" + i3,schemaPath:"#/properties/zones/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data15.number !== undefined){
let data16 = data15.number;
if(typeof data16 == "number"){
if(data16 < 0 || isNaN(data16)){
const err26 = {instancePath:instancePath+"/zones/" + i3+"/number",schemaPath:"#/properties/zones/items/properties/number/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
else {
const err27 = {instancePath:instancePath+"/zones/" + i3+"/number",schemaPath:"#/properties/zones/items/properties/number/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data15.name !== undefined){
if(typeof data15.name !== "string"){
const err28 = {instancePath:instancePath+"/zones/" + i3+"/name",schemaPath:"#/properties/zones/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data15.secure !== undefined){
let data18 = data15.secure;
if((typeof data18 !== "boolean") && (data18 !== null)){
const err29 = {instancePath:instancePath+"/zones/" + i3+"/secure",schemaPath:"#/properties/zones/items/properties/secure/type",keyword:"type",params:{type: schema11.properties.zones.items.properties.secure.type},message:"must be boolean,null"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data15.bypassed !== undefined){
let data19 = data15.bypassed;
if((typeof data19 !== "boolean") && (data19 !== null)){
const err30 = {instancePath:instancePath+"/zones/" + i3+"/bypassed",schemaPath:"#/properties/zones/items/properties/bypassed/type",keyword:"type",params:{type: schema11.properties.zones.items.properties.bypassed.type},message:"must be boolean,null"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
}
else {
const err31 = {instancePath:instancePath+"/zones/" + i3,schemaPath:"#/properties/zones/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
}
else {
const err32 = {instancePath:instancePath+"/zones",schemaPath:"#/properties/zones/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
if(data.chime !== undefined){
if(typeof data.chime !== "boolean"){
const err33 = {instancePath:instancePath+"/chime",schemaPath:"#/properties/chime/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data.watts !== undefined){
let data21 = data.watts;
if(typeof data21 == "number"){
if(data21 < 0 || isNaN(data21)){
const err34 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
else {
const err35 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
if(data.address !== undefined){
let data22 = data.address;
if(data22 && typeof data22 == "object" && !Array.isArray(data22)){
if(data22.id !== undefined){
if(typeof data22.id !== "string"){
const err36 = {instancePath:instancePath+"/address/id",schemaPath:"definitions.json#/definitions/address/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
if(data22.line1 !== undefined){
if(typeof data22.line1 !== "string"){
const err37 = {instancePath:instancePath+"/address/line1",schemaPath:"definitions.json#/definitions/address/properties/line1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
if(data22.line2 !== undefined){
if(typeof data22.line2 !== "string"){
const err38 = {instancePath:instancePath+"/address/line2",schemaPath:"definitions.json#/definitions/address/properties/line2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
if(data22.line3 !== undefined){
if(typeof data22.line3 !== "string"){
const err39 = {instancePath:instancePath+"/address/line3",schemaPath:"definitions.json#/definitions/address/properties/line3/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
if(data22.city !== undefined){
if(typeof data22.city !== "string"){
const err40 = {instancePath:instancePath+"/address/city",schemaPath:"definitions.json#/definitions/address/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
if(data22.state !== undefined){
if(typeof data22.state !== "string"){
const err41 = {instancePath:instancePath+"/address/state",schemaPath:"definitions.json#/definitions/address/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data22.postalCode !== undefined){
if(typeof data22.postalCode !== "string"){
const err42 = {instancePath:instancePath+"/address/postalCode",schemaPath:"definitions.json#/definitions/address/properties/postalCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
if(data22.countryCode !== undefined){
let data30 = data22.countryCode;
if(typeof data30 === "string"){
if(func3(data30) > 2){
const err43 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
if(func3(data30) < 2){
const err44 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
else {
const err45 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
}
else {
const err46 = {instancePath:instancePath+"/address",schemaPath:"definitions.json#/definitions/address/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
}
else {
const err47 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
validate10.errors = vErrors;
return errors === 0;
}

const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];

function validate65(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="room.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "room";
}
if(data.dimmers === undefined){
data.dimmers = [];
}
if(data.switches === undefined){
data.switches = [];
}
if(data.thermostats === undefined){
data.thermostats = [];
}
if(data.locks === undefined){
data.locks = [];
}
if(data.windowCoverings === undefined){
data.windowCoverings = [];
}
if(data.courtesy === undefined){
data.courtesy = [];
}
if(data.cameras === undefined){
data.cameras = [];
}
if(data.mediaSources === undefined){
data.mediaSources = [];
}
if(data.motionSensors === undefined){
data.motionSensors = [];
}
if(data.alarms === undefined){
data.alarms = [];
}
for(const key0 in data){
if(!(func5.call(schema170.properties, key0))){
const err0 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err2 = {};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err3 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err4 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(!(data1 === "room")){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema170.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err6 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data.floor !== undefined){
if(typeof data.floor !== "string"){
const err7 = {instancePath:instancePath+"/floor",schemaPath:"#/properties/floor/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
let data4 = data.dimmers;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
if(!(validate27(data4[i0], {instancePath:instancePath+"/dimmers/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
errors = vErrors.length;
}
}
}
else {
const err8 = {instancePath:instancePath+"/dimmers",schemaPath:"#/properties/dimmers/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
let data6 = data.switches;
if(Array.isArray(data6)){
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
if(!(validate67(data6[i1], {instancePath:instancePath+"/switches/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
}
}
else {
const err9 = {instancePath:instancePath+"/switches",schemaPath:"#/properties/switches/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
let data8 = data.thermostats;
if(Array.isArray(data8)){
const len2 = data8.length;
for(let i2=0; i2<len2; i2++){
if(!(validate71(data8[i2], {instancePath:instancePath+"/thermostats/" + i2,parentData:data8,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate71.errors : vErrors.concat(validate71.errors);
errors = vErrors.length;
}
}
}
else {
const err10 = {instancePath:instancePath+"/thermostats",schemaPath:"#/properties/thermostats/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
let data10 = data.locks;
if(Array.isArray(data10)){
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
if(!(validate45(data10[i3], {instancePath:instancePath+"/locks/" + i3,parentData:data10,parentDataProperty:i3,rootData}))){
vErrors = vErrors === null ? validate45.errors : vErrors.concat(validate45.errors);
errors = vErrors.length;
}
}
}
else {
const err11 = {instancePath:instancePath+"/locks",schemaPath:"#/properties/locks/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
let data12 = data.windowCoverings;
if(Array.isArray(data12)){
const len4 = data12.length;
for(let i4=0; i4<len4; i4++){
if(!(validate80(data12[i4], {instancePath:instancePath+"/windowCoverings/" + i4,parentData:data12,parentDataProperty:i4,rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
}
}
else {
const err12 = {instancePath:instancePath+"/windowCoverings",schemaPath:"#/properties/windowCoverings/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
let data14 = data.courtesy;
if(Array.isArray(data14)){
const len5 = data14.length;
for(let i5=0; i5<len5; i5++){
if(!(validate22(data14[i5], {instancePath:instancePath+"/courtesy/" + i5,parentData:data14,parentDataProperty:i5,rootData}))){
vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
errors = vErrors.length;
}
}
}
else {
const err13 = {instancePath:instancePath+"/courtesy",schemaPath:"#/properties/courtesy/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
let data16 = data.cameras;
if(Array.isArray(data16)){
const len6 = data16.length;
for(let i6=0; i6<len6; i6++){
if(!(validate17(data16[i6], {instancePath:instancePath+"/cameras/" + i6,parentData:data16,parentDataProperty:i6,rootData}))){
vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);
errors = vErrors.length;
}
}
}
else {
const err14 = {instancePath:instancePath+"/cameras",schemaPath:"#/properties/cameras/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
let data18 = data.mediaSources;
if(Array.isArray(data18)){
const len7 = data18.length;
for(let i7=0; i7<len7; i7++){
if(!(validate48(data18[i7], {instancePath:instancePath+"/mediaSources/" + i7,parentData:data18,parentDataProperty:i7,rootData}))){
vErrors = vErrors === null ? validate48.errors : vErrors.concat(validate48.errors);
errors = vErrors.length;
}
}
}
else {
const err15 = {instancePath:instancePath+"/mediaSources",schemaPath:"#/properties/mediaSources/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
let data20 = data.motionSensors;
if(Array.isArray(data20)){
const len8 = data20.length;
for(let i8=0; i8<len8; i8++){
if(!(validate51(data20[i8], {instancePath:instancePath+"/motionSensors/" + i8,parentData:data20,parentDataProperty:i8,rootData}))){
vErrors = vErrors === null ? validate51.errors : vErrors.concat(validate51.errors);
errors = vErrors.length;
}
}
}
else {
const err16 = {instancePath:instancePath+"/motionSensors",schemaPath:"#/properties/motionSensors/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
let data22 = data.alarms;
if(Array.isArray(data22)){
const len9 = data22.length;
for(let i9=0; i9<len9; i9++){
if(!(validate10(data22[i9], {instancePath:instancePath+"/alarms/" + i9,parentData:data22,parentDataProperty:i9,rootData}))){
vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
errors = vErrors.length;
}
}
}
else {
const err17 = {instancePath:instancePath+"/alarms",schemaPath:"#/properties/alarms/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(data.occupiedAt !== undefined){
let data24 = data.occupiedAt;
if((typeof data24 !== "string") && (!(data24 && typeof data24 == "object" && !Array.isArray(data24)))){
const err18 = {instancePath:instancePath+"/occupiedAt",schemaPath:"definitions.json#/definitions/createdAt/type",keyword:"type",params:{type: schema103.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(typeof data24 === "string"){
if(!(formats4.validate(data24))){
const err19 = {instancePath:instancePath+"/occupiedAt",schemaPath:"definitions.json#/definitions/createdAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
}
if(data.createdAt !== undefined){
let data25 = data.createdAt;
if((typeof data25 !== "string") && (!(data25 && typeof data25 == "object" && !Array.isArray(data25)))){
const err20 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/type",keyword:"type",params:{type: schema103.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
if(typeof data25 === "string"){
if(!(formats4.validate(data25))){
const err21 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
}
if(data.updatedAt !== undefined){
let data26 = data.updatedAt;
if((typeof data26 !== "string") && (!(data26 && typeof data26 == "object" && !Array.isArray(data26)))){
const err22 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/type",keyword:"type",params:{type: schema150.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
if(typeof data26 === "string"){
if(!(formats4.validate(data26))){
const err23 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
}
}
else {
const err24 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
validate65.errors = vErrors;
return errors === 0;
}
