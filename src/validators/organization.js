// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateOrganization = validate55;
const schema147 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"organization.json","title":"Organization","type":"object","description":"An organization is a group or entity that subscribes to Kohost software.","required":["accountNumber","name"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"organization","enum":["organization"]},"accountNumber":{"type":["number","null"],"minimum":10000},"name":{"type":"string"},"properties":{"type":"array","items":{"type":"string"}},"hostname":{"type":["string","null"]},"appManifest":{"type":"object","properties":{"name":{"type":"string"},"short_name":{"type":"string"},"scope":{"type":"string"},"start_url":{"type":"string"},"themeColor":{"type":"string"},"backgroundColor":{"type":"string"},"display":{"type":"string","enum":["fullscreen","standalone","minimal-ui","browser"],"default":"fullscreen"},"orientation":{"type":"string","enum":["portrait","landscape"],"default":"portrait"},"splash":{"type":"object","properties":{"src":{"type":"string"},"type":{"type":"string"},"sizes":{"type":"string"}}},"icons":{"type":"array","items":{"type":"object","properties":{"src":{"type":"string"},"sizes":{"type":"string"},"type":{"type":"string"}}}},"logo":{"type":"object","properties":{"src":{"type":"string"},"type":{"type":"string"},"sizes":{"type":"string"}}}},"default":{"name":"Kohost","short_name":"Kohost","start_url":"/","scope":"/","display":"fullscreen","orientation":"portrait","theme_color":"#1d1f22","background_color":"#1d1f22","icons":[{"src":"https://images.kohost.io/cdn-cgi/imagedelivery/vcVX2aBwdFSYr66spcFKaA/9c85047f-ccba-4b1c-3070-5463fbe93b00/w=512","sizes":"512x512","type":"image/png"}],"splash":{"src":"https://images.kohost.io/cdn-cgi/imagedelivery/vcVX2aBwdFSYr66spcFKaA/034fb112-5326-4d37-373e-d1cc2a4d0400/w=1500","sizes":"1500x800","type":"image/jpg"},"logo":{"src":"https://images.kohost.io/cdn-cgi/imagedelivery/vcVX2aBwdFSYr66spcFKaA/1e54c54d-3bac-4745-f46f-c2f98036af00/h=75","sizes":"300x75","type":"image/png"}}},"tickets":{"type":"object","properties":{"nextTicketNumber":{"type":["string","integer"],"default":1}}},"credentials":{"type":"object","additionalProperties":true},"createdAt":{"$ref":"definitions.json#/definitions/createdAt"},"updatedAt":{"$ref":"definitions.json#/definitions/updatedAt"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema103 = {"type":["string","object"],"format":"date-time"};
const schema150 = {"type":["string","object"],"format":"date-time"};
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];

function validate55(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="organization.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "organization";
}
if(data.appManifest === undefined){
data.appManifest = {"name":"Kohost","short_name":"Kohost","start_url":"/","scope":"/","display":"fullscreen","orientation":"portrait","theme_color":"#1d1f22","background_color":"#1d1f22","icons":[{"src":"https://images.kohost.io/cdn-cgi/imagedelivery/vcVX2aBwdFSYr66spcFKaA/9c85047f-ccba-4b1c-3070-5463fbe93b00/w=512","sizes":"512x512","type":"image/png"}],"splash":{"src":"https://images.kohost.io/cdn-cgi/imagedelivery/vcVX2aBwdFSYr66spcFKaA/034fb112-5326-4d37-373e-d1cc2a4d0400/w=1500","sizes":"1500x800","type":"image/jpg"},"logo":{"src":"https://images.kohost.io/cdn-cgi/imagedelivery/vcVX2aBwdFSYr66spcFKaA/1e54c54d-3bac-4745-f46f-c2f98036af00/h=75","sizes":"300x75","type":"image/png"}};
}
if(data.accountNumber === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "accountNumber"},message:"must have required property '"+"accountNumber"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.name === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(!(data1 === "organization")){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema147.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.accountNumber !== undefined){
let data2 = data.accountNumber;
if((!(typeof data2 == "number")) && (data2 !== null)){
const err7 = {instancePath:instancePath+"/accountNumber",schemaPath:"#/properties/accountNumber/type",keyword:"type",params:{type: schema147.properties.accountNumber.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(typeof data2 == "number"){
if(data2 < 10000 || isNaN(data2)){
const err8 = {instancePath:instancePath+"/accountNumber",schemaPath:"#/properties/accountNumber/minimum",keyword:"minimum",params:{comparison: ">=", limit: 10000},message:"must be >= 10000"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err9 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.properties !== undefined){
let data4 = data.properties;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
if(typeof data4[i0] !== "string"){
const err10 = {instancePath:instancePath+"/properties/" + i0,schemaPath:"#/properties/properties/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
else {
const err11 = {instancePath:instancePath+"/properties",schemaPath:"#/properties/properties/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.hostname !== undefined){
let data6 = data.hostname;
if((typeof data6 !== "string") && (data6 !== null)){
const err12 = {instancePath:instancePath+"/hostname",schemaPath:"#/properties/hostname/type",keyword:"type",params:{type: schema147.properties.hostname.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
let data7 = data.appManifest;
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
if(data7.display === undefined){
data7.display = "fullscreen";
}
if(data7.orientation === undefined){
data7.orientation = "portrait";
}
if(data7.name !== undefined){
if(typeof data7.name !== "string"){
const err13 = {instancePath:instancePath+"/appManifest/name",schemaPath:"#/properties/appManifest/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data7.short_name !== undefined){
if(typeof data7.short_name !== "string"){
const err14 = {instancePath:instancePath+"/appManifest/short_name",schemaPath:"#/properties/appManifest/properties/short_name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data7.scope !== undefined){
if(typeof data7.scope !== "string"){
const err15 = {instancePath:instancePath+"/appManifest/scope",schemaPath:"#/properties/appManifest/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data7.start_url !== undefined){
if(typeof data7.start_url !== "string"){
const err16 = {instancePath:instancePath+"/appManifest/start_url",schemaPath:"#/properties/appManifest/properties/start_url/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data7.themeColor !== undefined){
if(typeof data7.themeColor !== "string"){
const err17 = {instancePath:instancePath+"/appManifest/themeColor",schemaPath:"#/properties/appManifest/properties/themeColor/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data7.backgroundColor !== undefined){
if(typeof data7.backgroundColor !== "string"){
const err18 = {instancePath:instancePath+"/appManifest/backgroundColor",schemaPath:"#/properties/appManifest/properties/backgroundColor/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
let data14 = data7.display;
if(typeof data14 !== "string"){
const err19 = {instancePath:instancePath+"/appManifest/display",schemaPath:"#/properties/appManifest/properties/display/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(!((((data14 === "fullscreen") || (data14 === "standalone")) || (data14 === "minimal-ui")) || (data14 === "browser"))){
const err20 = {instancePath:instancePath+"/appManifest/display",schemaPath:"#/properties/appManifest/properties/display/enum",keyword:"enum",params:{allowedValues: schema147.properties.appManifest.properties.display.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
let data15 = data7.orientation;
if(typeof data15 !== "string"){
const err21 = {instancePath:instancePath+"/appManifest/orientation",schemaPath:"#/properties/appManifest/properties/orientation/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((data15 === "portrait") || (data15 === "landscape"))){
const err22 = {instancePath:instancePath+"/appManifest/orientation",schemaPath:"#/properties/appManifest/properties/orientation/enum",keyword:"enum",params:{allowedValues: schema147.properties.appManifest.properties.orientation.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
if(data7.splash !== undefined){
let data16 = data7.splash;
if(data16 && typeof data16 == "object" && !Array.isArray(data16)){
if(data16.src !== undefined){
if(typeof data16.src !== "string"){
const err23 = {instancePath:instancePath+"/appManifest/splash/src",schemaPath:"#/properties/appManifest/properties/splash/properties/src/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
if(data16.type !== undefined){
if(typeof data16.type !== "string"){
const err24 = {instancePath:instancePath+"/appManifest/splash/type",schemaPath:"#/properties/appManifest/properties/splash/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
if(data16.sizes !== undefined){
if(typeof data16.sizes !== "string"){
const err25 = {instancePath:instancePath+"/appManifest/splash/sizes",schemaPath:"#/properties/appManifest/properties/splash/properties/sizes/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
}
else {
const err26 = {instancePath:instancePath+"/appManifest/splash",schemaPath:"#/properties/appManifest/properties/splash/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data7.icons !== undefined){
let data20 = data7.icons;
if(Array.isArray(data20)){
const len1 = data20.length;
for(let i1=0; i1<len1; i1++){
let data21 = data20[i1];
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
if(data21.src !== undefined){
if(typeof data21.src !== "string"){
const err27 = {instancePath:instancePath+"/appManifest/icons/" + i1+"/src",schemaPath:"#/properties/appManifest/properties/icons/items/properties/src/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data21.sizes !== undefined){
if(typeof data21.sizes !== "string"){
const err28 = {instancePath:instancePath+"/appManifest/icons/" + i1+"/sizes",schemaPath:"#/properties/appManifest/properties/icons/items/properties/sizes/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data21.type !== undefined){
if(typeof data21.type !== "string"){
const err29 = {instancePath:instancePath+"/appManifest/icons/" + i1+"/type",schemaPath:"#/properties/appManifest/properties/icons/items/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
}
else {
const err30 = {instancePath:instancePath+"/appManifest/icons/" + i1,schemaPath:"#/properties/appManifest/properties/icons/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
}
else {
const err31 = {instancePath:instancePath+"/appManifest/icons",schemaPath:"#/properties/appManifest/properties/icons/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
if(data7.logo !== undefined){
let data25 = data7.logo;
if(data25 && typeof data25 == "object" && !Array.isArray(data25)){
if(data25.src !== undefined){
if(typeof data25.src !== "string"){
const err32 = {instancePath:instancePath+"/appManifest/logo/src",schemaPath:"#/properties/appManifest/properties/logo/properties/src/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
if(data25.type !== undefined){
if(typeof data25.type !== "string"){
const err33 = {instancePath:instancePath+"/appManifest/logo/type",schemaPath:"#/properties/appManifest/properties/logo/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data25.sizes !== undefined){
if(typeof data25.sizes !== "string"){
const err34 = {instancePath:instancePath+"/appManifest/logo/sizes",schemaPath:"#/properties/appManifest/properties/logo/properties/sizes/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
}
else {
const err35 = {instancePath:instancePath+"/appManifest/logo",schemaPath:"#/properties/appManifest/properties/logo/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
}
else {
const err36 = {instancePath:instancePath+"/appManifest",schemaPath:"#/properties/appManifest/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
if(data.tickets !== undefined){
let data29 = data.tickets;
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
if(data29.nextTicketNumber === undefined){
data29.nextTicketNumber = 1;
}
let data30 = data29.nextTicketNumber;
if((typeof data30 !== "string") && (!((typeof data30 == "number") && (!(data30 % 1) && !isNaN(data30))))){
const err37 = {instancePath:instancePath+"/tickets/nextTicketNumber",schemaPath:"#/properties/tickets/properties/nextTicketNumber/type",keyword:"type",params:{type: schema147.properties.tickets.properties.nextTicketNumber.type},message:"must be string,integer"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
else {
const err38 = {instancePath:instancePath+"/tickets",schemaPath:"#/properties/tickets/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
if(data.credentials !== undefined){
let data31 = data.credentials;
if(data31 && typeof data31 == "object" && !Array.isArray(data31)){
}
else {
const err39 = {instancePath:instancePath+"/credentials",schemaPath:"#/properties/credentials/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
if(data.createdAt !== undefined){
let data32 = data.createdAt;
if((typeof data32 !== "string") && (!(data32 && typeof data32 == "object" && !Array.isArray(data32)))){
const err40 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/type",keyword:"type",params:{type: schema103.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
if(typeof data32 === "string"){
if(!(formats4.validate(data32))){
const err41 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
}
if(data.updatedAt !== undefined){
let data33 = data.updatedAt;
if((typeof data33 !== "string") && (!(data33 && typeof data33 == "object" && !Array.isArray(data33)))){
const err42 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/type",keyword:"type",params:{type: schema150.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
if(typeof data33 === "string"){
if(!(formats4.validate(data33))){
const err43 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
}
}
else {
const err44 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
validate55.errors = vErrors;
return errors === 0;
}
