// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateUser = validate114;
const schema254 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"user.json","title":"User","type":"object","required":["firstName","lastName"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"user"},"firstName":{"type":"string"},"lastName":{"type":"string"},"phone":{"type":["string","null"],"pattern":"^\\+[0-9]{1,14}$"},"phoneVerified":{"type":"boolean"},"email":{"type":["string","null"],"format":"email"},"emailVerified":{"type":"boolean"},"address":{"$ref":"definitions.json#/definitions/address"},"secretKey":{"type":"string"},"photo":{"$ref":"mediaFile.json#"},"jobTitle":{"type":"string"},"dob":{"type":"string"},"gender":{"type":"string","enum":["male","female"]},"nationality":{"type":"string","minLength":2,"maxLength":2},"permissions":{"type":"array","default":[],"items":{"type":"object","required":["organizationId","propertyId","role"],"properties":{"organizationId":{"type":"string","description":"The ID of the organization the permission is applies to."},"propertyId":{"type":"string","description":"The ID of the property the permission is applies to."},"role":{"type":"string","enum":["Guest","User","Manager","Maintenance","Administrator","SuperAdmin"]},"department":{"type":"string","description":"The department the user belongs to."},"policyIds":{"type":"array","items":{"type":"string","description":"ID of a policy that is applied to this role."}},"policies":{"type":"array","items":{"description":"A policy object populated from the policyIds array.","$ref":"policy.json"}}},"additionalProperties":false}},"notes":{"type":"array","items":{"type":"string"}},"files":{"type":"array","items":{"$ref":"mediaFile.json#"}},"identifications":{"type":"array","items":{"$ref":"identification.json#"}},"payments":{"type":"array","items":{"$ref":"payment.json#"}},"location":{"type":"object","required":["accuracy","latitude","longitude","timestamp"],"additionalProperties":false,"properties":{"accuracy":{"type":["number","null"]},"latitude":{"type":["number","null"]},"longitude":{"type":["number","null"]},"timestamp":{"type":["number","null"]}}},"reservations":{"type":"array","items":{"$ref":"reservation.json"}},"spaceName":{"type":"string"},"revenue":{"$ref":"definitions.json#/definitions/revenue"},"createdAt":{"$ref":"definitions.json#/definitions/createdAt"},"updatedAt":{"$ref":"definitions.json#/definitions/updatedAt"},"systems":{"type":"array","default":[],"items":{"type":"object","properties":{"systemId":{"type":"string"},"propertyId":{"type":"string"},"driver":{"type":"string"}},"required":["systemId","propertyId","driver"],"additionalProperties":false}}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema21 = {"type":"object","properties":{"id":{"type":"string"},"line1":{"type":"string"},"line2":{"type":"string"},"line3":{"type":"string"},"city":{"type":"string"},"state":{"type":"string"},"postalCode":{"type":"string"},"countryCode":{"type":"string","minLength":2,"maxLength":2}}};
const schema103 = {"type":["string","object"],"format":"date-time"};
const schema150 = {"type":["string","object"],"format":"date-time"};
const pattern8 = new RegExp("^\\+[0-9]{1,14}$", "u");
const formats88 = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];
const func3 = require("ajv/dist/runtime/ucs2length").default;
const schema24 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"mediaFile.json","title":"Media File","description":"Any media file","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"mediaFile","enum":["mediaFile"]},"name":{"type":"string"},"fileHash":{"type":"string"},"category":{"type":"string","description":"This is the category id"},"mimeType":{"type":"string","enum":["image/*","image/jpeg","image/png","image/gif","image/webp","image/avif","image/svg+xml","application/pdf"]},"data":{"type":"string"},"url":{"type":"string","format":"uri"},"width":{"type":"integer","minimum":0},"height":{"type":"integer","minimum":0},"size":{"type":"integer","minimum":0,"description":"Size in bytes"},"uploadUrl":{"type":"string","format":"uri"},"uploadUrlExpires":{"$ref":"definitions.json#/definitions/date"},"createdBy":{"type":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}},"additionalProperties":false,"required":["type"]};
const schema26 = {"type":["string","object"],"format":"date-time"};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const func5 = Object.prototype.hasOwnProperty;
const formats0 = require("ajv-formats/dist/formats").fullFormats.uri;

function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="mediaFile.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "mediaFile";
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema24.properties, key0))){
const err1 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(!(data1 === "mediaFile")){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema24.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.fileHash !== undefined){
if(typeof data.fileHash !== "string"){
const err8 = {instancePath:instancePath+"/fileHash",schemaPath:"#/properties/fileHash/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.category !== undefined){
if(typeof data.category !== "string"){
const err9 = {instancePath:instancePath+"/category",schemaPath:"#/properties/category/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.mimeType !== undefined){
let data5 = data.mimeType;
if(typeof data5 !== "string"){
const err10 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!((((((((data5 === "image/*") || (data5 === "image/jpeg")) || (data5 === "image/png")) || (data5 === "image/gif")) || (data5 === "image/webp")) || (data5 === "image/avif")) || (data5 === "image/svg+xml")) || (data5 === "application/pdf"))){
const err11 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/enum",keyword:"enum",params:{allowedValues: schema24.properties.mimeType.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.data !== undefined){
if(typeof data.data !== "string"){
const err12 = {instancePath:instancePath+"/data",schemaPath:"#/properties/data/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.url !== undefined){
let data7 = data.url;
if(typeof data7 === "string"){
if(!(formats0(data7))){
const err13 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
else {
const err14 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.width !== undefined){
let data8 = data.width;
if(!((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8)))){
const err15 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(typeof data8 == "number"){
if(data8 < 0 || isNaN(data8)){
const err16 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
if(data.height !== undefined){
let data9 = data.height;
if(!((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9)))){
const err17 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(typeof data9 == "number"){
if(data9 < 0 || isNaN(data9)){
const err18 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.size !== undefined){
let data10 = data.size;
if(!((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10)))){
const err19 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(typeof data10 == "number"){
if(data10 < 0 || isNaN(data10)){
const err20 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
if(data.uploadUrl !== undefined){
let data11 = data.uploadUrl;
if(typeof data11 === "string"){
if(!(formats0(data11))){
const err21 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
else {
const err22 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.uploadUrlExpires !== undefined){
let data12 = data.uploadUrlExpires;
if((typeof data12 !== "string") && (!(data12 && typeof data12 == "object" && !Array.isArray(data12)))){
const err23 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(typeof data12 === "string"){
if(!(formats4.validate(data12))){
const err24 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
if(data.createdBy !== undefined){
if(typeof data.createdBy !== "string"){
const err25 = {instancePath:instancePath+"/createdBy",schemaPath:"#/properties/createdBy/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err26 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
validate15.errors = vErrors;
return errors === 0;
}

const schema154 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"policy.json","title":"Policy","description":"A policy is a set of permissions that can be applied to a user to limit their access to resources.","type":"object","required":["name","type","organizationId","propertyId","permissions","discriminator"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"policy","enum":["policy"]},"discriminator":{"type":"string","enum":["user"]},"name":{"type":"string","minLength":1},"description":{"type":"string"},"organizationId":{"type":"string"},"propertyId":{"type":"string"},"permissions":{"type":"array","items":{"type":"object","required":["entities","effect"],"properties":{"entities":{"type":"array","items":{"type":"string","pattern":"^[^:]+(:.+)+$"}},"effect":{"type":"string","enum":["Allow","Deny"]}}}}}};
const pattern2 = new RegExp("^[^:]+(:.+)+$", "u");

function validate57(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="policy.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "policy";
}
if(data.name === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.organizationId === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "organizationId"},message:"must have required property '"+"organizationId"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.propertyId === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "propertyId"},message:"must have required property '"+"propertyId"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.permissions === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "permissions"},message:"must have required property '"+"permissions"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.discriminator === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "discriminator"},message:"must have required property '"+"discriminator"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err8 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err9 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(data1 === "policy")){
const err10 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema154.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(data.discriminator !== undefined){
let data2 = data.discriminator;
if(typeof data2 !== "string"){
const err11 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(!(data2 === "user")){
const err12 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema154.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.name !== undefined){
let data3 = data.name;
if(typeof data3 === "string"){
if(func3(data3) < 1){
const err13 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
else {
const err14 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err15 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.organizationId !== undefined){
if(typeof data.organizationId !== "string"){
const err16 = {instancePath:instancePath+"/organizationId",schemaPath:"#/properties/organizationId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.propertyId !== undefined){
if(typeof data.propertyId !== "string"){
const err17 = {instancePath:instancePath+"/propertyId",schemaPath:"#/properties/propertyId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.permissions !== undefined){
let data7 = data.permissions;
if(Array.isArray(data7)){
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
let data8 = data7[i0];
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
if(data8.entities === undefined){
const err18 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/required",keyword:"required",params:{missingProperty: "entities"},message:"must have required property '"+"entities"+"'"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(data8.effect === undefined){
const err19 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/required",keyword:"required",params:{missingProperty: "effect"},message:"must have required property '"+"effect"+"'"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(data8.entities !== undefined){
let data9 = data8.entities;
if(Array.isArray(data9)){
const len1 = data9.length;
for(let i1=0; i1<len1; i1++){
let data10 = data9[i1];
if(typeof data10 === "string"){
if(!pattern2.test(data10)){
const err20 = {instancePath:instancePath+"/permissions/" + i0+"/entities/" + i1,schemaPath:"#/properties/permissions/items/properties/entities/items/pattern",keyword:"pattern",params:{pattern: "^[^:]+(:.+)+$"},message:"must match pattern \""+"^[^:]+(:.+)+$"+"\""};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
else {
const err21 = {instancePath:instancePath+"/permissions/" + i0+"/entities/" + i1,schemaPath:"#/properties/permissions/items/properties/entities/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
}
else {
const err22 = {instancePath:instancePath+"/permissions/" + i0+"/entities",schemaPath:"#/properties/permissions/items/properties/entities/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data8.effect !== undefined){
let data11 = data8.effect;
if(typeof data11 !== "string"){
const err23 = {instancePath:instancePath+"/permissions/" + i0+"/effect",schemaPath:"#/properties/permissions/items/properties/effect/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(!((data11 === "Allow") || (data11 === "Deny"))){
const err24 = {instancePath:instancePath+"/permissions/" + i0+"/effect",schemaPath:"#/properties/permissions/items/properties/effect/enum",keyword:"enum",params:{allowedValues: schema154.properties.permissions.items.properties.effect.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
else {
const err25 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
}
else {
const err26 = {instancePath:instancePath+"/permissions",schemaPath:"#/properties/permissions/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
validate57.errors = vErrors;
return errors === 0;
}

const schema96 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"identification.json","title":"Identification","type":"object","required":["type"],"oneOf":[{"required":["number"]},{"required":["encryptedNumber"]}],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["driversLicense","passport","identityCard","visa"]},"number":{"string":"string"},"maskedNumber":{"string":"string"},"encryptedNumber":{"string":"string"},"issued":{"type":["string","object"],"format":"date-time"},"expires":{"type":["string","object","null"],"format":"date-time"},"verified":{"type":"boolean"},"matched":{"type":"boolean"},"firstName":{"type":"string"},"lastName":{"type":"string"},"issuingCountry":{"string":"string","minLength":2,"maxLength":2},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};

function validate37(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="identification.json" */;
let vErrors = null;
let errors = 0;
const _errs1 = errors;
let valid0 = false;
let passing0 = null;
const _errs2 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.number === undefined){
const err0 = {instancePath,schemaPath:"#/oneOf/0/required",keyword:"required",params:{missingProperty: "number"},message:"must have required property '"+"number"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs2 === errors;
if(_valid0){
valid0 = true;
passing0 = 0;
}
const _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.encryptedNumber === undefined){
const err1 = {instancePath,schemaPath:"#/oneOf/1/required",keyword:"required",params:{missingProperty: "encryptedNumber"},message:"must have required property '"+"encryptedNumber"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs3 === errors;
if(_valid0 && valid0){
valid0 = false;
passing0 = [passing0, 1];
}
else {
if(_valid0){
valid0 = true;
passing0 = 1;
}
}
if(!valid0){
const err2 = {instancePath,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
else {
errors = _errs1;
if(vErrors !== null){
if(_errs1){
vErrors.length = _errs1;
}
else {
vErrors = null;
}
}
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs7 = errors;
const _errs8 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid3 = _errs8 === errors;
if(valid3){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs7;
if(vErrors !== null){
if(_errs7){
vErrors.length = _errs7;
}
else {
vErrors = null;
}
}
}
}
if(data.type !== undefined){
let data1 = data.type;
if(typeof data1 !== "string"){
const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!((((data1 === "driversLicense") || (data1 === "passport")) || (data1 === "identityCard")) || (data1 === "visa"))){
const err8 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema96.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.issued !== undefined){
let data2 = data.issued;
if((typeof data2 !== "string") && (!(data2 && typeof data2 == "object" && !Array.isArray(data2)))){
const err9 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/type",keyword:"type",params:{type: schema96.properties.issued.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(typeof data2 === "string"){
if(!(formats4.validate(data2))){
const err10 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
if(data.expires !== undefined){
let data3 = data.expires;
if(((typeof data3 !== "string") && (!(data3 && typeof data3 == "object" && !Array.isArray(data3)))) && (data3 !== null)){
const err11 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/type",keyword:"type",params:{type: schema96.properties.expires.type},message:"must be string,object,null"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err12 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
}
if(data.verified !== undefined){
if(typeof data.verified !== "boolean"){
const err13 = {instancePath:instancePath+"/verified",schemaPath:"#/properties/verified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.matched !== undefined){
if(typeof data.matched !== "boolean"){
const err14 = {instancePath:instancePath+"/matched",schemaPath:"#/properties/matched/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.firstName !== undefined){
if(typeof data.firstName !== "string"){
const err15 = {instancePath:instancePath+"/firstName",schemaPath:"#/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.lastName !== undefined){
if(typeof data.lastName !== "string"){
const err16 = {instancePath:instancePath+"/lastName",schemaPath:"#/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.issuingCountry !== undefined){
let data8 = data.issuingCountry;
if(typeof data8 === "string"){
if(func3(data8) > 2){
const err17 = {instancePath:instancePath+"/issuingCountry",schemaPath:"#/properties/issuingCountry/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(func3(data8) < 2){
const err18 = {instancePath:instancePath+"/issuingCountry",schemaPath:"#/properties/issuingCountry/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err19 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
}
else {
const err20 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
validate37.errors = vErrors;
return errors === 0;
}

const schema151 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"payment.json","title":"Payment","type":"object","required":["type","maskedNumber","expires"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["amex","visa","masterCard","maestro","discover","diners","jcb","applePay","alipay","chinaUnionPay","vpay"]},"enabled":{"type":"boolean","default":true},"storageData":{"type":["string","null"]},"maskedNumber":{"string":"string"},"issued":{"type":["string","null"]},"expires":{"string":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};

function validate56(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="payment.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enabled === undefined){
data.enabled = true;
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.maskedNumber === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "maskedNumber"},message:"must have required property '"+"maskedNumber"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.expires === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "expires"},message:"must have required property '"+"expires"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err3 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err5 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.type !== undefined){
let data1 = data.type;
if(typeof data1 !== "string"){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((((((((data1 === "amex") || (data1 === "visa")) || (data1 === "masterCard")) || (data1 === "maestro")) || (data1 === "discover")) || (data1 === "diners")) || (data1 === "jcb")) || (data1 === "applePay")) || (data1 === "alipay")) || (data1 === "chinaUnionPay")) || (data1 === "vpay"))){
const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema151.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(typeof data.enabled !== "boolean"){
const err8 = {instancePath:instancePath+"/enabled",schemaPath:"#/properties/enabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data.storageData !== undefined){
let data3 = data.storageData;
if((typeof data3 !== "string") && (data3 !== null)){
const err9 = {instancePath:instancePath+"/storageData",schemaPath:"#/properties/storageData/type",keyword:"type",params:{type: schema151.properties.storageData.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.issued !== undefined){
let data4 = data.issued;
if((typeof data4 !== "string") && (data4 !== null)){
const err10 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/type",keyword:"type",params:{type: schema151.properties.issued.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err11 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
}
else {
const err12 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
validate56.errors = vErrors;
return errors === 0;
}

const schema163 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"reservation.json","title":"Reservation","type":"object","required":["type","status","checkInDateTime","checkOutDateTime"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"driver":{"$ref":"definitions.json#/definitions/driver"},"primaryGuest":{"type":"string"},"type":{"type":"string","default":"reservation","enum":["reservation"]},"sharedGuests":{"type":"array","items":{"type":"string"}},"spaceCategory":{"type":"string"},"space":{"type":["string","null"]},"previousSpace":{"type":["string","null"],"default":null,"description":"Used when there was a space assigned and it changes"},"status":{"type":"string","enum":["reserved","checkedIn","checkedOut","cancelled","noShow","enquired","requested","optional"],"description":" reserved - confirmed by both parties, before check-in\n checkedIn - checked in\n checkedOut - checked out\n cancelled - Cancelled\n noShow - No show\n enquired - Confirmed neither by the customer nor enterprise\n requested - Confirmed by the customer but not the enterprise (waitlist)\n optional - Confirmed by the enterprise but not the customer (holding)"},"mobileCheckInSpaceCategoryChanged":{"type":"boolean","description":"spaceCategory has changed from original."},"mobileCheckInSpaceChanged":{"type":"boolean"},"mobileCheckInStatus":{"type":"string","enum":["ready","blocked","preArrivalStepsRequired","spaceNotAssigned","spaceNotReady","checkInTimeNotStarted"]},"mobileCheckInStatusMessage":{"type":"string"},"confirmationNumber":{"type":"string"},"expectedCheckInDateTime":{"type":["string","object"],"format":"date-time","description":"Expected arrival time of guest."},"checkInDateTime":{"type":["string","object"],"format":"date-time"},"checkOutDateTime":{"type":["string","object"],"format":"date-time"},"adultCount":{"type":"number","default":1,"minimum":1},"childCount":{"type":"number","default":0},"spaceCategoryAvailabilites":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string"},"price":{"type":"number"},"unit":{"type":"string","enum":["night","stay","hour"]},"isUpgrade":{"type":"boolean"}}}},"revenue":{"$ref":"definitions.json#/definitions/revenue"},"rateSuppressed":{"type":"boolean"},"payment":{"type":"string"},"company":{"type":"string"},"travelAgent":{"type":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"metadata":{"ref":"definitions.json#/definitions/metadata"},"updatedAt":{"$ref":"definitions.json#/definitions/updatedAt"}}};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema166 = {"type":"array","items":{"type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"date":{"type":"string","format":"date-time"},"price":{"type":"number"},"tax":{"type":["number","null"]}}}};

function validate63(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(Array.isArray(data)){
const len0 = data.length;
for(let i0=0; i0<len0; i0++){
let data0 = data[i0];
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.id !== undefined){
let data1 = data0.id;
if(typeof data1 !== "string"){
const err0 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
const _errs6 = errors;
const _errs7 = errors;
if(!((data1 === "global") || (data1 === "system"))){
const err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid4 = _errs7 === errors;
if(valid4){
const err2 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
else {
errors = _errs6;
if(vErrors !== null){
if(_errs6){
vErrors.length = _errs6;
}
else {
vErrors = null;
}
}
}
}
if(data0.name !== undefined){
if(typeof data0.name !== "string"){
const err3 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data0.date !== undefined){
let data3 = data0.date;
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err4 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/properties/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
const err5 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
if(data0.price !== undefined){
if(!(typeof data0.price == "number")){
const err6 = {instancePath:instancePath+"/" + i0+"/price",schemaPath:"#/items/properties/price/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data0.tax !== undefined){
let data5 = data0.tax;
if((!(typeof data5 == "number")) && (data5 !== null)){
const err7 = {instancePath:instancePath+"/" + i0+"/tax",schemaPath:"#/items/properties/tax/type",keyword:"type",params:{type: schema166.items.properties.tax.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
else {
const err8 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
}
else {
const err9 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
validate63.errors = vErrors;
return errors === 0;
}


function validate62(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="reservation.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "reservation";
}
if(data.previousSpace === undefined){
data.previousSpace = null;
}
if(data.adultCount === undefined){
data.adultCount = 1;
}
if(data.childCount === undefined){
data.childCount = 0;
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.status === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "status"},message:"must have required property '"+"status"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.checkInDateTime === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "checkInDateTime"},message:"must have required property '"+"checkInDateTime"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.checkOutDateTime === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "checkOutDateTime"},message:"must have required property '"+"checkOutDateTime"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.driver !== undefined){
let data1 = data.driver;
if(typeof data1 !== "string"){
const err7 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data1 === "aws-kinesis") || (data1 === "butler")) || (data1 === "crestron")) || (data1 === "dell")) || (data1 === "dmp")) || (data1 === "doorbird")) || (data1 === "dormakaba")) || (data1 === "dsc")) || (data1 === "ecobee")) || (data1 === "epson")) || (data1 === "geovision-rs")) || (data1 === "geovision-as-manager")) || (data1 === "honeywell-vista")) || (data1 === "igor")) || (data1 === "inncom")) || (data1 === "isapi")) || (data1 === "kohost-k7")) || (data1 === "kohost")) || (data1 === "lg")) || (data1 === "lg-webos")) || (data1 === "lapi")) || (data1 === "lirc")) || (data1 === "mews")) || (data1 === "mht")) || (data1 === "paxton")) || (data1 === "pelican-wireless")) || (data1 === "power-shades")) || (data1 === "rachio")) || (data1 === "rebrandly")) || (data1 === "rtsp")) || (data1 === "salto")) || (data1 === "salto-irn")) || (data1 === "samsung")) || (data1 === "se")) || (data1 === "sendgrid")) || (data1 === "sonifi")) || (data1 === "stay-n-touch")) || (data1 === "storable")) || (data1 === "twilio")) || (data1 === "unifi")) || (data1 === "valcom")) || (data1 === "vizio")) || (data1 === "wisenet")) || (data1 === "cloudflare-images")) || (data1 === "cloudflare-stream")) || (data1 === "insperia-privacy"))){
const err8 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.primaryGuest !== undefined){
if(typeof data.primaryGuest !== "string"){
const err9 = {instancePath:instancePath+"/primaryGuest",schemaPath:"#/properties/primaryGuest/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
let data3 = data.type;
if(typeof data3 !== "string"){
const err10 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!(data3 === "reservation")){
const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema163.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(data.sharedGuests !== undefined){
let data4 = data.sharedGuests;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
if(typeof data4[i0] !== "string"){
const err12 = {instancePath:instancePath+"/sharedGuests/" + i0,schemaPath:"#/properties/sharedGuests/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
}
else {
const err13 = {instancePath:instancePath+"/sharedGuests",schemaPath:"#/properties/sharedGuests/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.spaceCategory !== undefined){
if(typeof data.spaceCategory !== "string"){
const err14 = {instancePath:instancePath+"/spaceCategory",schemaPath:"#/properties/spaceCategory/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.space !== undefined){
let data7 = data.space;
if((typeof data7 !== "string") && (data7 !== null)){
const err15 = {instancePath:instancePath+"/space",schemaPath:"#/properties/space/type",keyword:"type",params:{type: schema163.properties.space.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
let data8 = data.previousSpace;
if((typeof data8 !== "string") && (data8 !== null)){
const err16 = {instancePath:instancePath+"/previousSpace",schemaPath:"#/properties/previousSpace/type",keyword:"type",params:{type: schema163.properties.previousSpace.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(data.status !== undefined){
let data9 = data.status;
if(typeof data9 !== "string"){
const err17 = {instancePath:instancePath+"/status",schemaPath:"#/properties/status/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(!((((((((data9 === "reserved") || (data9 === "checkedIn")) || (data9 === "checkedOut")) || (data9 === "cancelled")) || (data9 === "noShow")) || (data9 === "enquired")) || (data9 === "requested")) || (data9 === "optional"))){
const err18 = {instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues: schema163.properties.status.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data.mobileCheckInSpaceCategoryChanged !== undefined){
if(typeof data.mobileCheckInSpaceCategoryChanged !== "boolean"){
const err19 = {instancePath:instancePath+"/mobileCheckInSpaceCategoryChanged",schemaPath:"#/properties/mobileCheckInSpaceCategoryChanged/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.mobileCheckInSpaceChanged !== undefined){
if(typeof data.mobileCheckInSpaceChanged !== "boolean"){
const err20 = {instancePath:instancePath+"/mobileCheckInSpaceChanged",schemaPath:"#/properties/mobileCheckInSpaceChanged/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data.mobileCheckInStatus !== undefined){
let data12 = data.mobileCheckInStatus;
if(typeof data12 !== "string"){
const err21 = {instancePath:instancePath+"/mobileCheckInStatus",schemaPath:"#/properties/mobileCheckInStatus/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((((((data12 === "ready") || (data12 === "blocked")) || (data12 === "preArrivalStepsRequired")) || (data12 === "spaceNotAssigned")) || (data12 === "spaceNotReady")) || (data12 === "checkInTimeNotStarted"))){
const err22 = {instancePath:instancePath+"/mobileCheckInStatus",schemaPath:"#/properties/mobileCheckInStatus/enum",keyword:"enum",params:{allowedValues: schema163.properties.mobileCheckInStatus.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.mobileCheckInStatusMessage !== undefined){
if(typeof data.mobileCheckInStatusMessage !== "string"){
const err23 = {instancePath:instancePath+"/mobileCheckInStatusMessage",schemaPath:"#/properties/mobileCheckInStatusMessage/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
if(data.confirmationNumber !== undefined){
if(typeof data.confirmationNumber !== "string"){
const err24 = {instancePath:instancePath+"/confirmationNumber",schemaPath:"#/properties/confirmationNumber/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
if(data.expectedCheckInDateTime !== undefined){
let data15 = data.expectedCheckInDateTime;
if((typeof data15 !== "string") && (!(data15 && typeof data15 == "object" && !Array.isArray(data15)))){
const err25 = {instancePath:instancePath+"/expectedCheckInDateTime",schemaPath:"#/properties/expectedCheckInDateTime/type",keyword:"type",params:{type: schema163.properties.expectedCheckInDateTime.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
if(typeof data15 === "string"){
if(!(formats4.validate(data15))){
const err26 = {instancePath:instancePath+"/expectedCheckInDateTime",schemaPath:"#/properties/expectedCheckInDateTime/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
if(data.checkInDateTime !== undefined){
let data16 = data.checkInDateTime;
if((typeof data16 !== "string") && (!(data16 && typeof data16 == "object" && !Array.isArray(data16)))){
const err27 = {instancePath:instancePath+"/checkInDateTime",schemaPath:"#/properties/checkInDateTime/type",keyword:"type",params:{type: schema163.properties.checkInDateTime.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
if(typeof data16 === "string"){
if(!(formats4.validate(data16))){
const err28 = {instancePath:instancePath+"/checkInDateTime",schemaPath:"#/properties/checkInDateTime/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
}
if(data.checkOutDateTime !== undefined){
let data17 = data.checkOutDateTime;
if((typeof data17 !== "string") && (!(data17 && typeof data17 == "object" && !Array.isArray(data17)))){
const err29 = {instancePath:instancePath+"/checkOutDateTime",schemaPath:"#/properties/checkOutDateTime/type",keyword:"type",params:{type: schema163.properties.checkOutDateTime.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
if(typeof data17 === "string"){
if(!(formats4.validate(data17))){
const err30 = {instancePath:instancePath+"/checkOutDateTime",schemaPath:"#/properties/checkOutDateTime/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
}
let data18 = data.adultCount;
if(typeof data18 == "number"){
if(data18 < 1 || isNaN(data18)){
const err31 = {instancePath:instancePath+"/adultCount",schemaPath:"#/properties/adultCount/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
else {
const err32 = {instancePath:instancePath+"/adultCount",schemaPath:"#/properties/adultCount/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
if(!(typeof data.childCount == "number")){
const err33 = {instancePath:instancePath+"/childCount",schemaPath:"#/properties/childCount/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
if(data.spaceCategoryAvailabilites !== undefined){
let data20 = data.spaceCategoryAvailabilites;
if(Array.isArray(data20)){
const len1 = data20.length;
for(let i1=0; i1<len1; i1++){
let data21 = data20[i1];
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
if(data21.id !== undefined){
if(typeof data21.id !== "string"){
const err34 = {instancePath:instancePath+"/spaceCategoryAvailabilites/" + i1+"/id",schemaPath:"#/properties/spaceCategoryAvailabilites/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
if(data21.price !== undefined){
if(!(typeof data21.price == "number")){
const err35 = {instancePath:instancePath+"/spaceCategoryAvailabilites/" + i1+"/price",schemaPath:"#/properties/spaceCategoryAvailabilites/items/properties/price/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
if(data21.unit !== undefined){
let data24 = data21.unit;
if(typeof data24 !== "string"){
const err36 = {instancePath:instancePath+"/spaceCategoryAvailabilites/" + i1+"/unit",schemaPath:"#/properties/spaceCategoryAvailabilites/items/properties/unit/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
if(!(((data24 === "night") || (data24 === "stay")) || (data24 === "hour"))){
const err37 = {instancePath:instancePath+"/spaceCategoryAvailabilites/" + i1+"/unit",schemaPath:"#/properties/spaceCategoryAvailabilites/items/properties/unit/enum",keyword:"enum",params:{allowedValues: schema163.properties.spaceCategoryAvailabilites.items.properties.unit.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
if(data21.isUpgrade !== undefined){
if(typeof data21.isUpgrade !== "boolean"){
const err38 = {instancePath:instancePath+"/spaceCategoryAvailabilites/" + i1+"/isUpgrade",schemaPath:"#/properties/spaceCategoryAvailabilites/items/properties/isUpgrade/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
}
else {
const err39 = {instancePath:instancePath+"/spaceCategoryAvailabilites/" + i1,schemaPath:"#/properties/spaceCategoryAvailabilites/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
}
else {
const err40 = {instancePath:instancePath+"/spaceCategoryAvailabilites",schemaPath:"#/properties/spaceCategoryAvailabilites/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
if(data.revenue !== undefined){
if(!(validate63(data.revenue, {instancePath:instancePath+"/revenue",parentData:data,parentDataProperty:"revenue",rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
}
if(data.rateSuppressed !== undefined){
if(typeof data.rateSuppressed !== "boolean"){
const err41 = {instancePath:instancePath+"/rateSuppressed",schemaPath:"#/properties/rateSuppressed/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data.payment !== undefined){
if(typeof data.payment !== "string"){
const err42 = {instancePath:instancePath+"/payment",schemaPath:"#/properties/payment/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
if(data.company !== undefined){
if(typeof data.company !== "string"){
const err43 = {instancePath:instancePath+"/company",schemaPath:"#/properties/company/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
if(data.travelAgent !== undefined){
if(typeof data.travelAgent !== "string"){
const err44 = {instancePath:instancePath+"/travelAgent",schemaPath:"#/properties/travelAgent/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err45 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
if(data.updatedAt !== undefined){
let data32 = data.updatedAt;
if((typeof data32 !== "string") && (!(data32 && typeof data32 == "object" && !Array.isArray(data32)))){
const err46 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/type",keyword:"type",params:{type: schema150.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
if(typeof data32 === "string"){
if(!(formats4.validate(data32))){
const err47 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
}
}
else {
const err48 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
validate62.errors = vErrors;
return errors === 0;
}


function validate121(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(Array.isArray(data)){
const len0 = data.length;
for(let i0=0; i0<len0; i0++){
let data0 = data[i0];
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.id !== undefined){
let data1 = data0.id;
if(typeof data1 !== "string"){
const err0 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
const _errs6 = errors;
const _errs7 = errors;
if(!((data1 === "global") || (data1 === "system"))){
const err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid4 = _errs7 === errors;
if(valid4){
const err2 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
else {
errors = _errs6;
if(vErrors !== null){
if(_errs6){
vErrors.length = _errs6;
}
else {
vErrors = null;
}
}
}
}
if(data0.name !== undefined){
if(typeof data0.name !== "string"){
const err3 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data0.date !== undefined){
let data3 = data0.date;
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err4 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/properties/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
const err5 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
if(data0.price !== undefined){
if(!(typeof data0.price == "number")){
const err6 = {instancePath:instancePath+"/" + i0+"/price",schemaPath:"#/items/properties/price/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data0.tax !== undefined){
let data5 = data0.tax;
if((!(typeof data5 == "number")) && (data5 !== null)){
const err7 = {instancePath:instancePath+"/" + i0+"/tax",schemaPath:"#/items/properties/tax/type",keyword:"type",params:{type: schema166.items.properties.tax.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
else {
const err8 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
}
else {
const err9 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
validate121.errors = vErrors;
return errors === 0;
}


function validate114(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="user.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "user";
}
if(data.permissions === undefined){
data.permissions = [];
}
if(data.systems === undefined){
data.systems = [];
}
if(data.firstName === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "firstName"},message:"must have required property '"+"firstName"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.lastName === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "lastName"},message:"must have required property '"+"lastName"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(typeof data.type !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.firstName !== undefined){
if(typeof data.firstName !== "string"){
const err6 = {instancePath:instancePath+"/firstName",schemaPath:"#/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data.lastName !== undefined){
if(typeof data.lastName !== "string"){
const err7 = {instancePath:instancePath+"/lastName",schemaPath:"#/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.phone !== undefined){
let data4 = data.phone;
if((typeof data4 !== "string") && (data4 !== null)){
const err8 = {instancePath:instancePath+"/phone",schemaPath:"#/properties/phone/type",keyword:"type",params:{type: schema254.properties.phone.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(typeof data4 === "string"){
if(!pattern8.test(data4)){
const err9 = {instancePath:instancePath+"/phone",schemaPath:"#/properties/phone/pattern",keyword:"pattern",params:{pattern: "^\\+[0-9]{1,14}$"},message:"must match pattern \""+"^\\+[0-9]{1,14}$"+"\""};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
}
if(data.phoneVerified !== undefined){
if(typeof data.phoneVerified !== "boolean"){
const err10 = {instancePath:instancePath+"/phoneVerified",schemaPath:"#/properties/phoneVerified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.email !== undefined){
let data6 = data.email;
if((typeof data6 !== "string") && (data6 !== null)){
const err11 = {instancePath:instancePath+"/email",schemaPath:"#/properties/email/type",keyword:"type",params:{type: schema254.properties.email.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(typeof data6 === "string"){
if(!(formats88.test(data6))){
const err12 = {instancePath:instancePath+"/email",schemaPath:"#/properties/email/format",keyword:"format",params:{format: "email"},message:"must match format \""+"email"+"\""};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
}
if(data.emailVerified !== undefined){
if(typeof data.emailVerified !== "boolean"){
const err13 = {instancePath:instancePath+"/emailVerified",schemaPath:"#/properties/emailVerified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.address !== undefined){
let data8 = data.address;
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
if(data8.id !== undefined){
if(typeof data8.id !== "string"){
const err14 = {instancePath:instancePath+"/address/id",schemaPath:"definitions.json#/definitions/address/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data8.line1 !== undefined){
if(typeof data8.line1 !== "string"){
const err15 = {instancePath:instancePath+"/address/line1",schemaPath:"definitions.json#/definitions/address/properties/line1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data8.line2 !== undefined){
if(typeof data8.line2 !== "string"){
const err16 = {instancePath:instancePath+"/address/line2",schemaPath:"definitions.json#/definitions/address/properties/line2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data8.line3 !== undefined){
if(typeof data8.line3 !== "string"){
const err17 = {instancePath:instancePath+"/address/line3",schemaPath:"definitions.json#/definitions/address/properties/line3/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data8.city !== undefined){
if(typeof data8.city !== "string"){
const err18 = {instancePath:instancePath+"/address/city",schemaPath:"definitions.json#/definitions/address/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data8.state !== undefined){
if(typeof data8.state !== "string"){
const err19 = {instancePath:instancePath+"/address/state",schemaPath:"definitions.json#/definitions/address/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data8.postalCode !== undefined){
if(typeof data8.postalCode !== "string"){
const err20 = {instancePath:instancePath+"/address/postalCode",schemaPath:"definitions.json#/definitions/address/properties/postalCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data8.countryCode !== undefined){
let data16 = data8.countryCode;
if(typeof data16 === "string"){
if(func3(data16) > 2){
const err21 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(func3(data16) < 2){
const err22 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
else {
const err23 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
}
else {
const err24 = {instancePath:instancePath+"/address",schemaPath:"definitions.json#/definitions/address/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
if(data.secretKey !== undefined){
if(typeof data.secretKey !== "string"){
const err25 = {instancePath:instancePath+"/secretKey",schemaPath:"#/properties/secretKey/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.photo !== undefined){
if(!(validate15(data.photo, {instancePath:instancePath+"/photo",parentData:data,parentDataProperty:"photo",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
}
if(data.jobTitle !== undefined){
if(typeof data.jobTitle !== "string"){
const err26 = {instancePath:instancePath+"/jobTitle",schemaPath:"#/properties/jobTitle/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.dob !== undefined){
if(typeof data.dob !== "string"){
const err27 = {instancePath:instancePath+"/dob",schemaPath:"#/properties/dob/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data.gender !== undefined){
let data21 = data.gender;
if(typeof data21 !== "string"){
const err28 = {instancePath:instancePath+"/gender",schemaPath:"#/properties/gender/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
if(!((data21 === "male") || (data21 === "female"))){
const err29 = {instancePath:instancePath+"/gender",schemaPath:"#/properties/gender/enum",keyword:"enum",params:{allowedValues: schema254.properties.gender.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data.nationality !== undefined){
let data22 = data.nationality;
if(typeof data22 === "string"){
if(func3(data22) > 2){
const err30 = {instancePath:instancePath+"/nationality",schemaPath:"#/properties/nationality/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
if(func3(data22) < 2){
const err31 = {instancePath:instancePath+"/nationality",schemaPath:"#/properties/nationality/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
else {
const err32 = {instancePath:instancePath+"/nationality",schemaPath:"#/properties/nationality/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
let data23 = data.permissions;
if(Array.isArray(data23)){
const len0 = data23.length;
for(let i0=0; i0<len0; i0++){
let data24 = data23[i0];
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
if(data24.organizationId === undefined){
const err33 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/required",keyword:"required",params:{missingProperty: "organizationId"},message:"must have required property '"+"organizationId"+"'"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
if(data24.propertyId === undefined){
const err34 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/required",keyword:"required",params:{missingProperty: "propertyId"},message:"must have required property '"+"propertyId"+"'"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(data24.role === undefined){
const err35 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/required",keyword:"required",params:{missingProperty: "role"},message:"must have required property '"+"role"+"'"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
for(const key0 in data24){
if(!((((((key0 === "organizationId") || (key0 === "propertyId")) || (key0 === "role")) || (key0 === "department")) || (key0 === "policyIds")) || (key0 === "policies"))){
const err36 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
if(data24.organizationId !== undefined){
if(typeof data24.organizationId !== "string"){
const err37 = {instancePath:instancePath+"/permissions/" + i0+"/organizationId",schemaPath:"#/properties/permissions/items/properties/organizationId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
if(data24.propertyId !== undefined){
if(typeof data24.propertyId !== "string"){
const err38 = {instancePath:instancePath+"/permissions/" + i0+"/propertyId",schemaPath:"#/properties/permissions/items/properties/propertyId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
if(data24.role !== undefined){
let data27 = data24.role;
if(typeof data27 !== "string"){
const err39 = {instancePath:instancePath+"/permissions/" + i0+"/role",schemaPath:"#/properties/permissions/items/properties/role/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
if(!((((((data27 === "Guest") || (data27 === "User")) || (data27 === "Manager")) || (data27 === "Maintenance")) || (data27 === "Administrator")) || (data27 === "SuperAdmin"))){
const err40 = {instancePath:instancePath+"/permissions/" + i0+"/role",schemaPath:"#/properties/permissions/items/properties/role/enum",keyword:"enum",params:{allowedValues: schema254.properties.permissions.items.properties.role.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
if(data24.department !== undefined){
if(typeof data24.department !== "string"){
const err41 = {instancePath:instancePath+"/permissions/" + i0+"/department",schemaPath:"#/properties/permissions/items/properties/department/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data24.policyIds !== undefined){
let data29 = data24.policyIds;
if(Array.isArray(data29)){
const len1 = data29.length;
for(let i1=0; i1<len1; i1++){
if(typeof data29[i1] !== "string"){
const err42 = {instancePath:instancePath+"/permissions/" + i0+"/policyIds/" + i1,schemaPath:"#/properties/permissions/items/properties/policyIds/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
}
else {
const err43 = {instancePath:instancePath+"/permissions/" + i0+"/policyIds",schemaPath:"#/properties/permissions/items/properties/policyIds/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
if(data24.policies !== undefined){
let data31 = data24.policies;
if(Array.isArray(data31)){
const len2 = data31.length;
for(let i2=0; i2<len2; i2++){
if(!(validate57(data31[i2], {instancePath:instancePath+"/permissions/" + i0+"/policies/" + i2,parentData:data31,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate57.errors : vErrors.concat(validate57.errors);
errors = vErrors.length;
}
}
}
else {
const err44 = {instancePath:instancePath+"/permissions/" + i0+"/policies",schemaPath:"#/properties/permissions/items/properties/policies/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
}
else {
const err45 = {instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
}
else {
const err46 = {instancePath:instancePath+"/permissions",schemaPath:"#/properties/permissions/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
if(data.notes !== undefined){
let data33 = data.notes;
if(Array.isArray(data33)){
const len3 = data33.length;
for(let i3=0; i3<len3; i3++){
if(typeof data33[i3] !== "string"){
const err47 = {instancePath:instancePath+"/notes/" + i3,schemaPath:"#/properties/notes/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
}
else {
const err48 = {instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
if(data.files !== undefined){
let data35 = data.files;
if(Array.isArray(data35)){
const len4 = data35.length;
for(let i4=0; i4<len4; i4++){
if(!(validate15(data35[i4], {instancePath:instancePath+"/files/" + i4,parentData:data35,parentDataProperty:i4,rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
}
}
else {
const err49 = {instancePath:instancePath+"/files",schemaPath:"#/properties/files/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
if(data.identifications !== undefined){
let data37 = data.identifications;
if(Array.isArray(data37)){
const len5 = data37.length;
for(let i5=0; i5<len5; i5++){
if(!(validate37(data37[i5], {instancePath:instancePath+"/identifications/" + i5,parentData:data37,parentDataProperty:i5,rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
}
}
else {
const err50 = {instancePath:instancePath+"/identifications",schemaPath:"#/properties/identifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
}
if(data.payments !== undefined){
let data39 = data.payments;
if(Array.isArray(data39)){
const len6 = data39.length;
for(let i6=0; i6<len6; i6++){
if(!(validate56(data39[i6], {instancePath:instancePath+"/payments/" + i6,parentData:data39,parentDataProperty:i6,rootData}))){
vErrors = vErrors === null ? validate56.errors : vErrors.concat(validate56.errors);
errors = vErrors.length;
}
}
}
else {
const err51 = {instancePath:instancePath+"/payments",schemaPath:"#/properties/payments/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
if(data.location !== undefined){
let data41 = data.location;
if(data41 && typeof data41 == "object" && !Array.isArray(data41)){
if(data41.accuracy === undefined){
const err52 = {instancePath:instancePath+"/location",schemaPath:"#/properties/location/required",keyword:"required",params:{missingProperty: "accuracy"},message:"must have required property '"+"accuracy"+"'"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
if(data41.latitude === undefined){
const err53 = {instancePath:instancePath+"/location",schemaPath:"#/properties/location/required",keyword:"required",params:{missingProperty: "latitude"},message:"must have required property '"+"latitude"+"'"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
if(data41.longitude === undefined){
const err54 = {instancePath:instancePath+"/location",schemaPath:"#/properties/location/required",keyword:"required",params:{missingProperty: "longitude"},message:"must have required property '"+"longitude"+"'"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
if(data41.timestamp === undefined){
const err55 = {instancePath:instancePath+"/location",schemaPath:"#/properties/location/required",keyword:"required",params:{missingProperty: "timestamp"},message:"must have required property '"+"timestamp"+"'"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
for(const key1 in data41){
if(!((((key1 === "accuracy") || (key1 === "latitude")) || (key1 === "longitude")) || (key1 === "timestamp"))){
const err56 = {instancePath:instancePath+"/location",schemaPath:"#/properties/location/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
}
if(data41.accuracy !== undefined){
let data42 = data41.accuracy;
if((!(typeof data42 == "number")) && (data42 !== null)){
const err57 = {instancePath:instancePath+"/location/accuracy",schemaPath:"#/properties/location/properties/accuracy/type",keyword:"type",params:{type: schema254.properties.location.properties.accuracy.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
}
if(data41.latitude !== undefined){
let data43 = data41.latitude;
if((!(typeof data43 == "number")) && (data43 !== null)){
const err58 = {instancePath:instancePath+"/location/latitude",schemaPath:"#/properties/location/properties/latitude/type",keyword:"type",params:{type: schema254.properties.location.properties.latitude.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
}
}
if(data41.longitude !== undefined){
let data44 = data41.longitude;
if((!(typeof data44 == "number")) && (data44 !== null)){
const err59 = {instancePath:instancePath+"/location/longitude",schemaPath:"#/properties/location/properties/longitude/type",keyword:"type",params:{type: schema254.properties.location.properties.longitude.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
}
}
if(data41.timestamp !== undefined){
let data45 = data41.timestamp;
if((!(typeof data45 == "number")) && (data45 !== null)){
const err60 = {instancePath:instancePath+"/location/timestamp",schemaPath:"#/properties/location/properties/timestamp/type",keyword:"type",params:{type: schema254.properties.location.properties.timestamp.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
}
}
else {
const err61 = {instancePath:instancePath+"/location",schemaPath:"#/properties/location/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
}
if(data.reservations !== undefined){
let data46 = data.reservations;
if(Array.isArray(data46)){
const len7 = data46.length;
for(let i7=0; i7<len7; i7++){
if(!(validate62(data46[i7], {instancePath:instancePath+"/reservations/" + i7,parentData:data46,parentDataProperty:i7,rootData}))){
vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors);
errors = vErrors.length;
}
}
}
else {
const err62 = {instancePath:instancePath+"/reservations",schemaPath:"#/properties/reservations/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
}
}
if(data.spaceName !== undefined){
if(typeof data.spaceName !== "string"){
const err63 = {instancePath:instancePath+"/spaceName",schemaPath:"#/properties/spaceName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err63];
}
else {
vErrors.push(err63);
}
errors++;
}
}
if(data.revenue !== undefined){
if(!(validate121(data.revenue, {instancePath:instancePath+"/revenue",parentData:data,parentDataProperty:"revenue",rootData}))){
vErrors = vErrors === null ? validate121.errors : vErrors.concat(validate121.errors);
errors = vErrors.length;
}
}
if(data.createdAt !== undefined){
let data50 = data.createdAt;
if((typeof data50 !== "string") && (!(data50 && typeof data50 == "object" && !Array.isArray(data50)))){
const err64 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/type",keyword:"type",params:{type: schema103.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err64];
}
else {
vErrors.push(err64);
}
errors++;
}
if(typeof data50 === "string"){
if(!(formats4.validate(data50))){
const err65 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err65];
}
else {
vErrors.push(err65);
}
errors++;
}
}
}
if(data.updatedAt !== undefined){
let data51 = data.updatedAt;
if((typeof data51 !== "string") && (!(data51 && typeof data51 == "object" && !Array.isArray(data51)))){
const err66 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/type",keyword:"type",params:{type: schema150.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err66];
}
else {
vErrors.push(err66);
}
errors++;
}
if(typeof data51 === "string"){
if(!(formats4.validate(data51))){
const err67 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err67];
}
else {
vErrors.push(err67);
}
errors++;
}
}
}
let data52 = data.systems;
if(Array.isArray(data52)){
const len8 = data52.length;
for(let i8=0; i8<len8; i8++){
let data53 = data52[i8];
if(data53 && typeof data53 == "object" && !Array.isArray(data53)){
if(data53.systemId === undefined){
const err68 = {instancePath:instancePath+"/systems/" + i8,schemaPath:"#/properties/systems/items/required",keyword:"required",params:{missingProperty: "systemId"},message:"must have required property '"+"systemId"+"'"};
if(vErrors === null){
vErrors = [err68];
}
else {
vErrors.push(err68);
}
errors++;
}
if(data53.propertyId === undefined){
const err69 = {instancePath:instancePath+"/systems/" + i8,schemaPath:"#/properties/systems/items/required",keyword:"required",params:{missingProperty: "propertyId"},message:"must have required property '"+"propertyId"+"'"};
if(vErrors === null){
vErrors = [err69];
}
else {
vErrors.push(err69);
}
errors++;
}
if(data53.driver === undefined){
const err70 = {instancePath:instancePath+"/systems/" + i8,schemaPath:"#/properties/systems/items/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err70];
}
else {
vErrors.push(err70);
}
errors++;
}
for(const key2 in data53){
if(!(((key2 === "systemId") || (key2 === "propertyId")) || (key2 === "driver"))){
const err71 = {instancePath:instancePath+"/systems/" + i8,schemaPath:"#/properties/systems/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err71];
}
else {
vErrors.push(err71);
}
errors++;
}
}
if(data53.systemId !== undefined){
if(typeof data53.systemId !== "string"){
const err72 = {instancePath:instancePath+"/systems/" + i8+"/systemId",schemaPath:"#/properties/systems/items/properties/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err72];
}
else {
vErrors.push(err72);
}
errors++;
}
}
if(data53.propertyId !== undefined){
if(typeof data53.propertyId !== "string"){
const err73 = {instancePath:instancePath+"/systems/" + i8+"/propertyId",schemaPath:"#/properties/systems/items/properties/propertyId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err73];
}
else {
vErrors.push(err73);
}
errors++;
}
}
if(data53.driver !== undefined){
if(typeof data53.driver !== "string"){
const err74 = {instancePath:instancePath+"/systems/" + i8+"/driver",schemaPath:"#/properties/systems/items/properties/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err74];
}
else {
vErrors.push(err74);
}
errors++;
}
}
}
else {
const err75 = {instancePath:instancePath+"/systems/" + i8,schemaPath:"#/properties/systems/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err75];
}
else {
vErrors.push(err75);
}
errors++;
}
}
}
else {
const err76 = {instancePath:instancePath+"/systems",schemaPath:"#/properties/systems/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err76];
}
else {
vErrors.push(err76);
}
errors++;
}
}
else {
const err77 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err77];
}
else {
vErrors.push(err77);
}
errors++;
}
validate114.errors = vErrors;
return errors === 0;
}
