// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validate = validate107;
const schema241 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"systemUser.json","title":"System User","description":"A system user is a user that originated from an external 3rd party system.","type":"object","required":["firstName","lastName"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"systemUser","enum":["systemUser"]},"driver":{"$ref":"definitions.json#/definitions/driver"},"firstName":{"type":"string"},"lastName":{"type":"string"},"phone":{"type":["string","null"],"pattern":"^\\+[0-9]{1,14}$"},"email":{"type":["string","null"],"format":"email"},"address":{"$ref":"definitions.json#/definitions/address"},"photo":{"type":"string"},"jobTitle":{"type":"string"},"dob":{"type":"string"},"gender":{"type":"string","enum":["male","female"]},"roles":{"type":"array","items":{"type":"string","enum":["Guest","User","Manager","Maintenance","Administrator","SuperAdmin"]}},"nationality":{"type":"string","minLength":2,"maxLength":2},"notes":{"type":"array","items":{"type":"string"}},"files":{"type":"array","items":{"$ref":"mediaFile.json#"}},"identifications":{"type":"array","items":{"$ref":"identification.json#"}},"payments":{"type":"array","items":{"$ref":"payment.json#"}},"revenue":{"$ref":"definitions.json#/definitions/revenue"},"createdAt":{"$ref":"definitions.json#/definitions/createdAt"},"updatedAt":{"$ref":"definitions.json#/definitions/updatedAt"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema21 = {"type":"object","properties":{"id":{"type":"string"},"line1":{"type":"string"},"line2":{"type":"string"},"line3":{"type":"string"},"city":{"type":"string"},"state":{"type":"string"},"postalCode":{"type":"string"},"countryCode":{"type":"string","minLength":2,"maxLength":2}}};
const schema103 = {"type":["string","object"],"format":"date-time"};
const schema150 = {"type":["string","object"],"format":"date-time"};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const pattern8 = new RegExp("^\\+[0-9]{1,14}$", "u");
const formats88 = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];
const func3 = require("ajv/dist/runtime/ucs2length").default;
const schema24 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"mediaFile.json","title":"Media File","description":"Any media file","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"mediaFile","enum":["mediaFile"]},"name":{"type":"string"},"fileHash":{"type":"string"},"category":{"type":"string","description":"This is the category id"},"mimeType":{"type":"string","enum":["image/*","image/jpeg","image/png","image/gif","image/webp","image/avif","image/svg+xml","application/pdf"]},"data":{"type":"string"},"url":{"type":"string","format":"uri"},"width":{"type":"integer","minimum":0},"height":{"type":"integer","minimum":0},"size":{"type":"integer","minimum":0,"description":"Size in bytes"},"uploadUrl":{"type":"string","format":"uri"},"uploadUrlExpires":{"$ref":"definitions.json#/definitions/date"},"createdBy":{"type":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}},"additionalProperties":false,"required":["type"]};
const schema26 = {"type":["string","object"],"format":"date-time"};
const func5 = Object.prototype.hasOwnProperty;
const formats0 = require("ajv-formats/dist/formats").fullFormats.uri;

function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="mediaFile.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "mediaFile";
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema24.properties, key0))){
const err1 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(!(data1 === "mediaFile")){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema24.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.fileHash !== undefined){
if(typeof data.fileHash !== "string"){
const err8 = {instancePath:instancePath+"/fileHash",schemaPath:"#/properties/fileHash/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.category !== undefined){
if(typeof data.category !== "string"){
const err9 = {instancePath:instancePath+"/category",schemaPath:"#/properties/category/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.mimeType !== undefined){
let data5 = data.mimeType;
if(typeof data5 !== "string"){
const err10 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!((((((((data5 === "image/*") || (data5 === "image/jpeg")) || (data5 === "image/png")) || (data5 === "image/gif")) || (data5 === "image/webp")) || (data5 === "image/avif")) || (data5 === "image/svg+xml")) || (data5 === "application/pdf"))){
const err11 = {instancePath:instancePath+"/mimeType",schemaPath:"#/properties/mimeType/enum",keyword:"enum",params:{allowedValues: schema24.properties.mimeType.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
if(data.data !== undefined){
if(typeof data.data !== "string"){
const err12 = {instancePath:instancePath+"/data",schemaPath:"#/properties/data/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.url !== undefined){
let data7 = data.url;
if(typeof data7 === "string"){
if(!(formats0(data7))){
const err13 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
else {
const err14 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.width !== undefined){
let data8 = data.width;
if(!((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8)))){
const err15 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(typeof data8 == "number"){
if(data8 < 0 || isNaN(data8)){
const err16 = {instancePath:instancePath+"/width",schemaPath:"#/properties/width/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
if(data.height !== undefined){
let data9 = data.height;
if(!((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9)))){
const err17 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(typeof data9 == "number"){
if(data9 < 0 || isNaN(data9)){
const err18 = {instancePath:instancePath+"/height",schemaPath:"#/properties/height/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.size !== undefined){
let data10 = data.size;
if(!((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10)))){
const err19 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(typeof data10 == "number"){
if(data10 < 0 || isNaN(data10)){
const err20 = {instancePath:instancePath+"/size",schemaPath:"#/properties/size/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
if(data.uploadUrl !== undefined){
let data11 = data.uploadUrl;
if(typeof data11 === "string"){
if(!(formats0(data11))){
const err21 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
else {
const err22 = {instancePath:instancePath+"/uploadUrl",schemaPath:"#/properties/uploadUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.uploadUrlExpires !== undefined){
let data12 = data.uploadUrlExpires;
if((typeof data12 !== "string") && (!(data12 && typeof data12 == "object" && !Array.isArray(data12)))){
const err23 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(typeof data12 === "string"){
if(!(formats4.validate(data12))){
const err24 = {instancePath:instancePath+"/uploadUrlExpires",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
if(data.createdBy !== undefined){
if(typeof data.createdBy !== "string"){
const err25 = {instancePath:instancePath+"/createdBy",schemaPath:"#/properties/createdBy/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err26 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
validate15.errors = vErrors;
return errors === 0;
}

const schema96 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"identification.json","title":"Identification","type":"object","required":["type"],"oneOf":[{"required":["number"]},{"required":["encryptedNumber"]}],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["driversLicense","passport","identityCard","visa"]},"number":{"string":"string"},"maskedNumber":{"string":"string"},"encryptedNumber":{"string":"string"},"issued":{"type":["string","object"],"format":"date-time"},"expires":{"type":["string","object","null"],"format":"date-time"},"verified":{"type":"boolean"},"matched":{"type":"boolean"},"firstName":{"type":"string"},"lastName":{"type":"string"},"issuingCountry":{"string":"string","minLength":2,"maxLength":2},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};

function validate37(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="identification.json" */;
let vErrors = null;
let errors = 0;
const _errs1 = errors;
let valid0 = false;
let passing0 = null;
const _errs2 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.number === undefined){
const err0 = {instancePath,schemaPath:"#/oneOf/0/required",keyword:"required",params:{missingProperty: "number"},message:"must have required property '"+"number"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs2 === errors;
if(_valid0){
valid0 = true;
passing0 = 0;
}
const _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.encryptedNumber === undefined){
const err1 = {instancePath,schemaPath:"#/oneOf/1/required",keyword:"required",params:{missingProperty: "encryptedNumber"},message:"must have required property '"+"encryptedNumber"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs3 === errors;
if(_valid0 && valid0){
valid0 = false;
passing0 = [passing0, 1];
}
else {
if(_valid0){
valid0 = true;
passing0 = 1;
}
}
if(!valid0){
const err2 = {instancePath,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
else {
errors = _errs1;
if(vErrors !== null){
if(_errs1){
vErrors.length = _errs1;
}
else {
vErrors = null;
}
}
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs7 = errors;
const _errs8 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid3 = _errs8 === errors;
if(valid3){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs7;
if(vErrors !== null){
if(_errs7){
vErrors.length = _errs7;
}
else {
vErrors = null;
}
}
}
}
if(data.type !== undefined){
let data1 = data.type;
if(typeof data1 !== "string"){
const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!((((data1 === "driversLicense") || (data1 === "passport")) || (data1 === "identityCard")) || (data1 === "visa"))){
const err8 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema96.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.issued !== undefined){
let data2 = data.issued;
if((typeof data2 !== "string") && (!(data2 && typeof data2 == "object" && !Array.isArray(data2)))){
const err9 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/type",keyword:"type",params:{type: schema96.properties.issued.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(typeof data2 === "string"){
if(!(formats4.validate(data2))){
const err10 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
if(data.expires !== undefined){
let data3 = data.expires;
if(((typeof data3 !== "string") && (!(data3 && typeof data3 == "object" && !Array.isArray(data3)))) && (data3 !== null)){
const err11 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/type",keyword:"type",params:{type: schema96.properties.expires.type},message:"must be string,object,null"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err12 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
}
if(data.verified !== undefined){
if(typeof data.verified !== "boolean"){
const err13 = {instancePath:instancePath+"/verified",schemaPath:"#/properties/verified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.matched !== undefined){
if(typeof data.matched !== "boolean"){
const err14 = {instancePath:instancePath+"/matched",schemaPath:"#/properties/matched/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
if(data.firstName !== undefined){
if(typeof data.firstName !== "string"){
const err15 = {instancePath:instancePath+"/firstName",schemaPath:"#/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.lastName !== undefined){
if(typeof data.lastName !== "string"){
const err16 = {instancePath:instancePath+"/lastName",schemaPath:"#/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.issuingCountry !== undefined){
let data8 = data.issuingCountry;
if(typeof data8 === "string"){
if(func3(data8) > 2){
const err17 = {instancePath:instancePath+"/issuingCountry",schemaPath:"#/properties/issuingCountry/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(func3(data8) < 2){
const err18 = {instancePath:instancePath+"/issuingCountry",schemaPath:"#/properties/issuingCountry/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err19 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
}
else {
const err20 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
validate37.errors = vErrors;
return errors === 0;
}

const schema151 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"payment.json","title":"Payment","type":"object","required":["type","maskedNumber","expires"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["amex","visa","masterCard","maestro","discover","diners","jcb","applePay","alipay","chinaUnionPay","vpay"]},"enabled":{"type":"boolean","default":true},"storageData":{"type":["string","null"]},"maskedNumber":{"string":"string"},"issued":{"type":["string","null"]},"expires":{"string":"string"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};

function validate56(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="payment.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enabled === undefined){
data.enabled = true;
}
if(data.type === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.maskedNumber === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "maskedNumber"},message:"must have required property '"+"maskedNumber"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.expires === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "expires"},message:"must have required property '"+"expires"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err3 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err5 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.type !== undefined){
let data1 = data.type;
if(typeof data1 !== "string"){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((((((((data1 === "amex") || (data1 === "visa")) || (data1 === "masterCard")) || (data1 === "maestro")) || (data1 === "discover")) || (data1 === "diners")) || (data1 === "jcb")) || (data1 === "applePay")) || (data1 === "alipay")) || (data1 === "chinaUnionPay")) || (data1 === "vpay"))){
const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema151.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(typeof data.enabled !== "boolean"){
const err8 = {instancePath:instancePath+"/enabled",schemaPath:"#/properties/enabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data.storageData !== undefined){
let data3 = data.storageData;
if((typeof data3 !== "string") && (data3 !== null)){
const err9 = {instancePath:instancePath+"/storageData",schemaPath:"#/properties/storageData/type",keyword:"type",params:{type: schema151.properties.storageData.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.issued !== undefined){
let data4 = data.issued;
if((typeof data4 !== "string") && (data4 !== null)){
const err10 = {instancePath:instancePath+"/issued",schemaPath:"#/properties/issued/type",keyword:"type",params:{type: schema151.properties.issued.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err11 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
}
else {
const err12 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
validate56.errors = vErrors;
return errors === 0;
}

const schema166 = {"type":"array","items":{"type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"date":{"type":"string","format":"date-time"},"price":{"type":"number"},"tax":{"type":["number","null"]}}}};

function validate111(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(Array.isArray(data)){
const len0 = data.length;
for(let i0=0; i0<len0; i0++){
let data0 = data[i0];
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.id !== undefined){
let data1 = data0.id;
if(typeof data1 !== "string"){
const err0 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
const _errs6 = errors;
const _errs7 = errors;
if(!((data1 === "global") || (data1 === "system"))){
const err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid4 = _errs7 === errors;
if(valid4){
const err2 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
else {
errors = _errs6;
if(vErrors !== null){
if(_errs6){
vErrors.length = _errs6;
}
else {
vErrors = null;
}
}
}
}
if(data0.name !== undefined){
if(typeof data0.name !== "string"){
const err3 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
if(data0.date !== undefined){
let data3 = data0.date;
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err4 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/properties/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
const err5 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
if(data0.price !== undefined){
if(!(typeof data0.price == "number")){
const err6 = {instancePath:instancePath+"/" + i0+"/price",schemaPath:"#/items/properties/price/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data0.tax !== undefined){
let data5 = data0.tax;
if((!(typeof data5 == "number")) && (data5 !== null)){
const err7 = {instancePath:instancePath+"/" + i0+"/tax",schemaPath:"#/items/properties/tax/type",keyword:"type",params:{type: schema166.items.properties.tax.type},message:"must be number,null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
else {
const err8 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
}
else {
const err9 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
validate111.errors = vErrors;
return errors === 0;
}


function validate107(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="systemUser.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "systemUser";
}
if(data.firstName === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "firstName"},message:"must have required property '"+"firstName"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.lastName === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "lastName"},message:"must have required property '"+"lastName"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(!(data1 === "systemUser")){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema241.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.driver !== undefined){
let data2 = data.driver;
if(typeof data2 !== "string"){
const err7 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data2 === "aws-kinesis") || (data2 === "butler")) || (data2 === "crestron")) || (data2 === "dell")) || (data2 === "dmp")) || (data2 === "doorbird")) || (data2 === "dormakaba")) || (data2 === "dsc")) || (data2 === "ecobee")) || (data2 === "epson")) || (data2 === "geovision-rs")) || (data2 === "geovision-as-manager")) || (data2 === "honeywell-vista")) || (data2 === "igor")) || (data2 === "inncom")) || (data2 === "isapi")) || (data2 === "kohost-k7")) || (data2 === "kohost")) || (data2 === "lg")) || (data2 === "lg-webos")) || (data2 === "lapi")) || (data2 === "lirc")) || (data2 === "mews")) || (data2 === "mht")) || (data2 === "paxton")) || (data2 === "pelican-wireless")) || (data2 === "power-shades")) || (data2 === "rachio")) || (data2 === "rebrandly")) || (data2 === "rtsp")) || (data2 === "salto")) || (data2 === "salto-irn")) || (data2 === "samsung")) || (data2 === "se")) || (data2 === "sendgrid")) || (data2 === "sonifi")) || (data2 === "stay-n-touch")) || (data2 === "storable")) || (data2 === "twilio")) || (data2 === "unifi")) || (data2 === "valcom")) || (data2 === "vizio")) || (data2 === "wisenet")) || (data2 === "cloudflare-images")) || (data2 === "cloudflare-stream")) || (data2 === "insperia-privacy"))){
const err8 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
if(data.firstName !== undefined){
if(typeof data.firstName !== "string"){
const err9 = {instancePath:instancePath+"/firstName",schemaPath:"#/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.lastName !== undefined){
if(typeof data.lastName !== "string"){
const err10 = {instancePath:instancePath+"/lastName",schemaPath:"#/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.phone !== undefined){
let data5 = data.phone;
if((typeof data5 !== "string") && (data5 !== null)){
const err11 = {instancePath:instancePath+"/phone",schemaPath:"#/properties/phone/type",keyword:"type",params:{type: schema241.properties.phone.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(typeof data5 === "string"){
if(!pattern8.test(data5)){
const err12 = {instancePath:instancePath+"/phone",schemaPath:"#/properties/phone/pattern",keyword:"pattern",params:{pattern: "^\\+[0-9]{1,14}$"},message:"must match pattern \""+"^\\+[0-9]{1,14}$"+"\""};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
}
if(data.email !== undefined){
let data6 = data.email;
if((typeof data6 !== "string") && (data6 !== null)){
const err13 = {instancePath:instancePath+"/email",schemaPath:"#/properties/email/type",keyword:"type",params:{type: schema241.properties.email.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
if(typeof data6 === "string"){
if(!(formats88.test(data6))){
const err14 = {instancePath:instancePath+"/email",schemaPath:"#/properties/email/format",keyword:"format",params:{format: "email"},message:"must match format \""+"email"+"\""};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
}
if(data.address !== undefined){
let data7 = data.address;
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
if(data7.id !== undefined){
if(typeof data7.id !== "string"){
const err15 = {instancePath:instancePath+"/address/id",schemaPath:"definitions.json#/definitions/address/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data7.line1 !== undefined){
if(typeof data7.line1 !== "string"){
const err16 = {instancePath:instancePath+"/address/line1",schemaPath:"definitions.json#/definitions/address/properties/line1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data7.line2 !== undefined){
if(typeof data7.line2 !== "string"){
const err17 = {instancePath:instancePath+"/address/line2",schemaPath:"definitions.json#/definitions/address/properties/line2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data7.line3 !== undefined){
if(typeof data7.line3 !== "string"){
const err18 = {instancePath:instancePath+"/address/line3",schemaPath:"definitions.json#/definitions/address/properties/line3/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data7.city !== undefined){
if(typeof data7.city !== "string"){
const err19 = {instancePath:instancePath+"/address/city",schemaPath:"definitions.json#/definitions/address/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data7.state !== undefined){
if(typeof data7.state !== "string"){
const err20 = {instancePath:instancePath+"/address/state",schemaPath:"definitions.json#/definitions/address/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data7.postalCode !== undefined){
if(typeof data7.postalCode !== "string"){
const err21 = {instancePath:instancePath+"/address/postalCode",schemaPath:"definitions.json#/definitions/address/properties/postalCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
if(data7.countryCode !== undefined){
let data15 = data7.countryCode;
if(typeof data15 === "string"){
if(func3(data15) > 2){
const err22 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
if(func3(data15) < 2){
const err23 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
else {
const err24 = {instancePath:instancePath+"/address/countryCode",schemaPath:"definitions.json#/definitions/address/properties/countryCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
else {
const err25 = {instancePath:instancePath+"/address",schemaPath:"definitions.json#/definitions/address/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.photo !== undefined){
if(typeof data.photo !== "string"){
const err26 = {instancePath:instancePath+"/photo",schemaPath:"#/properties/photo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.jobTitle !== undefined){
if(typeof data.jobTitle !== "string"){
const err27 = {instancePath:instancePath+"/jobTitle",schemaPath:"#/properties/jobTitle/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data.dob !== undefined){
if(typeof data.dob !== "string"){
const err28 = {instancePath:instancePath+"/dob",schemaPath:"#/properties/dob/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data.gender !== undefined){
let data19 = data.gender;
if(typeof data19 !== "string"){
const err29 = {instancePath:instancePath+"/gender",schemaPath:"#/properties/gender/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
if(!((data19 === "male") || (data19 === "female"))){
const err30 = {instancePath:instancePath+"/gender",schemaPath:"#/properties/gender/enum",keyword:"enum",params:{allowedValues: schema241.properties.gender.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
if(data.roles !== undefined){
let data20 = data.roles;
if(Array.isArray(data20)){
const len0 = data20.length;
for(let i0=0; i0<len0; i0++){
let data21 = data20[i0];
if(typeof data21 !== "string"){
const err31 = {instancePath:instancePath+"/roles/" + i0,schemaPath:"#/properties/roles/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
if(!((((((data21 === "Guest") || (data21 === "User")) || (data21 === "Manager")) || (data21 === "Maintenance")) || (data21 === "Administrator")) || (data21 === "SuperAdmin"))){
const err32 = {instancePath:instancePath+"/roles/" + i0,schemaPath:"#/properties/roles/items/enum",keyword:"enum",params:{allowedValues: schema241.properties.roles.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
}
else {
const err33 = {instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data.nationality !== undefined){
let data22 = data.nationality;
if(typeof data22 === "string"){
if(func3(data22) > 2){
const err34 = {instancePath:instancePath+"/nationality",schemaPath:"#/properties/nationality/maxLength",keyword:"maxLength",params:{limit: 2},message:"must NOT have more than 2 characters"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(func3(data22) < 2){
const err35 = {instancePath:instancePath+"/nationality",schemaPath:"#/properties/nationality/minLength",keyword:"minLength",params:{limit: 2},message:"must NOT have fewer than 2 characters"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
else {
const err36 = {instancePath:instancePath+"/nationality",schemaPath:"#/properties/nationality/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
if(data.notes !== undefined){
let data23 = data.notes;
if(Array.isArray(data23)){
const len1 = data23.length;
for(let i1=0; i1<len1; i1++){
if(typeof data23[i1] !== "string"){
const err37 = {instancePath:instancePath+"/notes/" + i1,schemaPath:"#/properties/notes/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
}
else {
const err38 = {instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
if(data.files !== undefined){
let data25 = data.files;
if(Array.isArray(data25)){
const len2 = data25.length;
for(let i2=0; i2<len2; i2++){
if(!(validate15(data25[i2], {instancePath:instancePath+"/files/" + i2,parentData:data25,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
}
}
else {
const err39 = {instancePath:instancePath+"/files",schemaPath:"#/properties/files/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
if(data.identifications !== undefined){
let data27 = data.identifications;
if(Array.isArray(data27)){
const len3 = data27.length;
for(let i3=0; i3<len3; i3++){
if(!(validate37(data27[i3], {instancePath:instancePath+"/identifications/" + i3,parentData:data27,parentDataProperty:i3,rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
}
}
else {
const err40 = {instancePath:instancePath+"/identifications",schemaPath:"#/properties/identifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
if(data.payments !== undefined){
let data29 = data.payments;
if(Array.isArray(data29)){
const len4 = data29.length;
for(let i4=0; i4<len4; i4++){
if(!(validate56(data29[i4], {instancePath:instancePath+"/payments/" + i4,parentData:data29,parentDataProperty:i4,rootData}))){
vErrors = vErrors === null ? validate56.errors : vErrors.concat(validate56.errors);
errors = vErrors.length;
}
}
}
else {
const err41 = {instancePath:instancePath+"/payments",schemaPath:"#/properties/payments/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data.revenue !== undefined){
if(!(validate111(data.revenue, {instancePath:instancePath+"/revenue",parentData:data,parentDataProperty:"revenue",rootData}))){
vErrors = vErrors === null ? validate111.errors : vErrors.concat(validate111.errors);
errors = vErrors.length;
}
}
if(data.createdAt !== undefined){
let data32 = data.createdAt;
if((typeof data32 !== "string") && (!(data32 && typeof data32 == "object" && !Array.isArray(data32)))){
const err42 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/type",keyword:"type",params:{type: schema103.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
if(typeof data32 === "string"){
if(!(formats4.validate(data32))){
const err43 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/createdAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
}
if(data.updatedAt !== undefined){
let data33 = data.updatedAt;
if((typeof data33 !== "string") && (!(data33 && typeof data33 == "object" && !Array.isArray(data33)))){
const err44 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/type",keyword:"type",params:{type: schema150.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
if(typeof data33 === "string"){
if(!(formats4.validate(data33))){
const err45 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/updatedAt/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err46 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
}
else {
const err47 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
validate107.errors = vErrors;
return errors === 0;
}
