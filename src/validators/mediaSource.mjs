// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validate = validate48;
const schema121 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"mediaSource.json","title":"Media Source","description":"Any media source","type":"object","required":["id","type","discriminator","audio","video","driver"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"mediaSource","enum":["mediaSource"]},"discriminator":{"type":"string","enum":["tv","dvr","appleTv","discPlayer","mediaPlayer","paSystem","uncontrolledDevice"]},"playlists":{"type":"array","items":{"type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"$ref":"definitions.json#/definitions/name"}}}},"remote":{"type":"string","enum":["MR22GA","XRT260","XRT270","HOF-16K 1.2","219863500","SONIFI","AKB76039803","BN59-01388A"]},"name":{"$ref":"definitions.json#/definitions/name"},"driver":{"$ref":"definitions.json#/definitions/driver"},"offline":{"type":"boolean"},"audio":{"type":"boolean"},"video":{"type":"boolean"},"powerFeedback":{"type":"boolean"},"volumeFeedback":{"type":"boolean"},"muted":{"type":"boolean"},"volume":{"type":"number","minimum":0,"maximum":100},"brightness":{"type":"number","minimum":0,"maximum":100},"contrast":{"type":"number","minimum":0,"maximum":100},"power":{"type":"string","enum":["on","off"]},"input":{"type":"string"},"supportedInputs":{"type":"array","items":{"type":"string"}},"supportedOutputs":{"type":"array","items":{"type":"string"}},"command":{"type":["string","null"],"enum":["mute","volumeUp","volumeDown","brightnessUp","brightnessDown","channelUp","channelDown","number0","number1","number2","number3","number4","number5","number6","number7","number8","number9","lastChannel","display","favoriteChannel","play","playing","stop","stopped","pause","paused","fastForward","fastForwarding","rewind","rewinding","instantReplay","record","ac3","pvrMenu","guide","menu","menuUp","menuDown","menuLeft","menuRight","pageUp","pageDown","select","exit","input","power","enterChannel","enterVolume","enterBrightness","enterContrast","number10","number11","number12","number13","number14","number15","number16","number10Plus","number20Plus","number100","dash","threeChan","threeD","sixChan","a","add","alarm","am","analog","angle","antenna","antennaEast","antennaWest","aspect","audio1","audio2","audio3","audioDumming","audioLevelDown","audioLevelUp","b","back","c","component1","component2","component3","d","home","list","liveTv","discreteInputCable","powerOff","powerOn","setupMenu","skipForward","skipReverse","video1","video2","video3","video4","video5","details","hdmi1","hdmi2","hdmi3","cecDeviceList","mtsSap","red","green","yellow","blue","alert","order"]},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"additionalProperties":false};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema124 = {"type":"string"};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema16 = {"type":"array","uniqueItems":true,"items":{"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]}};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const schema20 = {"type":"number","minimum":0};
const func5 = Object.prototype.hasOwnProperty;
const func0 = require("ajv/dist/runtime/equal").default;
const schema17 = {"type":["object","null"],"properties":{"name":{"type":"string","$ref":"#/definitions/supportedNotifications/items"},"timestamp":{"type":"number","minimum":1655907956593},"description":{"type":"string"}}};
const schema18 = {"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]};

function validate49(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate49.errors = vErrors;
return errors === 0;
}


function validate48(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="mediaSource.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "mediaSource";
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.discriminator === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "discriminator"},message:"must have required property '"+"discriminator"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.audio === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "audio"},message:"must have required property '"+"audio"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.video === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "video"},message:"must have required property '"+"video"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.driver === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
for(const key0 in data){
if(!(func5.call(schema121.properties, key0))){
const err6 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err7 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
const _errs5 = errors;
const _errs6 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err8 = {};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
var valid2 = _errs6 === errors;
if(valid2){
const err9 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err10 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(!(data1 === "mediaSource")){
const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema121.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(data.discriminator !== undefined){
let data2 = data.discriminator;
if(typeof data2 !== "string"){
const err12 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!(((((((data2 === "tv") || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "paSystem")) || (data2 === "uncontrolledDevice"))){
const err13 = {instancePath:instancePath+"/discriminator",schemaPath:"#/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema121.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.playlists !== undefined){
let data3 = data.playlists;
if(Array.isArray(data3)){
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
let data4 = data3[i0];
if(data4 && typeof data4 == "object" && !Array.isArray(data4)){
if(data4.id !== undefined){
let data5 = data4.id;
if(typeof data5 !== "string"){
const err14 = {instancePath:instancePath+"/playlists/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
const _errs18 = errors;
const _errs19 = errors;
if(!((data5 === "global") || (data5 === "system"))){
const err15 = {};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
var valid7 = _errs19 === errors;
if(valid7){
const err16 = {instancePath:instancePath+"/playlists/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
else {
errors = _errs18;
if(vErrors !== null){
if(_errs18){
vErrors.length = _errs18;
}
else {
vErrors = null;
}
}
}
}
if(data4.name !== undefined){
if(typeof data4.name !== "string"){
const err17 = {instancePath:instancePath+"/playlists/" + i0+"/name",schemaPath:"definitions.json#/definitions/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
}
else {
const err18 = {instancePath:instancePath+"/playlists/" + i0,schemaPath:"#/properties/playlists/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
else {
const err19 = {instancePath:instancePath+"/playlists",schemaPath:"#/properties/playlists/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.remote !== undefined){
let data7 = data.remote;
if(typeof data7 !== "string"){
const err20 = {instancePath:instancePath+"/remote",schemaPath:"#/properties/remote/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
if(!((((((((data7 === "MR22GA") || (data7 === "XRT260")) || (data7 === "XRT270")) || (data7 === "HOF-16K 1.2")) || (data7 === "219863500")) || (data7 === "SONIFI")) || (data7 === "AKB76039803")) || (data7 === "BN59-01388A"))){
const err21 = {instancePath:instancePath+"/remote",schemaPath:"#/properties/remote/enum",keyword:"enum",params:{allowedValues: schema121.properties.remote.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err22 = {instancePath:instancePath+"/name",schemaPath:"definitions.json#/definitions/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.driver !== undefined){
let data9 = data.driver;
if(typeof data9 !== "string"){
const err23 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data9 === "aws-kinesis") || (data9 === "butler")) || (data9 === "crestron")) || (data9 === "dell")) || (data9 === "dmp")) || (data9 === "doorbird")) || (data9 === "dormakaba")) || (data9 === "dsc")) || (data9 === "ecobee")) || (data9 === "epson")) || (data9 === "geovision-rs")) || (data9 === "geovision-as-manager")) || (data9 === "honeywell-vista")) || (data9 === "igor")) || (data9 === "inncom")) || (data9 === "isapi")) || (data9 === "kohost-k7")) || (data9 === "kohost")) || (data9 === "lg")) || (data9 === "lg-webos")) || (data9 === "lapi")) || (data9 === "lirc")) || (data9 === "mews")) || (data9 === "mht")) || (data9 === "paxton")) || (data9 === "pelican-wireless")) || (data9 === "power-shades")) || (data9 === "rachio")) || (data9 === "rebrandly")) || (data9 === "rtsp")) || (data9 === "salto")) || (data9 === "salto-irn")) || (data9 === "samsung")) || (data9 === "se")) || (data9 === "sendgrid")) || (data9 === "sonifi")) || (data9 === "stay-n-touch")) || (data9 === "storable")) || (data9 === "twilio")) || (data9 === "unifi")) || (data9 === "valcom")) || (data9 === "vizio")) || (data9 === "wisenet")) || (data9 === "cloudflare-images")) || (data9 === "cloudflare-stream")) || (data9 === "insperia-privacy"))){
const err24 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err25 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.audio !== undefined){
if(typeof data.audio !== "boolean"){
const err26 = {instancePath:instancePath+"/audio",schemaPath:"#/properties/audio/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.video !== undefined){
if(typeof data.video !== "boolean"){
const err27 = {instancePath:instancePath+"/video",schemaPath:"#/properties/video/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
if(data.powerFeedback !== undefined){
if(typeof data.powerFeedback !== "boolean"){
const err28 = {instancePath:instancePath+"/powerFeedback",schemaPath:"#/properties/powerFeedback/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data.volumeFeedback !== undefined){
if(typeof data.volumeFeedback !== "boolean"){
const err29 = {instancePath:instancePath+"/volumeFeedback",schemaPath:"#/properties/volumeFeedback/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
if(data.muted !== undefined){
if(typeof data.muted !== "boolean"){
const err30 = {instancePath:instancePath+"/muted",schemaPath:"#/properties/muted/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
if(data.volume !== undefined){
let data16 = data.volume;
if(typeof data16 == "number"){
if(data16 > 100 || isNaN(data16)){
const err31 = {instancePath:instancePath+"/volume",schemaPath:"#/properties/volume/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
if(data16 < 0 || isNaN(data16)){
const err32 = {instancePath:instancePath+"/volume",schemaPath:"#/properties/volume/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
else {
const err33 = {instancePath:instancePath+"/volume",schemaPath:"#/properties/volume/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data.brightness !== undefined){
let data17 = data.brightness;
if(typeof data17 == "number"){
if(data17 > 100 || isNaN(data17)){
const err34 = {instancePath:instancePath+"/brightness",schemaPath:"#/properties/brightness/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(data17 < 0 || isNaN(data17)){
const err35 = {instancePath:instancePath+"/brightness",schemaPath:"#/properties/brightness/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
else {
const err36 = {instancePath:instancePath+"/brightness",schemaPath:"#/properties/brightness/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
if(data.contrast !== undefined){
let data18 = data.contrast;
if(typeof data18 == "number"){
if(data18 > 100 || isNaN(data18)){
const err37 = {instancePath:instancePath+"/contrast",schemaPath:"#/properties/contrast/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
if(data18 < 0 || isNaN(data18)){
const err38 = {instancePath:instancePath+"/contrast",schemaPath:"#/properties/contrast/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
else {
const err39 = {instancePath:instancePath+"/contrast",schemaPath:"#/properties/contrast/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
if(data.power !== undefined){
let data19 = data.power;
if(typeof data19 !== "string"){
const err40 = {instancePath:instancePath+"/power",schemaPath:"#/properties/power/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
if(!((data19 === "on") || (data19 === "off"))){
const err41 = {instancePath:instancePath+"/power",schemaPath:"#/properties/power/enum",keyword:"enum",params:{allowedValues: schema121.properties.power.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data.input !== undefined){
if(typeof data.input !== "string"){
const err42 = {instancePath:instancePath+"/input",schemaPath:"#/properties/input/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
if(data.supportedInputs !== undefined){
let data21 = data.supportedInputs;
if(Array.isArray(data21)){
const len1 = data21.length;
for(let i1=0; i1<len1; i1++){
if(typeof data21[i1] !== "string"){
const err43 = {instancePath:instancePath+"/supportedInputs/" + i1,schemaPath:"#/properties/supportedInputs/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
}
else {
const err44 = {instancePath:instancePath+"/supportedInputs",schemaPath:"#/properties/supportedInputs/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
if(data.supportedOutputs !== undefined){
let data23 = data.supportedOutputs;
if(Array.isArray(data23)){
const len2 = data23.length;
for(let i2=0; i2<len2; i2++){
if(typeof data23[i2] !== "string"){
const err45 = {instancePath:instancePath+"/supportedOutputs/" + i2,schemaPath:"#/properties/supportedOutputs/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
}
else {
const err46 = {instancePath:instancePath+"/supportedOutputs",schemaPath:"#/properties/supportedOutputs/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
if(data.command !== undefined){
let data25 = data.command;
if((typeof data25 !== "string") && (data25 !== null)){
const err47 = {instancePath:instancePath+"/command",schemaPath:"#/properties/command/type",keyword:"type",params:{type: schema121.properties.command.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
if(!(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data25 === "mute") || (data25 === "volumeUp")) || (data25 === "volumeDown")) || (data25 === "brightnessUp")) || (data25 === "brightnessDown")) || (data25 === "channelUp")) || (data25 === "channelDown")) || (data25 === "number0")) || (data25 === "number1")) || (data25 === "number2")) || (data25 === "number3")) || (data25 === "number4")) || (data25 === "number5")) || (data25 === "number6")) || (data25 === "number7")) || (data25 === "number8")) || (data25 === "number9")) || (data25 === "lastChannel")) || (data25 === "display")) || (data25 === "favoriteChannel")) || (data25 === "play")) || (data25 === "playing")) || (data25 === "stop")) || (data25 === "stopped")) || (data25 === "pause")) || (data25 === "paused")) || (data25 === "fastForward")) || (data25 === "fastForwarding")) || (data25 === "rewind")) || (data25 === "rewinding")) || (data25 === "instantReplay")) || (data25 === "record")) || (data25 === "ac3")) || (data25 === "pvrMenu")) || (data25 === "guide")) || (data25 === "menu")) || (data25 === "menuUp")) || (data25 === "menuDown")) || (data25 === "menuLeft")) || (data25 === "menuRight")) || (data25 === "pageUp")) || (data25 === "pageDown")) || (data25 === "select")) || (data25 === "exit")) || (data25 === "input")) || (data25 === "power")) || (data25 === "enterChannel")) || (data25 === "enterVolume")) || (data25 === "enterBrightness")) || (data25 === "enterContrast")) || (data25 === "number10")) || (data25 === "number11")) || (data25 === "number12")) || (data25 === "number13")) || (data25 === "number14")) || (data25 === "number15")) || (data25 === "number16")) || (data25 === "number10Plus")) || (data25 === "number20Plus")) || (data25 === "number100")) || (data25 === "dash")) || (data25 === "threeChan")) || (data25 === "threeD")) || (data25 === "sixChan")) || (data25 === "a")) || (data25 === "add")) || (data25 === "alarm")) || (data25 === "am")) || (data25 === "analog")) || (data25 === "angle")) || (data25 === "antenna")) || (data25 === "antennaEast")) || (data25 === "antennaWest")) || (data25 === "aspect")) || (data25 === "audio1")) || (data25 === "audio2")) || (data25 === "audio3")) || (data25 === "audioDumming")) || (data25 === "audioLevelDown")) || (data25 === "audioLevelUp")) || (data25 === "b")) || (data25 === "back")) || (data25 === "c")) || (data25 === "component1")) || (data25 === "component2")) || (data25 === "component3")) || (data25 === "d")) || (data25 === "home")) || (data25 === "list")) || (data25 === "liveTv")) || (data25 === "discreteInputCable")) || (data25 === "powerOff")) || (data25 === "powerOn")) || (data25 === "setupMenu")) || (data25 === "skipForward")) || (data25 === "skipReverse")) || (data25 === "video1")) || (data25 === "video2")) || (data25 === "video3")) || (data25 === "video4")) || (data25 === "video5")) || (data25 === "details")) || (data25 === "hdmi1")) || (data25 === "hdmi2")) || (data25 === "hdmi3")) || (data25 === "cecDeviceList")) || (data25 === "mtsSap")) || (data25 === "red")) || (data25 === "green")) || (data25 === "yellow")) || (data25 === "blue")) || (data25 === "alert")) || (data25 === "order"))){
const err48 = {instancePath:instancePath+"/command",schemaPath:"#/properties/command/enum",keyword:"enum",params:{allowedValues: schema121.properties.command.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data26 = data.supportedNotifications;
if(Array.isArray(data26)){
const len3 = data26.length;
for(let i3=0; i3<len3; i3++){
let data27 = data26[i3];
if(!((((((((((((((((((((((((((((data27 === "button 1") || (data27 === "button 2")) || (data27 === "button 3")) || (data27 === "button 4")) || (data27 === "button 5")) || (data27 === "idle")) || (data27 === "powerHasBeedApplied")) || (data27 === "acMainsDisconnected")) || (data27 === "acMainsReconnected")) || (data27 === "replaceBatterySoon")) || (data27 === "replaceBatteryNow")) || (data27 === "batteryOk")) || (data27 === "hardwareFailure")) || (data27 === "softwareFailure")) || (data27 === "hardwareFailureWithCode")) || (data27 === "softwareFailureWithCode")) || (data27 === "motionDetection")) || (data27 === "airFilterNeedsCleaned")) || (data27 === "airFilterNeedsReplaced")) || (data27 === "smokeDetected")) || (data27 === "outsideSafeTemperatureRange")) || (data27 === "outsideSafeHumidityRange")) || (data27 === "scheduleMaintenance")) || (data27 === "doorAjar")) || (data27 === "communicationFailure")) || (data27 === "communicationOk")) || (data27 === "burglarAlarm")) || (data27 === "fireAlarm"))){
const err49 = {instancePath:instancePath+"/supportedNotifications/" + i3,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
let i4 = data26.length;
let j0;
if(i4 > 1){
outer0:
for(;i4--;){
for(j0 = i4; j0--;){
if(func0(data26[i4], data26[j0])){
const err50 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i4, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i4+" are identical)"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err51 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate49(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate49.errors : vErrors.concat(validate49.errors);
errors = vErrors.length;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err52 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
if(data.watts !== undefined){
let data30 = data.watts;
if(typeof data30 == "number"){
if(data30 < 0 || isNaN(data30)){
const err53 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
else {
const err54 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
}
else {
const err55 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
validate48.errors = vErrors;
return errors === 0;
}
