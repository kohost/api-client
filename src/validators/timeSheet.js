// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateTimeSheet = validate113;
const schema250 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"timeSheet.json","title":"Time Sheet","type":"object","required":["userId","day"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"timeSheet","enum":["timeSheet"]},"userId":{"$ref":"definitions.json#/definitions/id"},"day":{"type":["string","object"],"format":"date-time"},"locked":{"type":"boolean","default":false,"description":"If true, the time sheet is locked and cannot be modified"},"timeEntries":{"type":"array","default":[],"items":{"type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"discriminator":{"type":"string","enum":["working","driving","meeting","break"]},"start":{"type":["string","object"],"format":"date-time"},"end":{"type":["string","object"],"format":"date-time"},"comment":{"type":"string"},"ticketId":{"type":"string"}},"required":["start","discriminator"],"additionalProperties":false}}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];

function validate113(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="timeSheet.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "timeSheet";
}
if(data.locked === undefined){
data.locked = false;
}
if(data.timeEntries === undefined){
data.timeEntries = [];
}
if(data.userId === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "userId"},message:"must have required property '"+"userId"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.day === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "day"},message:"must have required property '"+"day"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err5 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(!(data1 === "timeSheet")){
const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema250.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.userId !== undefined){
let data2 = data.userId;
if(typeof data2 !== "string"){
const err7 = {instancePath:instancePath+"/userId",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
const _errs11 = errors;
const _errs12 = errors;
if(!((data2 === "global") || (data2 === "system"))){
const err8 = {};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
var valid4 = _errs12 === errors;
if(valid4){
const err9 = {instancePath:instancePath+"/userId",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
}
if(data.day !== undefined){
let data3 = data.day;
if((typeof data3 !== "string") && (!(data3 && typeof data3 == "object" && !Array.isArray(data3)))){
const err10 = {instancePath:instancePath+"/day",schemaPath:"#/properties/day/type",keyword:"type",params:{type: schema250.properties.day.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err11 = {instancePath:instancePath+"/day",schemaPath:"#/properties/day/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
}
if(typeof data.locked !== "boolean"){
const err12 = {instancePath:instancePath+"/locked",schemaPath:"#/properties/locked/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
let data5 = data.timeEntries;
if(Array.isArray(data5)){
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
let data6 = data5[i0];
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
if(data6.start === undefined){
const err13 = {instancePath:instancePath+"/timeEntries/" + i0,schemaPath:"#/properties/timeEntries/items/required",keyword:"required",params:{missingProperty: "start"},message:"must have required property '"+"start"+"'"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
if(data6.discriminator === undefined){
const err14 = {instancePath:instancePath+"/timeEntries/" + i0,schemaPath:"#/properties/timeEntries/items/required",keyword:"required",params:{missingProperty: "discriminator"},message:"must have required property '"+"discriminator"+"'"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
for(const key0 in data6){
if(!((((((key0 === "id") || (key0 === "discriminator")) || (key0 === "start")) || (key0 === "end")) || (key0 === "comment")) || (key0 === "ticketId"))){
const err15 = {instancePath:instancePath+"/timeEntries/" + i0,schemaPath:"#/properties/timeEntries/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data6.id !== undefined){
let data7 = data6.id;
if(typeof data7 !== "string"){
const err16 = {instancePath:instancePath+"/timeEntries/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
const _errs25 = errors;
const _errs26 = errors;
if(!((data7 === "global") || (data7 === "system"))){
const err17 = {};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
var valid9 = _errs26 === errors;
if(valid9){
const err18 = {instancePath:instancePath+"/timeEntries/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
else {
errors = _errs25;
if(vErrors !== null){
if(_errs25){
vErrors.length = _errs25;
}
else {
vErrors = null;
}
}
}
}
if(data6.discriminator !== undefined){
let data8 = data6.discriminator;
if(typeof data8 !== "string"){
const err19 = {instancePath:instancePath+"/timeEntries/" + i0+"/discriminator",schemaPath:"#/properties/timeEntries/items/properties/discriminator/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(!((((data8 === "working") || (data8 === "driving")) || (data8 === "meeting")) || (data8 === "break"))){
const err20 = {instancePath:instancePath+"/timeEntries/" + i0+"/discriminator",schemaPath:"#/properties/timeEntries/items/properties/discriminator/enum",keyword:"enum",params:{allowedValues: schema250.properties.timeEntries.items.properties.discriminator.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data6.start !== undefined){
let data9 = data6.start;
if((typeof data9 !== "string") && (!(data9 && typeof data9 == "object" && !Array.isArray(data9)))){
const err21 = {instancePath:instancePath+"/timeEntries/" + i0+"/start",schemaPath:"#/properties/timeEntries/items/properties/start/type",keyword:"type",params:{type: schema250.properties.timeEntries.items.properties.start.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(typeof data9 === "string"){
if(!(formats4.validate(data9))){
const err22 = {instancePath:instancePath+"/timeEntries/" + i0+"/start",schemaPath:"#/properties/timeEntries/items/properties/start/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
}
if(data6.end !== undefined){
let data10 = data6.end;
if((typeof data10 !== "string") && (!(data10 && typeof data10 == "object" && !Array.isArray(data10)))){
const err23 = {instancePath:instancePath+"/timeEntries/" + i0+"/end",schemaPath:"#/properties/timeEntries/items/properties/end/type",keyword:"type",params:{type: schema250.properties.timeEntries.items.properties.end.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(typeof data10 === "string"){
if(!(formats4.validate(data10))){
const err24 = {instancePath:instancePath+"/timeEntries/" + i0+"/end",schemaPath:"#/properties/timeEntries/items/properties/end/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
if(data6.comment !== undefined){
if(typeof data6.comment !== "string"){
const err25 = {instancePath:instancePath+"/timeEntries/" + i0+"/comment",schemaPath:"#/properties/timeEntries/items/properties/comment/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data6.ticketId !== undefined){
if(typeof data6.ticketId !== "string"){
const err26 = {instancePath:instancePath+"/timeEntries/" + i0+"/ticketId",schemaPath:"#/properties/timeEntries/items/properties/ticketId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
else {
const err27 = {instancePath:instancePath+"/timeEntries/" + i0,schemaPath:"#/properties/timeEntries/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
}
else {
const err28 = {instancePath:instancePath+"/timeEntries",schemaPath:"#/properties/timeEntries/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
else {
const err29 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
validate113.errors = vErrors;
return errors === 0;
}
