// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateEmailMessage = validate31;
const schema71 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"emailMessage.json","title":"Email Message","type":"object","required":["to","from","status","subject"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","default":"emailMessage","enum":["emailMessage"]},"to":{"type":"string","pattern":"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"},"from":{"type":"string","pattern":".*<[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+>.*","description":"Must be in the format of 'Sender <email@example.com>"},"subject":{"type":"string"},"status":{"type":"string","enum":["queued","sending","sent","deferred","delivered","undelivered","bounced","blocked","receiving","received","opened","clicked","unsubscribed","spamReport"]},"statusMessage":{"type":"string"},"html":{"type":"string"},"text":{"type":"string"},"driver":{"type":"string"},"appData":{"type":"object"},"createdAt":{"$ref":"definitions.json#/definitions/date"},"updatedAt":{"$ref":"definitions.json#/definitions/date"},"systemId":{"$ref":"definitions.json#/definitions/systemId"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema26 = {"type":["string","object"],"format":"date-time"};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const pattern0 = new RegExp("^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "u");
const pattern1 = new RegExp(".*<[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+>.*", "u");
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];

function validate31(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="emailMessage.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "emailMessage";
}
if(data.to === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "to"},message:"must have required property '"+"to"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.from === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "from"},message:"must have required property '"+"from"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.status === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "status"},message:"must have required property '"+"status"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.subject === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "subject"},message:"must have required property '"+"subject"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(!(data1 === "emailMessage")){
const err8 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema71.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(data.to !== undefined){
let data2 = data.to;
if(typeof data2 === "string"){
if(!pattern0.test(data2)){
const err9 = {instancePath:instancePath+"/to",schemaPath:"#/properties/to/pattern",keyword:"pattern",params:{pattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"},message:"must match pattern \""+"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"+"\""};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
else {
const err10 = {instancePath:instancePath+"/to",schemaPath:"#/properties/to/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.from !== undefined){
let data3 = data.from;
if(typeof data3 === "string"){
if(!pattern1.test(data3)){
const err11 = {instancePath:instancePath+"/from",schemaPath:"#/properties/from/pattern",keyword:"pattern",params:{pattern: ".*<[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+>.*"},message:"must match pattern \""+".*<[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+>.*"+"\""};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
else {
const err12 = {instancePath:instancePath+"/from",schemaPath:"#/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
if(data.subject !== undefined){
if(typeof data.subject !== "string"){
const err13 = {instancePath:instancePath+"/subject",schemaPath:"#/properties/subject/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.status !== undefined){
let data5 = data.status;
if(typeof data5 !== "string"){
const err14 = {instancePath:instancePath+"/status",schemaPath:"#/properties/status/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
if(!((((((((((((((data5 === "queued") || (data5 === "sending")) || (data5 === "sent")) || (data5 === "deferred")) || (data5 === "delivered")) || (data5 === "undelivered")) || (data5 === "bounced")) || (data5 === "blocked")) || (data5 === "receiving")) || (data5 === "received")) || (data5 === "opened")) || (data5 === "clicked")) || (data5 === "unsubscribed")) || (data5 === "spamReport"))){
const err15 = {instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues: schema71.properties.status.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.statusMessage !== undefined){
if(typeof data.statusMessage !== "string"){
const err16 = {instancePath:instancePath+"/statusMessage",schemaPath:"#/properties/statusMessage/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
if(data.html !== undefined){
if(typeof data.html !== "string"){
const err17 = {instancePath:instancePath+"/html",schemaPath:"#/properties/html/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
if(data.text !== undefined){
if(typeof data.text !== "string"){
const err18 = {instancePath:instancePath+"/text",schemaPath:"#/properties/text/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
if(data.driver !== undefined){
if(typeof data.driver !== "string"){
const err19 = {instancePath:instancePath+"/driver",schemaPath:"#/properties/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
if(data.appData !== undefined){
let data10 = data.appData;
if(!(data10 && typeof data10 == "object" && !Array.isArray(data10))){
const err20 = {instancePath:instancePath+"/appData",schemaPath:"#/properties/appData/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
if(data.createdAt !== undefined){
let data11 = data.createdAt;
if((typeof data11 !== "string") && (!(data11 && typeof data11 == "object" && !Array.isArray(data11)))){
const err21 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(typeof data11 === "string"){
if(!(formats4.validate(data11))){
const err22 = {instancePath:instancePath+"/createdAt",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
}
if(data.updatedAt !== undefined){
let data12 = data.updatedAt;
if((typeof data12 !== "string") && (!(data12 && typeof data12 == "object" && !Array.isArray(data12)))){
const err23 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/date/type",keyword:"type",params:{type: schema26.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(typeof data12 === "string"){
if(!(formats4.validate(data12))){
const err24 = {instancePath:instancePath+"/updatedAt",schemaPath:"definitions.json#/definitions/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err25 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
}
else {
const err26 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
validate31.errors = vErrors;
return errors === 0;
}
