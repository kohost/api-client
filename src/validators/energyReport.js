// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validate = validate32;
const schema76 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"energyReport.json","title":"Energy Report","description":"Hourly Report for Energy based on energy report shards","type":"object","required":["id","type","roomId","first","last","consumption","totals","costPerKw"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["energyReport"],"default":"energyReport"},"reportTime":{"time":"string","enum":["hourly","daily","monthly"]},"roomId":{"$ref":"definitions.json#/definitions/id"},"first":{"type":["string","object"],"format":"date-time"},"last":{"type":["string","object"],"format":"date-time"},"consumption":{"type":"array","items":{"type":"object","required":["id","type","kwh"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"$ref":"definitions.json#/definitions/type"},"kwh":{"type":"number","minimum":0}}}},"totals":{"type":"array","items":{"type":"object","required":["lights","climate","media"],"properties":{"lights":{"type":"number","minimum":0},"climate":{"type":"number","minimum":0},"media":{"type":"number","minimum":0}}}},"costPerKw":{"type":"number","minimum":0}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema14 = {"type":"string","enum":["alarm","dimmer","switch","motionSensor","windowCovering","camera","mediaSource","thermostat","lock","courtesy","gateway","tv","dvr","appleTv","discPlayer","mediaPlayer","uncontrolledDevice"]};
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];

function validate32(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="energyReport.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "energyReport";
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.roomId === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "roomId"},message:"must have required property '"+"roomId"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.first === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "first"},message:"must have required property '"+"first"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.last === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "last"},message:"must have required property '"+"last"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.consumption === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "consumption"},message:"must have required property '"+"consumption"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.totals === undefined){
const err6 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "totals"},message:"must have required property '"+"totals"+"'"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.costPerKw === undefined){
const err7 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "costPerKw"},message:"must have required property '"+"costPerKw"+"'"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err8 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err10 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(!(data1 === "energyReport")){
const err12 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema76.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(data.reportTime !== undefined){
let data2 = data.reportTime;
if(!(((data2 === "hourly") || (data2 === "daily")) || (data2 === "monthly"))){
const err13 = {instancePath:instancePath+"/reportTime",schemaPath:"#/properties/reportTime/enum",keyword:"enum",params:{allowedValues: schema76.properties.reportTime.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.roomId !== undefined){
let data3 = data.roomId;
if(typeof data3 !== "string"){
const err14 = {instancePath:instancePath+"/roomId",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
const _errs12 = errors;
const _errs13 = errors;
if(!((data3 === "global") || (data3 === "system"))){
const err15 = {};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
var valid4 = _errs13 === errors;
if(valid4){
const err16 = {instancePath:instancePath+"/roomId",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
else {
errors = _errs12;
if(vErrors !== null){
if(_errs12){
vErrors.length = _errs12;
}
else {
vErrors = null;
}
}
}
}
if(data.first !== undefined){
let data4 = data.first;
if((typeof data4 !== "string") && (!(data4 && typeof data4 == "object" && !Array.isArray(data4)))){
const err17 = {instancePath:instancePath+"/first",schemaPath:"#/properties/first/type",keyword:"type",params:{type: schema76.properties.first.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(typeof data4 === "string"){
if(!(formats4.validate(data4))){
const err18 = {instancePath:instancePath+"/first",schemaPath:"#/properties/first/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
if(data.last !== undefined){
let data5 = data.last;
if((typeof data5 !== "string") && (!(data5 && typeof data5 == "object" && !Array.isArray(data5)))){
const err19 = {instancePath:instancePath+"/last",schemaPath:"#/properties/last/type",keyword:"type",params:{type: schema76.properties.last.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(typeof data5 === "string"){
if(!(formats4.validate(data5))){
const err20 = {instancePath:instancePath+"/last",schemaPath:"#/properties/last/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
}
if(data.consumption !== undefined){
let data6 = data.consumption;
if(Array.isArray(data6)){
const len0 = data6.length;
for(let i0=0; i0<len0; i0++){
let data7 = data6[i0];
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
if(data7.id === undefined){
const err21 = {instancePath:instancePath+"/consumption/" + i0,schemaPath:"#/properties/consumption/items/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(data7.type === undefined){
const err22 = {instancePath:instancePath+"/consumption/" + i0,schemaPath:"#/properties/consumption/items/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
if(data7.kwh === undefined){
const err23 = {instancePath:instancePath+"/consumption/" + i0,schemaPath:"#/properties/consumption/items/required",keyword:"required",params:{missingProperty: "kwh"},message:"must have required property '"+"kwh"+"'"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(data7.id !== undefined){
let data8 = data7.id;
if(typeof data8 !== "string"){
const err24 = {instancePath:instancePath+"/consumption/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
const _errs25 = errors;
const _errs26 = errors;
if(!((data8 === "global") || (data8 === "system"))){
const err25 = {};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
var valid9 = _errs26 === errors;
if(valid9){
const err26 = {instancePath:instancePath+"/consumption/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
else {
errors = _errs25;
if(vErrors !== null){
if(_errs25){
vErrors.length = _errs25;
}
else {
vErrors = null;
}
}
}
}
if(data7.type !== undefined){
let data9 = data7.type;
if(typeof data9 !== "string"){
const err27 = {instancePath:instancePath+"/consumption/" + i0+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
if(!(((((((((((((((((data9 === "alarm") || (data9 === "dimmer")) || (data9 === "switch")) || (data9 === "motionSensor")) || (data9 === "windowCovering")) || (data9 === "camera")) || (data9 === "mediaSource")) || (data9 === "thermostat")) || (data9 === "lock")) || (data9 === "courtesy")) || (data9 === "gateway")) || (data9 === "tv")) || (data9 === "dvr")) || (data9 === "appleTv")) || (data9 === "discPlayer")) || (data9 === "mediaPlayer")) || (data9 === "uncontrolledDevice"))){
const err28 = {instancePath:instancePath+"/consumption/" + i0+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data7.kwh !== undefined){
let data10 = data7.kwh;
if(typeof data10 == "number"){
if(data10 < 0 || isNaN(data10)){
const err29 = {instancePath:instancePath+"/consumption/" + i0+"/kwh",schemaPath:"#/properties/consumption/items/properties/kwh/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
else {
const err30 = {instancePath:instancePath+"/consumption/" + i0+"/kwh",schemaPath:"#/properties/consumption/items/properties/kwh/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
}
else {
const err31 = {instancePath:instancePath+"/consumption/" + i0,schemaPath:"#/properties/consumption/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
}
else {
const err32 = {instancePath:instancePath+"/consumption",schemaPath:"#/properties/consumption/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
if(data.totals !== undefined){
let data11 = data.totals;
if(Array.isArray(data11)){
const len1 = data11.length;
for(let i1=0; i1<len1; i1++){
let data12 = data11[i1];
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
if(data12.lights === undefined){
const err33 = {instancePath:instancePath+"/totals/" + i1,schemaPath:"#/properties/totals/items/required",keyword:"required",params:{missingProperty: "lights"},message:"must have required property '"+"lights"+"'"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
if(data12.climate === undefined){
const err34 = {instancePath:instancePath+"/totals/" + i1,schemaPath:"#/properties/totals/items/required",keyword:"required",params:{missingProperty: "climate"},message:"must have required property '"+"climate"+"'"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(data12.media === undefined){
const err35 = {instancePath:instancePath+"/totals/" + i1,schemaPath:"#/properties/totals/items/required",keyword:"required",params:{missingProperty: "media"},message:"must have required property '"+"media"+"'"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
if(data12.lights !== undefined){
let data13 = data12.lights;
if(typeof data13 == "number"){
if(data13 < 0 || isNaN(data13)){
const err36 = {instancePath:instancePath+"/totals/" + i1+"/lights",schemaPath:"#/properties/totals/items/properties/lights/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
else {
const err37 = {instancePath:instancePath+"/totals/" + i1+"/lights",schemaPath:"#/properties/totals/items/properties/lights/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
if(data12.climate !== undefined){
let data14 = data12.climate;
if(typeof data14 == "number"){
if(data14 < 0 || isNaN(data14)){
const err38 = {instancePath:instancePath+"/totals/" + i1+"/climate",schemaPath:"#/properties/totals/items/properties/climate/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
else {
const err39 = {instancePath:instancePath+"/totals/" + i1+"/climate",schemaPath:"#/properties/totals/items/properties/climate/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
if(data12.media !== undefined){
let data15 = data12.media;
if(typeof data15 == "number"){
if(data15 < 0 || isNaN(data15)){
const err40 = {instancePath:instancePath+"/totals/" + i1+"/media",schemaPath:"#/properties/totals/items/properties/media/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
else {
const err41 = {instancePath:instancePath+"/totals/" + i1+"/media",schemaPath:"#/properties/totals/items/properties/media/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
}
else {
const err42 = {instancePath:instancePath+"/totals/" + i1,schemaPath:"#/properties/totals/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
}
else {
const err43 = {instancePath:instancePath+"/totals",schemaPath:"#/properties/totals/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
if(data.costPerKw !== undefined){
let data16 = data.costPerKw;
if(typeof data16 == "number"){
if(data16 < 0 || isNaN(data16)){
const err44 = {instancePath:instancePath+"/costPerKw",schemaPath:"#/properties/costPerKw/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
else {
const err45 = {instancePath:instancePath+"/costPerKw",schemaPath:"#/properties/costPerKw/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
}
else {
const err46 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
validate32.errors = vErrors;
return errors === 0;
}
