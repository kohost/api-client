// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validateLock = validate45;
const schema111 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"lock.json","title":"Lock","description":"Any smart lock","type":"object","properties":{"id":{"$ref":"definitions.json#/definitions/id"},"name":{"type":"string"},"type":{"$ref":"definitions.json#/definitions/type"},"offline":{"type":"boolean"},"supportedNotifications":{"$ref":"definitions.json#/definitions/supportedNotifications"},"notification":{"$ref":"definitions.json#/definitions/notification"},"driver":{"$ref":"definitions.json#/definitions/driver"},"state":{"type":["string","null"],"enum":["locked","unlocked",null]},"mode":{"type":["string","null"],"enum":["normal","autoLock","emergencyOpen","emergencyClose","holdOpen","lockdown",null],"description":"emergencyOpen and emergencyClose are deprecated and can be removed once Salto, Paxton and Geovision drivers are updated","default":null},"supportedModes":{"type":"array","uniqueItems":true,"items":{"enum":["normal","autoLock","emergencyOpen","emergencyClose","holdOpen","lockdown",null]}},"batteryLevel":{"$ref":"definitions.json#/definitions/batteryLevel"},"systemId":{"$ref":"definitions.json#/definitions/systemId"},"watts":{"$ref":"definitions.json#/definitions/watts"}},"required":["id","type","state","driver"]};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema14 = {"type":"string","enum":["alarm","dimmer","switch","motionSensor","windowCovering","camera","mediaSource","thermostat","lock","courtesy","gateway","tv","dvr","appleTv","discPlayer","mediaPlayer","uncontrolledDevice"]};
const schema16 = {"type":"array","uniqueItems":true,"items":{"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]}};
const schema19 = {"type":"string","description":"Driver used to communicate with the object.","enum":["aws-kinesis","butler","crestron","dell","dmp","doorbird","dormakaba","dsc","ecobee","epson","geovision-rs","geovision-as-manager","honeywell-vista","igor","inncom","isapi","kohost-k7","kohost","lg","lg-webos","lapi","lirc","mews","mht","paxton","pelican-wireless","power-shades","rachio","rebrandly","rtsp","salto","salto-irn","samsung","se","sendgrid","sonifi","stay-n-touch","storable","twilio","unifi","valcom","vizio","wisenet","cloudflare-images","cloudflare-stream","insperia-privacy"]};
const schema118 = {"type":"number","minimum":0,"maximum":100};
const schema15 = {"type":"string","description":"Identifier of the object, directly related to the system."};
const schema20 = {"type":"number","minimum":0};
const func0 = require("ajv/dist/runtime/equal").default;
const schema17 = {"type":["object","null"],"properties":{"name":{"type":"string","$ref":"#/definitions/supportedNotifications/items"},"timestamp":{"type":"number","minimum":1655907956593},"description":{"type":"string"}}};
const schema18 = {"enum":["button 1","button 2","button 3","button 4","button 5","idle","powerHasBeedApplied","acMainsDisconnected","acMainsReconnected","replaceBatterySoon","replaceBatteryNow","batteryOk","hardwareFailure","softwareFailure","hardwareFailureWithCode","softwareFailureWithCode","motionDetection","airFilterNeedsCleaned","airFilterNeedsReplaced","smokeDetected","outsideSafeTemperatureRange","outsideSafeHumidityRange","scheduleMaintenance","doorAjar","communicationFailure","communicationOk","burglarAlarm","fireAlarm"]};

function validate46(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){
const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema17.type},message:"must be object,null"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.name !== undefined){
let data0 = data.name;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!((((((((((((((((((((((((((((data0 === "button 1") || (data0 === "button 2")) || (data0 === "button 3")) || (data0 === "button 4")) || (data0 === "button 5")) || (data0 === "idle")) || (data0 === "powerHasBeedApplied")) || (data0 === "acMainsDisconnected")) || (data0 === "acMainsReconnected")) || (data0 === "replaceBatterySoon")) || (data0 === "replaceBatteryNow")) || (data0 === "batteryOk")) || (data0 === "hardwareFailure")) || (data0 === "softwareFailure")) || (data0 === "hardwareFailureWithCode")) || (data0 === "softwareFailureWithCode")) || (data0 === "motionDetection")) || (data0 === "airFilterNeedsCleaned")) || (data0 === "airFilterNeedsReplaced")) || (data0 === "smokeDetected")) || (data0 === "outsideSafeTemperatureRange")) || (data0 === "outsideSafeHumidityRange")) || (data0 === "scheduleMaintenance")) || (data0 === "doorAjar")) || (data0 === "communicationFailure")) || (data0 === "communicationOk")) || (data0 === "burglarAlarm")) || (data0 === "fireAlarm"))){
const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
if(data.timestamp !== undefined){
let data1 = data.timestamp;
if(typeof data1 == "number"){
if(data1 < 1655907956593 || isNaN(data1)){
const err3 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1655907956593},message:"must be >= 1655907956593"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
else {
const err4 = {instancePath:instancePath+"/timestamp",schemaPath:"#/properties/timestamp/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
if(data.description !== undefined){
if(typeof data.description !== "string"){
const err5 = {instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
validate46.errors = vErrors;
return errors === 0;
}


function validate45(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="lock.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.mode === undefined){
data.mode = null;
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.state === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "state"},message:"must have required property '"+"state"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.driver === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "driver"},message:"must have required property '"+"driver"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err4 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err5 = {};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err6 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
if(data.name !== undefined){
if(typeof data.name !== "string"){
const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
if(data.type !== undefined){
let data2 = data.type;
if(typeof data2 !== "string"){
const err8 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!(((((((((((((((((data2 === "alarm") || (data2 === "dimmer")) || (data2 === "switch")) || (data2 === "motionSensor")) || (data2 === "windowCovering")) || (data2 === "camera")) || (data2 === "mediaSource")) || (data2 === "thermostat")) || (data2 === "lock")) || (data2 === "courtesy")) || (data2 === "gateway")) || (data2 === "tv")) || (data2 === "dvr")) || (data2 === "appleTv")) || (data2 === "discPlayer")) || (data2 === "mediaPlayer")) || (data2 === "uncontrolledDevice"))){
const err9 = {instancePath:instancePath+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
if(data.offline !== undefined){
if(typeof data.offline !== "boolean"){
const err10 = {instancePath:instancePath+"/offline",schemaPath:"#/properties/offline/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
if(data.supportedNotifications !== undefined){
let data4 = data.supportedNotifications;
if(Array.isArray(data4)){
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
let data5 = data4[i0];
if(!((((((((((((((((((((((((((((data5 === "button 1") || (data5 === "button 2")) || (data5 === "button 3")) || (data5 === "button 4")) || (data5 === "button 5")) || (data5 === "idle")) || (data5 === "powerHasBeedApplied")) || (data5 === "acMainsDisconnected")) || (data5 === "acMainsReconnected")) || (data5 === "replaceBatterySoon")) || (data5 === "replaceBatteryNow")) || (data5 === "batteryOk")) || (data5 === "hardwareFailure")) || (data5 === "softwareFailure")) || (data5 === "hardwareFailureWithCode")) || (data5 === "softwareFailureWithCode")) || (data5 === "motionDetection")) || (data5 === "airFilterNeedsCleaned")) || (data5 === "airFilterNeedsReplaced")) || (data5 === "smokeDetected")) || (data5 === "outsideSafeTemperatureRange")) || (data5 === "outsideSafeHumidityRange")) || (data5 === "scheduleMaintenance")) || (data5 === "doorAjar")) || (data5 === "communicationFailure")) || (data5 === "communicationOk")) || (data5 === "burglarAlarm")) || (data5 === "fireAlarm"))){
const err11 = {instancePath:instancePath+"/supportedNotifications/" + i0,schemaPath:"definitions.json#/definitions/supportedNotifications/items/enum",keyword:"enum",params:{allowedValues: schema16.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
let i1 = data4.length;
let j0;
if(i1 > 1){
outer0:
for(;i1--;){
for(j0 = i1; j0--;){
if(func0(data4[i1], data4[j0])){
const err12 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
break outer0;
}
}
}
}
}
else {
const err13 = {instancePath:instancePath+"/supportedNotifications",schemaPath:"definitions.json#/definitions/supportedNotifications/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
if(data.notification !== undefined){
if(!(validate46(data.notification, {instancePath:instancePath+"/notification",parentData:data,parentDataProperty:"notification",rootData}))){
vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
errors = vErrors.length;
}
}
if(data.driver !== undefined){
let data7 = data.driver;
if(typeof data7 !== "string"){
const err14 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
if(!((((((((((((((((((((((((((((((((((((((((((((((data7 === "aws-kinesis") || (data7 === "butler")) || (data7 === "crestron")) || (data7 === "dell")) || (data7 === "dmp")) || (data7 === "doorbird")) || (data7 === "dormakaba")) || (data7 === "dsc")) || (data7 === "ecobee")) || (data7 === "epson")) || (data7 === "geovision-rs")) || (data7 === "geovision-as-manager")) || (data7 === "honeywell-vista")) || (data7 === "igor")) || (data7 === "inncom")) || (data7 === "isapi")) || (data7 === "kohost-k7")) || (data7 === "kohost")) || (data7 === "lg")) || (data7 === "lg-webos")) || (data7 === "lapi")) || (data7 === "lirc")) || (data7 === "mews")) || (data7 === "mht")) || (data7 === "paxton")) || (data7 === "pelican-wireless")) || (data7 === "power-shades")) || (data7 === "rachio")) || (data7 === "rebrandly")) || (data7 === "rtsp")) || (data7 === "salto")) || (data7 === "salto-irn")) || (data7 === "samsung")) || (data7 === "se")) || (data7 === "sendgrid")) || (data7 === "sonifi")) || (data7 === "stay-n-touch")) || (data7 === "storable")) || (data7 === "twilio")) || (data7 === "unifi")) || (data7 === "valcom")) || (data7 === "vizio")) || (data7 === "wisenet")) || (data7 === "cloudflare-images")) || (data7 === "cloudflare-stream")) || (data7 === "insperia-privacy"))){
const err15 = {instancePath:instancePath+"/driver",schemaPath:"definitions.json#/definitions/driver/enum",keyword:"enum",params:{allowedValues: schema19.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
if(data.state !== undefined){
let data8 = data.state;
if((typeof data8 !== "string") && (data8 !== null)){
const err16 = {instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: schema111.properties.state.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(!(((data8 === "locked") || (data8 === "unlocked")) || (data8 === null))){
const err17 = {instancePath:instancePath+"/state",schemaPath:"#/properties/state/enum",keyword:"enum",params:{allowedValues: schema111.properties.state.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
let data9 = data.mode;
if((typeof data9 !== "string") && (data9 !== null)){
const err18 = {instancePath:instancePath+"/mode",schemaPath:"#/properties/mode/type",keyword:"type",params:{type: schema111.properties.mode.type},message:"must be string,null"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!(((((((data9 === "normal") || (data9 === "autoLock")) || (data9 === "emergencyOpen")) || (data9 === "emergencyClose")) || (data9 === "holdOpen")) || (data9 === "lockdown")) || (data9 === null))){
const err19 = {instancePath:instancePath+"/mode",schemaPath:"#/properties/mode/enum",keyword:"enum",params:{allowedValues: schema111.properties.mode.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(data.supportedModes !== undefined){
let data10 = data.supportedModes;
if(Array.isArray(data10)){
const len1 = data10.length;
for(let i2=0; i2<len1; i2++){
let data11 = data10[i2];
if(!(((((((data11 === "normal") || (data11 === "autoLock")) || (data11 === "emergencyOpen")) || (data11 === "emergencyClose")) || (data11 === "holdOpen")) || (data11 === "lockdown")) || (data11 === null))){
const err20 = {instancePath:instancePath+"/supportedModes/" + i2,schemaPath:"#/properties/supportedModes/items/enum",keyword:"enum",params:{allowedValues: schema111.properties.supportedModes.items.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
let i3 = data10.length;
let j1;
if(i3 > 1){
outer1:
for(;i3--;){
for(j1 = i3; j1--;){
if(func0(data10[i3], data10[j1])){
const err21 = {instancePath:instancePath+"/supportedModes",schemaPath:"#/properties/supportedModes/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
break outer1;
}
}
}
}
}
else {
const err22 = {instancePath:instancePath+"/supportedModes",schemaPath:"#/properties/supportedModes/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
if(data.batteryLevel !== undefined){
let data12 = data.batteryLevel;
if(typeof data12 == "number"){
if(data12 > 100 || isNaN(data12)){
const err23 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100},message:"must be <= 100"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(data12 < 0 || isNaN(data12)){
const err24 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
else {
const err25 = {instancePath:instancePath+"/batteryLevel",schemaPath:"definitions.json#/definitions/batteryLevel/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
if(data.systemId !== undefined){
if(typeof data.systemId !== "string"){
const err26 = {instancePath:instancePath+"/systemId",schemaPath:"definitions.json#/definitions/systemId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
if(data.watts !== undefined){
let data14 = data.watts;
if(typeof data14 == "number"){
if(data14 < 0 || isNaN(data14)){
const err27 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
else {
const err28 = {instancePath:instancePath+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
}
else {
const err29 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
validate45.errors = vErrors;
return errors === 0;
}
