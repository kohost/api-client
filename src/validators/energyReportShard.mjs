// This file is automatically generated. Do not modify it manually.

	  import { createRequire } from 'node:module'; 
	  const require = createRequire(import.meta.url);
"use strict";
export const validate = validate33;
const schema81 = {"$schema":"http://json-schema.org/draft-07/schema","$id":"energyReportShard.json","title":"Energy Report Shard","description":"Shard used for Energy Reports","type":"object","required":["id","type","roomId","first","last","data","ndata","expires"],"properties":{"id":{"$ref":"definitions.json#/definitions/id"},"type":{"type":"string","enum":["energyReportShard"],"default":"energyReportShard"},"roomId":{"$ref":"definitions.json#/definitions/id"},"first":{"type":["string","object"],"format":"date-time"},"last":{"type":["string","object"],"format":"date-time"},"data":{"type":"array","items":{"type":"object","required":["time","watts","id","type","value"],"properties":{"time":{"type":["string","object"],"format":"date-time"},"watts":{"$ref":"definitions.json#/definitions/watts"},"id":{"$ref":"definitions.json#/definitions/id"},"type":{"$ref":"definitions.json#/definitions/type"},"value":{"type":"number","minimum":0,"maximum":1}}}},"ndata":{"type":"integer","minimum":0,"maximum":100000,"default":0},"expires":{"type":["string","object"],"format":"date-time"}}};
const schema13 = {"type":"string","description":"Identifier of the object.","not":{"enum":["global","system"]}};
const schema20 = {"type":"number","minimum":0};
const schema14 = {"type":"string","enum":["alarm","dimmer","switch","motionSensor","windowCovering","camera","mediaSource","thermostat","lock","courtesy","gateway","tv","dvr","appleTv","discPlayer","mediaPlayer","uncontrolledDevice"]};
const formats4 = require("ajv-formats/dist/formats").fullFormats["date-time"];

function validate33(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="energyReportShard.json" */;
let vErrors = null;
let errors = 0;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type === undefined){
data.type = "energyReportShard";
}
if(data.ndata === undefined){
data.ndata = 0;
}
if(data.id === undefined){
const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(data.type === undefined){
const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(data.roomId === undefined){
const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "roomId"},message:"must have required property '"+"roomId"+"'"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(data.first === undefined){
const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "first"},message:"must have required property '"+"first"+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(data.last === undefined){
const err4 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "last"},message:"must have required property '"+"last"+"'"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(data.data === undefined){
const err5 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "data"},message:"must have required property '"+"data"+"'"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
if(data.ndata === undefined){
const err6 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "ndata"},message:"must have required property '"+"ndata"+"'"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(data.expires === undefined){
const err7 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "expires"},message:"must have required property '"+"expires"+"'"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
if(data.id !== undefined){
let data0 = data.id;
if(typeof data0 !== "string"){
const err8 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
const _errs4 = errors;
const _errs5 = errors;
if(!((data0 === "global") || (data0 === "system"))){
const err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
var valid2 = _errs5 === errors;
if(valid2){
const err10 = {instancePath:instancePath+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
}
let data1 = data.type;
if(typeof data1 !== "string"){
const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(!(data1 === "energyReportShard")){
const err12 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema81.properties.type.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(data.roomId !== undefined){
let data2 = data.roomId;
if(typeof data2 !== "string"){
const err13 = {instancePath:instancePath+"/roomId",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
const _errs11 = errors;
const _errs12 = errors;
if(!((data2 === "global") || (data2 === "system"))){
const err14 = {};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
var valid4 = _errs12 === errors;
if(valid4){
const err15 = {instancePath:instancePath+"/roomId",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
}
if(data.first !== undefined){
let data3 = data.first;
if((typeof data3 !== "string") && (!(data3 && typeof data3 == "object" && !Array.isArray(data3)))){
const err16 = {instancePath:instancePath+"/first",schemaPath:"#/properties/first/type",keyword:"type",params:{type: schema81.properties.first.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(typeof data3 === "string"){
if(!(formats4.validate(data3))){
const err17 = {instancePath:instancePath+"/first",schemaPath:"#/properties/first/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
}
if(data.last !== undefined){
let data4 = data.last;
if((typeof data4 !== "string") && (!(data4 && typeof data4 == "object" && !Array.isArray(data4)))){
const err18 = {instancePath:instancePath+"/last",schemaPath:"#/properties/last/type",keyword:"type",params:{type: schema81.properties.last.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(typeof data4 === "string"){
if(!(formats4.validate(data4))){
const err19 = {instancePath:instancePath+"/last",schemaPath:"#/properties/last/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
}
if(data.data !== undefined){
let data5 = data.data;
if(Array.isArray(data5)){
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
let data6 = data5[i0];
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
if(data6.time === undefined){
const err20 = {instancePath:instancePath+"/data/" + i0,schemaPath:"#/properties/data/items/required",keyword:"required",params:{missingProperty: "time"},message:"must have required property '"+"time"+"'"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
if(data6.watts === undefined){
const err21 = {instancePath:instancePath+"/data/" + i0,schemaPath:"#/properties/data/items/required",keyword:"required",params:{missingProperty: "watts"},message:"must have required property '"+"watts"+"'"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(data6.id === undefined){
const err22 = {instancePath:instancePath+"/data/" + i0,schemaPath:"#/properties/data/items/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
if(data6.type === undefined){
const err23 = {instancePath:instancePath+"/data/" + i0,schemaPath:"#/properties/data/items/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(data6.value === undefined){
const err24 = {instancePath:instancePath+"/data/" + i0,schemaPath:"#/properties/data/items/required",keyword:"required",params:{missingProperty: "value"},message:"must have required property '"+"value"+"'"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(data6.time !== undefined){
let data7 = data6.time;
if((typeof data7 !== "string") && (!(data7 && typeof data7 == "object" && !Array.isArray(data7)))){
const err25 = {instancePath:instancePath+"/data/" + i0+"/time",schemaPath:"#/properties/data/items/properties/time/type",keyword:"type",params:{type: schema81.properties.data.items.properties.time.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
if(typeof data7 === "string"){
if(!(formats4.validate(data7))){
const err26 = {instancePath:instancePath+"/data/" + i0+"/time",schemaPath:"#/properties/data/items/properties/time/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
if(data6.watts !== undefined){
let data8 = data6.watts;
if(typeof data8 == "number"){
if(data8 < 0 || isNaN(data8)){
const err27 = {instancePath:instancePath+"/data/" + i0+"/watts",schemaPath:"definitions.json#/definitions/watts/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
else {
const err28 = {instancePath:instancePath+"/data/" + i0+"/watts",schemaPath:"definitions.json#/definitions/watts/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
if(data6.id !== undefined){
let data9 = data6.id;
if(typeof data9 !== "string"){
const err29 = {instancePath:instancePath+"/data/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
const _errs29 = errors;
const _errs30 = errors;
if(!((data9 === "global") || (data9 === "system"))){
const err30 = {};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
var valid10 = _errs30 === errors;
if(valid10){
const err31 = {instancePath:instancePath+"/data/" + i0+"/id",schemaPath:"definitions.json#/definitions/id/not",keyword:"not",params:{},message:"must NOT be valid"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
else {
errors = _errs29;
if(vErrors !== null){
if(_errs29){
vErrors.length = _errs29;
}
else {
vErrors = null;
}
}
}
}
if(data6.type !== undefined){
let data10 = data6.type;
if(typeof data10 !== "string"){
const err32 = {instancePath:instancePath+"/data/" + i0+"/type",schemaPath:"definitions.json#/definitions/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
if(!(((((((((((((((((data10 === "alarm") || (data10 === "dimmer")) || (data10 === "switch")) || (data10 === "motionSensor")) || (data10 === "windowCovering")) || (data10 === "camera")) || (data10 === "mediaSource")) || (data10 === "thermostat")) || (data10 === "lock")) || (data10 === "courtesy")) || (data10 === "gateway")) || (data10 === "tv")) || (data10 === "dvr")) || (data10 === "appleTv")) || (data10 === "discPlayer")) || (data10 === "mediaPlayer")) || (data10 === "uncontrolledDevice"))){
const err33 = {instancePath:instancePath+"/data/" + i0+"/type",schemaPath:"definitions.json#/definitions/type/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
if(data6.value !== undefined){
let data11 = data6.value;
if(typeof data11 == "number"){
if(data11 > 1 || isNaN(data11)){
const err34 = {instancePath:instancePath+"/data/" + i0+"/value",schemaPath:"#/properties/data/items/properties/value/maximum",keyword:"maximum",params:{comparison: "<=", limit: 1},message:"must be <= 1"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(data11 < 0 || isNaN(data11)){
const err35 = {instancePath:instancePath+"/data/" + i0+"/value",schemaPath:"#/properties/data/items/properties/value/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
else {
const err36 = {instancePath:instancePath+"/data/" + i0+"/value",schemaPath:"#/properties/data/items/properties/value/type",keyword:"type",params:{type: "number"},message:"must be number"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
}
else {
const err37 = {instancePath:instancePath+"/data/" + i0,schemaPath:"#/properties/data/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
}
else {
const err38 = {instancePath:instancePath+"/data",schemaPath:"#/properties/data/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
let data12 = data.ndata;
if(!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))){
const err39 = {instancePath:instancePath+"/ndata",schemaPath:"#/properties/ndata/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
if(typeof data12 == "number"){
if(data12 > 100000 || isNaN(data12)){
const err40 = {instancePath:instancePath+"/ndata",schemaPath:"#/properties/ndata/maximum",keyword:"maximum",params:{comparison: "<=", limit: 100000},message:"must be <= 100000"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
if(data12 < 0 || isNaN(data12)){
const err41 = {instancePath:instancePath+"/ndata",schemaPath:"#/properties/ndata/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
if(data.expires !== undefined){
let data13 = data.expires;
if((typeof data13 !== "string") && (!(data13 && typeof data13 == "object" && !Array.isArray(data13)))){
const err42 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/type",keyword:"type",params:{type: schema81.properties.expires.type},message:"must be string,object"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
if(typeof data13 === "string"){
if(!(formats4.validate(data13))){
const err43 = {instancePath:instancePath+"/expires",schemaPath:"#/properties/expires/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
}
}
else {
const err44 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
validate33.errors = vErrors;
return errors === 0;
}
